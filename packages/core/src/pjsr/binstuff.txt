new Bitmap( int width, int height[, int format=BitmapFormat_ARGB32] )
new Bitmap( String filePath )
new Bitmap( ByteArray data[, String format="SVG"] )
new Bitmap( Bitmap bmp, Rect r )
new Bitmap( Bitmap bmp, int x0, int y0, int x1, int y1 )
new Bitmap( Bitmap bmp )
void Bitmap.assign( Bitmap bmp )
void Bitmap.clear()
isEmpty
Boolean Bitmap.isEmpty()
pixel
uint32 Bitmap.pixel( Point p )
uint32 Bitmap.pixel( int x, int y )
setPixel
void Bitmap.setPixel( Point p, uint32 v )
void Bitmap.setPixel( int x, int y, uint32 v )
mirrored
Bitmap Bitmap.mirrored()
mirroredHorizontally
Bitmap Bitmap.mirroredHorizontally()
mirroredVertically
Bitmap Bitmap.mirroredVertically()
scaled
Bitmap Bitmap.scaled( Number scale )
Bitmap Bitmap.scaled( Number sx, Number sy[, mode] )
scaledTo
Bitmap Bitmap.scaledTo( int size )
Bitmap Bitmap.scaledTo( int width, int height[, mode] )
rotated
Bitmap Bitmap.rotated( Number angleRadians[, mode] )
load
void Bitmap.load( String filePath )
void Bitmap.load( ByteArray data[, String format="SVG"]
save
void Bitmap.save( String filePath[, int quality] )
subimage
Bitmap Bitmap.subimage( Rect r )
Bitmap Bitmap.subimage( int x0, int y0, int x1, int y1 )
void Bitmap.copy( Bitmap bmp )
void Bitmap.copy( Point p, Bitmap bmp[, Rect r] )
void Bitmap.copy( int x, int y, Bitmap bmp[, int x0, int y0, int x1, int y1] )
fill
void Bitmap.fill( uint32 v )
void Bitmap.fill( Rect r, uint32 v )
void Bitmap.fill( int x0, int y0, int x1, int y1, uint32 v )
or
void Bitmap.or( uint32 v )
void Bitmap.or( Bitmap bmp )
void Bitmap.or( Rect r, uint32 v )
void Bitmap.or( Point p, Bitmap bmp[, Rect r] )
void Bitmap.or( int x0, int y0, int x1, int y1, uint32 v )
void Bitmap.or( int x, int y, Bitmap bmp, int x0, int y0, int x1, int y1 )
and
void Bitmap.and( uint32 v )
void Bitmap.and( Bitmap bmp )
void Bitmap.and( Rect r, uint32 v )
void Bitmap.and( Point p, Bitmap bmp[, Rect r] )
void Bitmap.and( int x0, int y0, int x1, int y1, uint32 v )
void Bitmap.and( int x, int y, Bitmap bmp, int x0, int y0, int x1, int y1 )
xor
void Bitmap.xor( uint32 v )
void Bitmap.xor( Bitmap bmp )
void Bitmap.xor( Rect r, uint32 v )
void Bitmap.xor( Point p, Bitmap bmp[, Rect r] )
void Bitmap.xor( int x0, int y0, int x1, int y1, uint32 v )
void Bitmap.xor( int x, int y, Bitmap bmp, int x0, int y0, int x1, int y1 )
xorRect
void Bitmap.xorRect( uint32 v )
void Bitmap.xorRect( Rect r, uint32 v )
void Bitmap.xorRect( int x0, int y0, int x1, int y1, uint32 v )
void Bitmap.invert()
void Bitmap.invert( Rect r )
void Bitmap.invert( int x0, int y0, int x1, int y1 )
invertRect
void Bitmap.invertRect()
void Bitmap.invertRect( Rect r )
void Bitmap.invertRect( int x0, int y0, int x1, int y1 )
replaceColor
void Bitmap.replaceColor( uint32 replaceThis, uint32 replaceWith )
void Bitmap.replaceColor( Rect r, uint32 replaceThis, uint32 replaceWith )
void Bitmap.replaceColor( int x0, int y0, int x1, int y1, uint32 replaceThis, uint32 replaceWith )
setAlpha
void Bitmap.setAlpha( uint alpha )
void Bitmap.setAlpha( Rect r, uint alpha )
void Bitmap.setAlpha( int x0, int y0, int x1, int y1, uint alpha )
void Bitmap.setAlpha( Bitmap alpha[, Boolean invert=false] )
setTransparency
void Bitmap.setTransparency( Number t )
void Bitmap.setTransparency( Rect r, Number t )
void Bitmap.setTransparency( int x0, int y0, int x1, int y1, Number t )
BitmapFormat_ARGB32
#define BitmapFormat_ARGB32 0
BitmapFormat_RGB32
#define BitmapFormat_RGB32 1
BitmapFormat_Invalid
#define BitmapFormat_Invalid -1
instantiating Bitmap: internal error
Bitmap.Finalize
Bitmap.Bitmap
out of memory
invalid argument type: 
internal error: while converting 
bitmap data load error
Wrong number of arguments.
Bitmap.Get
Bitmap.Set
Bitmap.assign
illegal operation while the bitmap is being painted on
Bitmap.clear
Bitmap.isEmpty
Bitmap.pixel
empty bitmap
bitmap coordinate(s) out of range
Bitmap.setPixel
Bitmap.mirrored
Bitmap.mirroredHorizontally
Bitmap.mirroredVertically
Bitmap.scaled
unknown/invalid bitmap interpolation
Bitmap.scaledTo
Bitmap.rotated
Bitmap.load
Bitmap.save
Bitmap.subimage
Bitmap.copy
Bitmap.fill
Bitmap.or
Bitmap.and
Bitmap.xor
Bitmap.xorRect
Bitmap.invert
Bitmap.invertRect
Bitmap.replaceColor
Bitmap.setAlpha
Bitmap.setTransparency
Object constructor not defined: 
Cannot construct object: constructor is gone: 
Object construction failed: 
Internal error.
Internal Error: 'PixInsightJSObject::Instantiate( JSContext*, void* ) const' must be reimplemented in derived class.
color
uint32 Brush.color
style
int Brush.style
stipple
Bitmap Brush.stipple
isSolid
Boolean Brush.isSolid
Boolean Brush.isEmpty
isStippled
Boolean Brush.isStippled
new Brush( [uint32 color=0xff000000[, int style=BrushStyle_Solid]] )
new Brush( Brush b )
void Brush.assign( Brush br )
BrushStyle_Empty
#define BrushStyle_Empty 0
Empty brush (no fill)
BrushStyle_Solid
#define BrushStyle_Solid 1
Solid pattern brush
BrushStyle_Dense
#define BrushStyle_Dense 2
Dense pattern brush
BrushStyle_HalfTone
#define BrushStyle_HalfTone 3
50% pattern brush
BrushStyle_Sparse
#define BrushStyle_Sparse 4
Sparse pattern brush
BrushStyle_HorizontalHatch
#define BrushStyle_HorizontalHatch 5
Fill with -----
BrushStyle_VerticalHatch
#define BrushStyle_VerticalHatch 6
Fill with |||||
BrushStyle_CrossHatch
#define BrushStyle_CrossHatch 7
Fill with +++++
BrushStyle_ForwardDiagonalHatch
#define BrushStyle_ForwardDiagonalHatch 8
Fill with /////
BrushStyle_BackwardDiagonalHatch
#define BrushStyle_BackwardDiagonalHatch 9
Fill with \\\\\
BrushStyle_CrossDiagonalHatch
#define BrushStyle_CrossDiagonalHatch 10
Fill with XXXXX
BrushStyle_Stipple
#define BrushStyle_Stipple 11
Fill with a tiled Bitmap
BrushStyle_LinearGradient
#define BrushStyle_LinearGradient 12
Fill with a linear gradient
BrushStyle_RadialGradient
#define BrushStyle_RadialGradient 13
Fill with a radial gradient
BrushStyle_ConicalGradient
#define BrushStyle_ConicalGradient 14
Fill with a conical gradient
instantiating Brush: internal error
GradientBrush
stops
Array GradientBrush.stops
spreadMode
int GradientBrush.spreadMode
GradientSpread_Pad
#define GradientSpread_Pad 0
GradientSpread_Reflect
#define GradientSpread_Reflect 1
GradientSpread_Repeat
#define GradientSpread_Repeat 2
LinearGradientBrush
new LinearGradientBrush( Point start, Point end[, Array stops[, int spread]] )
Point LinearGradientBrush.start
Point LinearGradientBrush.end
Number LinearGradientBrush.x1
Number LinearGradientBrush.y1
x2
Number LinearGradientBrush.x2
y2
Number LinearGradientBrush.y2
RadialGradientBrush
new RadialGradientBrush( Point center, Number radius[, Point focalPoint[, Array stops[, int spread]]] )
center
Point RadialGradientBrush.center
radius
Number RadialGradientBrush.radius
focalPoint
Point RadialGradientBrush.focalPoint
ConicalGradientBrush
new ConicalGradientBrush( Point center, Number angle[, Array stops] )
Point ConicalGradientBrush.center
angle
Number ConicalGradientBrush.angle
Brush.Finalize
Brush.Brush
unknown brush style
gradient brushes cannot be created by style
Brush.Get
Brush.Set
setting gradient brush styles is not allowed
Brush.assign
GradientBrush.GradientBrush
GradientBrush is not an instantiable object
GradientBrush.Get
Array allocation error.
LinearGradientBrush.LinearGradientBrush
unknown gradient spread mode
invalid gradient stop array
LinearGradientBrush.Get
RadialGradientBrush.RadialGradientBrush
RadialGradientBrush.Get
ConicalGradientBrush.ConicalGradientBrush
ConicalGradientBrush.Get
Internal Error: 'PixInsightJSObject::Instantiate( JSContext*, const void* ) const' must be reimplemented in derived class.
PushButton.Get
PushButton.Set
PushButton
text
String PushButton.text
icon
Bitmap PushButton.icon
iconWidth
int PushButton.iconWidth
iconHeight
int PushButton.iconHeight
pushed
Boolean PushButton.pushed
state
int PushButton.state
defaultButton
Boolean PushButton.defaultButton
onClick
void PushButton.onClick( Boolean checked )
onPress
void PushButton.onPress()
onRelease
void PushButton.onRelease()
new PushButton( [Control parent] )
CheckBox.Get
CheckBox.Set
CheckBox
String CheckBox.text
checked
Boolean CheckBox.checked
int CheckBox.state
tristate
Boolean CheckBox.tristate
onCheck
void CheckBox.onCheck( Boolean checked )
void CheckBox.onClick( Boolean checked )
void CheckBox.onPress()
void CheckBox.onRelease()
new CheckBox( [Control parent] )
CheckState_Unchecked
#define CheckState_Unchecked 0
CheckState_Checked
#define CheckState_Checked 1
CheckState_ThirdState
#define CheckState_ThirdState 2
RadioButton.Get
RadioButton.Set
RadioButton
String RadioButton.text
Boolean RadioButton.checked
int RadioButton.state
void RadioButton.onCheck( Boolean checked )
void RadioButton.onClick( Boolean checked )
void RadioButton.onPress()
void RadioButton.onRelease()
new RadioButton( [Control parent] )
ToolButton.Get
ToolButton.Set
ToolButton
String ToolButton.text
Bitmap ToolButton.icon
int ToolButton.iconWidth
int ToolButton.iconHeight
checkable
Boolean ToolButton.checkable
Boolean ToolButton.checked
Boolean ToolButton.pushed
int ToolButton.state
void ToolButton.onCheck( Boolean checked )
void ToolButton.onClick( Boolean checked )
void ToolButton.onPress()
void ToolButton.onRelease()
default
Boolean ToolButton.default
new ToolButton( [Control parent] )
PushButton.Finalize
PushButton.PushButton
1clickEvent( bool )
1pressEvent()
1releaseEvent()
pjsr_widgetShown
CheckBox.Finalize
CheckBox.CheckBox
1checkEvent( bool )
RadioButton.Finalize
RadioButton.RadioButton
ToolButton.Finalize
ToolButton.ToolButton
length
uint ByteArray.length
capacity
uint ByteArray.capacity
available
uint ByteArray.available
Boolean ByteArray.isEmpty
lowerBound
uint ByteArray.lowerBound
upperBound
uint ByteArray.upperBound
new ByteArray()
new ByteArray( uint length[, uint8 value] )
new ByteArray( ByteArray a[, uint startIndex[, uint count]] )
new ByteArray( TypedArray a[, uint startIndex[, uint endIndex]] )
new ByteArray( String s )
void ByteArray.assign( uint8 value[, uint length] )
void ByteArray.assign( String s )
void ByteArray.assign( ByteArray a )
swap
void ByteArray.swap( ByteArray a )
at
uint8 ByteArray.at( uint index )
void ByteArray.at( uint index, uint8 value )
reserve
void ByteArray.reserve( uint count )
squeeze
void ByteArray.squeeze()
grow
void ByteArray.grow( uint index[, uint count] )
add
void ByteArray.add( uint8 value[, uint count] )
void ByteArray.add( String s )
void ByteArray.add( ByteArray a )
insert
void ByteArray.insert( uint index, uint8 value[, uint count] )
void ByteArray.insert( uint index, String s )
void ByteArray.insert( uint index, ByteArray a )
void ByteArray.remove( uint index[, uint count] )
void ByteArray.remove()
void ByteArray.clear()
void ByteArray.replace( uint startIndex, uint endIndex, uint8 value[, uint count] )
void ByteArray.replace( uint startIndex, uint endIndex, ByteArray a )
void ByteArray.replace( uint startIndex, uint endIndex, String s )
reverse
void ByteArray.reverse()
sort
void ByteArray.sort()
linearSearch
Number ByteArray.linearSearch( uint8 value[, uint startIndex[, uint endIndex]] )
binarySearch
Number ByteArray.binarySearch( uint8 value[, uint startIndex[, uint endIndex]] )
toString
String ByteArray.toString( [uint startIndex[, uint count]] )
utf8ToString
String ByteArray.utf8ToString( [uint startIndex[, uint count]] )
toFloat32Array
Float32Array ByteArray.toFloat32Array( [uint startIndex[, uint count]] )
toFloat64Array
Float64Array ByteArray.toFloat64Array( [uint startIndex[, uint count]] )
toInt32Array
Int32Array ByteArray.toInt32Array( [uint startIndex[, uint count]] )
toInt16Array
Int16Array ByteArray.toInt16Array( [uint startIndex[, uint count]] )
toInt8Array
Int8Array ByteArray.toInt8Array( [uint startIndex[, uint count]] )
toUint32Array
Uint32Array ByteArray.toUint32Array( [uint startIndex[, uint count]] )
toUint16Array
Uint16Array ByteArray.toUint16Array( [uint startIndex[, uint count]] )
toUint8Array
Uint8Array ByteArray.toUint8Array( [uint startIndex[, uint count]] )
toUint8ClampedArray
Uint8ClampedArray ByteArray.toUint8ClampedArray( [uint startIndex[, uint count]] )
toHex
String ByteArray.toHex( [uint startIndex[, uint count]] )
toBase64
String ByteArray.toBase64( [uint startIndex[, uint count]] )
hash
uint32 ByteArray.hash( [uint seed[, uint startIndex[, uint count]]] )
hash32
uint32 ByteArray.hash32( [uint seed[, uint startIndex[, uint count]]] )
hash64
[lsw,msw] ByteArray.hash64( [uint seedLSW[, uint seedMSW[, uint startIndex[, uint count]]]] )
stringToUTF8
ByteArray ByteArray.stringToUTF8( String str[, uint startIndex[, uint count]] )
stringToMBS
ByteArray ByteArray.stringToMBS( String str[, uint startIndex[, uint count]] )
stringToLocal8Bit
ByteArray ByteArray.stringToLocal8Bit( String str[, uint startIndex[, uint count]] )
fromHex
ByteArray ByteArray.fromHex( String hex )
fromBase64
ByteArray ByteArray.fromBase64( String base64 )
instantiating ByteArray: internal error
ByteArray.Finalize
ByteArray.ByteArray
invalid typed array data
ByteArray.Get
ByteArray.assign
ByteArray.swap
ByteArray.at
ByteArray.reserve
ByteArray.squeeze
ByteArray.grow
ByteArray.add
ByteArray.insert
ByteArray.remove
ByteArray.clear
ByteArray.replace
ByteArray.reverse
ByteArray.sort
ByteArray.linearSearch
ByteArray.binarySearch
ByteArray.toString
ByteArray.utf8ToString
ByteArray.toFloat32Array
ByteArray.toFloat64Array
ByteArray.toUint32Array
ByteArray.toUint16Array
ByteArray.toUint8Array
ByteArray.toUint8ClampedArray
ByteArray.toInt32Array
ByteArray.toInt16Array
ByteArray.toInt8Array
ByteArray.toHex
ByteArray.toBase64
ByteArray.hash32
ByteArray.hash64
ByteArray.stringToUTF8
ByteArray.stringToMBS
ByteArray.stringToLocal8Bit
ByteArray.fromHex
ByteArray.fromBase64
Cipher
algorithmName
String Cipher.algorithmName
keyLength
int Cipher.keyLength
new Cipher( int algorithm, ByteArray key )
encrypt
ByteArray Cipher.encrypt( ByteArray plainText )
decrypt
ByteArray Cipher.decrypt( ByteArray cipherText )
Cipher_AES256
#define Cipher_AES256 256
Cipher.Finalize
Cipher.Cipher
Unknown/unsupported cipher algorithm: %d
Invalid key length (%u bytes provided, %u expected)
algorithm
Cipher.Get
Cipher.encrypt
Cipher.decrypt
ComboBox.Get
ComboBox.Set
ComboBox
currentItem
int ComboBox.currentItem
autoCompletion
Boolean ComboBox.autoCompletion
editEnabled
Boolean ComboBox.editEnabled
editText
String ComboBox.editText
int ComboBox.iconHeight
int ComboBox.iconWidth
maxVisibleItemCount
int ComboBox.maxVisibleItemCount
minItemCharWidth
int ComboBox.minItemCharWidth
popupToolTip
String ComboBox.popupToolTip
numberOfItems
int ComboBox.numberOfItems
onEditTextUpdated
void ComboBox.onEditTextUpdated( String text )
onItemHighlighted
void ComboBox.onItemHighlighted( int itemIndex )
onItemSelected
void ComboBox.onItemSelected( int itemIndex )
new ComboBox( [Control parent] )
addItem
void ComboBox.addItem( String text[, Bitmap icon] )
void ComboBox.clear()
clearEditText
void ComboBox.clearEditText()
clearItemIcon
void ComboBox.clearItemIcon( int index )
clearItemText
void ComboBox.clearItemText( int index )
findItem
int ComboBox.findItem( String text[, int fromIdx=0[, Boolean exactMatch=false[, Boolean caseSensitive=false] )
hideList
void ComboBox.hideList()
insertItem
void ComboBox.insertItem( int index, String text[, Bitmap icon] )
itemIcon
Bitmap ComboBox.itemIcon( int index )
itemText
String ComboBox.itemText( int index )
removeItem
void ComboBox.removeItem( int index )
setItemIcon
void ComboBox.setItemIcon( int index, Bitmap )
setItemText
void ComboBox.setItemText( int index, String )
showList
void ComboBox.showList()
ComboBox.Finalize
ComboBox.ComboBox
1itemSelectedEvent( int )
1itemHighlightedEvent( int )
1editTextUpdatedEvent( const QString& )
ComboBox.addItem
ComboBox.clear
ComboBox.clearEditText
ComboBox.clearItemIcon
ComboBox.clearItemText
ComboBox.findItem
ComboBox.hideList
ComboBox.insertItem
ComboBox.itemIcon
ComboBox.itemText
ComboBox.removeItem
ComboBox.setItemIcon
ComboBox.setItemText
ComboBox.showList
Complex
re
Number Complex.re
real
Number Complex.real
im
Number Complex.im
imag
Number Complex.imag
new Complex()
new Complex( Number re[, Number im] )
new Complex( Complex c )
void Complex.assign( Complex c )
void Complex.assign( Number r )
void Complex.add( Complex c )
void Complex.add( Number r )
void Complex.sub( Complex c )
void Complex.sub( Number r )
mul
void Complex.mul( Complex c )
void Complex.mul( Number r )
div
void Complex.div( Complex c )
void Complex.div( Number r )
pow
void Complex.pow( Complex c )
void Complex.pow( Number r )
conj
Complex Complex.conj()
setConj
void Complex.setConj()
sqrt
Complex Complex.sqrt()
setSqrt
void Complex.setSqrt()
exp
Complex Complex.exp()
setExp
void Complex.setExp()
ln
Complex Complex.ln()
setLn
void Complex.setLn()
Complex Complex.log()
setLog
void Complex.setLog()
sin
Complex Complex.sin()
setSin
void Complex.setSin()
cos
Complex Complex.cos()
setCos
void Complex.setCos()
tan
Complex Complex.tan()
setTan
void Complex.setTan()
sinh
Complex Complex.sinh()
setSinh
void Complex.setSinh()
cosh
Complex Complex.cosh()
setCosh
void Complex.setCosh()
tanh
Complex Complex.tanh()
setTanh
void Complex.setTanh()
mag
Number Complex.mag()
abs
Number Complex.abs()
norm
Number Complex.norm()
arg
Number Complex.arg()
String Complex.toString()
toArray
Array Complex.toArray()
polar
Complex Complex.polar( Number r, Number thetaRadians )
Complex Complex.polar( Number r, Number sinTheta, Number cosTheta )
instantiating Complex: internal error
Complex.Finalize
Complex.Complex
Complex.Get
Complex.Set
Complex.assign
Complex.add
Complex.sub
Complex.mul
Complex.div
Complex.pow
Complex.conj
Complex.setConj
Complex.sqrt
Complex.setSqrt
Complex.exp
Complex.setExp
Complex.ln
Complex.setLn
Complex.log
Complex.setLog
Complex.sin
Complex.setSin
Complex.cos
Complex.setCos
Complex.tan
Complex.setTan
Complex.sinh
Complex.setSinh
Complex.cosh
Complex.setCosh
Complex.tanh
Complex.setTanh
Complex.mag
Complex.norm
Complex.arg
Complex.toString
Complex.toArray
Complex.polar
String Compression.algorithmName
maxCompressionLevel
int Compression.maxCompressionLevel
defaultCompressionLevel
int Compression.defaultCompressionLevel
compressionLevel
int Compression.compressionLevel
byteShuffling
Boolean Compression.byteShuffling
itemSize
uint32 Compression.itemSize
subblockSize
uint32 Compression.subblockSize
checksums
Boolean Compression.checksums
new Compression( int algorithm )
compress
Array Compression.compress( String|ByteArray|TypedArray data )
uncompress
ByteArray Compression.uncompress( Array subblocks )
Compression_ZLib
#define Compression_ZLib 1
Compression_LZ4
#define Compression_LZ4 4
Compression_LZ4HC
#define Compression_LZ4HC 41
Compression.Finalize
Compression.Compression
Unknown/unsupported compression algorithm (%d)
Compression.Get
Compression.Set
Compression.compress
Invalid argument type.
Compression.uncompress
Insufficient compressed subblock data: expected two or more subblock array elements
Invalid compressed subblock data
console
abortEnabled
Boolean Console.abortEnabled
abortRequested
Boolean Console.abortRequested
int Console.write( [value1[, value2[, ..., valueN]]] )
note
int Console.note( [value1[, value2[, ..., valueN]]] )
int Console.warning( [value1[, value2[, ..., valueN]]] )
critical
int Console.critical( [value1[, value2[, ..., valueN]]] )
writeln
int Console.writeln( [value1[, value2[, ..., valueN]]] )
noteln
int Console.noteln( [value1[, value2[, ..., valueN]]] )
warningln
int Console.warningln( [value1[, value2[, ..., valueN]]] )
criticalln
int Console.criticalln( [value1[, value2[, ..., valueN]]] )
void Console.flush()
readChar
int Console.readChar()
readString
String Console.readString()
void Console.clear()
void Console.show( [Boolean animate=true] )
void Console.hide( [Boolean animate=true] )
beginLog
void Console.beginLog()
endLog
ByteArray Console.endLog()
logText
ByteArray Console.logText()
Console.Get
Console.Set
Console.write
Console.note
Console.warning
Console.critical
Console.writeln
Console.noteln
Console.warningln
Console.criticalln
Console.flush
1repaint()
Console.readChar
Console.readString
Console.clear
Console.show
Console.hide
Console.beginLog
Console.endLog
Console.logText
Control.Control
Control.Finalize
Control.Get
Control.Set
illegal operation while the control is being painted on
Illegal call to Control.setSizer
Control.resize
Control.adjustToContents
Control.setMinWidth
Control.setMinHeight
Control.setMinSize
Control.setMaxWidth
Control.setMaxHeight
Control.setMaxSize
Control.setFixedWidth
Control.setFixedHeight
Control.setFixedSize
Control.setScaledMinWidth
Control.setScaledMinHeight
Control.setScaledMinSize
Control.setScaledMaxWidth
Control.setScaledMaxHeight
Control.setScaledMaxSize
Control.setScaledFixedWidth
Control.setScaledFixedHeight
Control.setScaledFixedSize
Control.setVariableWidth
Control.setVariableHeight
Control.setVariableSize
Control.move
Control.bringToFront
Control.sendToBack
Control.stackUnder
Control.showAlias
Control.hideAlias
Control.globalToLocal
Control.localToGlobal
Control.parentToLocal
Control.localToParent
Control.controlToLocal
Control.localToControl
Control.childByPos
Control.isAncestorOf
Control.show
Control.hide
Control.activateWindow
Control.update
Control.repaint
Control.restyle
Control.ensureLayoutUpdated
Control.scroll
Control.setCursorToParent
Control.render
Control.logicalPixelsToPhysical
Control.physicalPixelsToLogical
Control.scaledResource
Control.scaledStyleSheet
objectId
String Control.objectId
frameRect
Rect Control.frameRect
clientRect
Rect Control.clientRect
int Control.width
int Control.height
boundsRect
Rect Control.boundsRect
minWidth
int Control.minWidth
maxWidth
int Control.maxWidth
minHeight
int Control.minHeight
maxHeight
int Control.maxHeight
scaledMinWidth
int Control.scaledMinWidth
scaledMaxWidth
int Control.scaledMaxWidth
scaledMinHeight
int Control.scaledMinHeight
scaledMaxHeight
int Control.scaledMaxHeight
isFixedWidth
Boolean Control.isFixedWidth
isFixedHeight
Boolean Control.isFixedHeight
smartMinWidth
int Control.smartMinWidth
smartMinHeight
int Control.smartMinHeight
position
Point Control.position
isUnderMouse
Boolean Control.isUnderMouse
sizer
Sizer Control.sizer
childrenRect
Rect Control.childrenRect
parent
Control Control.parent
window
Control Control.window
dialog
Dialog Control.dialog
displayPixelRatio
Number Control.displayPixelRatio
resourcePixelRatio
Number Control.resourcePixelRatio
Boolean Control.enabled
mouseTracking
Boolean Control.mouseTracking
Boolean Control.visible
visibleRect
Rect Control.visibleRect
isMaximized
Boolean Control.isMaximized
isMinimized
Boolean Control.isMinimized
isModal
Boolean Control.isModal
isWindow
Boolean Control.isWindow
isDialog
Boolean Control.isDialog
isActiveWindow
Boolean Control.isActiveWindow
hasFocus
Boolean Control.hasFocus
focusStyle
int Control.focusStyle
focusedChild
Control Control.focusedChild
childToFocus
Control Control.childToFocus
nextSiblingToFocus
Control Control.nextSiblingToFocus
canUpdate
Boolean Control.canUpdate
cursor
Cursor Control.cursor
styleSheet
String Control.styleSheet
backgroundColor
uint32 Control.backgroundColor
foregroundColor
uint32 Control.foregroundColor
canvasColor
uint32 Control.canvasColor
alternateCanvasColor
uint32 Control.alternateCanvasColor
textColor
uint32 Control.textColor
buttonColor
uint32 Control.buttonColor
buttonTextColor
uint32 Control.buttonTextColor
highlightColor
uint32 Control.highlightColor
highlightedTextColor
uint32 Control.highlightedTextColor
font
Font Control.font
windowOpacity
Number Control.windowOpacity
windowTitle
String Control.windowTitle
toolTip
String Control.toolTip
onDestroy
void Control.onDestroy()
onShow
void Control.onShow()
onHide
void Control.onHide()
onClose
Boolean Control.onClose()
onGetFocus
Boolean|void Control.onGetFocus()
onLoseFocus
Boolean|void Control.onLoseFocus()
onEnter
Boolean|void Control.onEnter()
onLeave
Boolean|void Control.onLeave()
onMove
Boolean|void Control.onMove( int xNew, int yNew, int xOld, int yOld )
onResize
Boolean|void Control.onResize( int wNew, int hNew, int wOld, int hOld )
onPaint
Boolean|void Control.onPaint( int x0, int y0, int x1, int y1 )
onKeyPress
Boolean|void Control.onKeyPress( uint keyCode, uint modifiers )
onKeyRelease
Boolean|void Control.onKeyRelease( uint keyCode, uint modifiers )
onMouseMove
Boolean|void Control.onMouseMove( int x, int y, uint buttonState, uint modifiers )
onMouseDoubleClick
Boolean|void Control.onMouseDoubleClick( int x, int y, uint buttonState, uint modifiers )
onMousePress
Boolean|void Control.onMousePress( int x, int y, int button, uint buttonState, uint modifiers )
onMouseRelease
Boolean|void Control.onMouseRelease( int x, int y, int button, uint buttonState, uint modifiers )
onMouseWheel
Boolean|void Control.onMouseWheel( int x, int y, Number delta, uint buttonState, uint modifiers )
onChildCreate
void Control.onChildCreate( Control child )
onChildDestroy
void Control.onChildDestroy( Control child )
new Control( [Control parent] )
resize
void Control.resize( int w, int h )
adjustToContents
void Control.adjustToContents()
setMinWidth
void Control.setMinWidth( [int w] )
setMinHeight
void Control.setMinHeight( [int h] )
setMinSize
void Control.setMinSize( [int w, int h] )
setMaxWidth
void Control.setMaxWidth( [int w] )
setMaxHeight
void Control.setMaxHeight( [int h] )
setMaxSize
void Control.setMaxSize( [int w, int h] )
setFixedWidth
void Control.setFixedWidth( [int w] )
setFixedHeight
void Control.setFixedHeight( [int h] )
setFixedSize
void Control.setFixedSize( [int w, int h] )
setScaledMinWidth
void Control.setScaledMinWidth( int w )
setScaledMinHeight
void Control.setScaledMinHeight( int h )
setScaledMinSize
void Control.setScaledMinSize( int w, int h )
setScaledMaxWidth
void Control.setScaledMaxWidth( int w )
setScaledMaxHeight
void Control.setScaledMaxHeight( int h )
setScaledMaxSize
void Control.setScaledMaxSize( int w, int h )
setScaledFixedWidth
void Control.setScaledFixedWidth( int w )
setScaledFixedHeight
void Control.setScaledFixedHeight( int h )
setScaledFixedSize
void Control.setScaledFixedSize( int w, int h )
setVariableWidth
void Control.setVariableWidth()
setVariableHeight
void Control.setVariableHeight()
setVariableSize
void Control.setVariableSize()
move
void Control.move( Point )
void Control.move( int x, int y )
bringToFront
void Control.bringToFront()
sendToBack
void Control.sendToBack()
stackUnder
void Control.stackUnder( Control )
showAlias
void Control.showAlias()
hideAlias
void Control.hideAlias()
globalToLocal
Point Control.globalToLocal( Point )
localToGlobal
Point Control.localToGlobal( Point )
parentToLocal
Point Control.parentToLocal( Point )
localToParent
Point Control.localToParent( Point )
controlToLocal
Point Control.controlToLocal( Control, Point )
localToControl
Point Control.localToControl( Control, Point )
childByPos
Control Control.childByPos( Point )
Control Control.childByPos( int x, int y )
isAncestorOf
Boolean Control.isAncestorOf( Control )
void Control.show()
void Control.hide()
activateWindow
void Control.activateWindow()
update
void Control.update()
void Control.update( Rect )
void Control.update( int x0, int y0, int x1, int y1 )
repaint
void Control.repaint()
void Control.repaint( Rect )
void Control.repaint( int x0, int y0, int x1, int y1 )
restyle
void Control.restyle()
ensureLayoutUpdated
void Control.ensureLayoutUpdated()
scroll
void Control.scroll( Point d )
void Control.scroll( int dx, int dy )
void Control.scroll( Point d, Rect )
void Control.scroll( int dx, int dy, int x0, int y0, int x1, int y1 )
setCursorToParent
void Control.setCursorToParent()
render
Bitmap Control.render()
logicalPixelsToPhysical
int Control.logicalPixelsToPhysical( Number size )
physicalPixelsToLogical
int Control.physicalPixelsToLogical( Number size )
scaledResource
String Control.scaledResource( String filePath )
scaledStyleSheet
String Control.scaledStyleSheet( String cssCode[, int fontDPI=0] )
MouseButton_Left
#define MouseButton_Left 0x01
Primary mouse button
MouseButton_Right
#define MouseButton_Right 0x02
Secondary mouse button
MouseButton_Middle
#define MouseButton_Middle 0x04
Middle mouse button
MouseButton_X1
#define MouseButton_X1 0x10
First X button
MouseButton_X2
#define MouseButton_X2 0x20
Second X button
MouseButton_Unknown
#define MouseButton_Unknown 0
Unknown/unsupported mouse button
KeyModifier_Shift
#define KeyModifier_Shift 0x01
Shift key
KeyModifier_Control
#define KeyModifier_Control 0x02
Control key
KeyModifier_Alt
#define KeyModifier_Alt 0x04
Alt key
KeyModifier_SpaceBar
#define KeyModifier_SpaceBar 0x08
Space bar
KeyModifier_Meta
#define KeyModifier_Meta 0x10
Meta key (Mac OS X)
FocusStyle_NoFocus
#define FocusStyle_NoFocus 0x00
The control doesn't accept focus
FocusStyle_Tab
#define FocusStyle_Tab 0x01
Can focus control by pressing the tab key
FocusStyle_Click
#define FocusStyle_Click 0x02
Can focus control by mouse clicking
FocusStyle_Wheel
#define FocusStyle_Wheel 0x04
Can focus control with the mouse wheel
FocusStyle_TextListTab
#define FocusStyle_TextListTab 0x08
Mac OS X only
CoreApplication
platform
String CoreApplication.platform
programName
String CoreApplication.programName
language
String CoreApplication.language
versionMajor
int CoreApplication.versionMajor
versionMinor
int CoreApplication.versionMinor
versionRelease
int CoreApplication.versionRelease
versionRevision
int CoreApplication.versionRevision
versionBuild
int CoreApplication.versionBuild
versionBeta
int CoreApplication.versionBeta
versionLE
Boolean CoreApplication.versionLE
versionCodename
String CoreApplication.versionCodename
String CoreApplication.filePath
dirPath
String CoreApplication.dirPath
baseDirPath
String CoreApplication.baseDirPath
appDirPath
String CoreApplication.appDirPath
binDirPath
String CoreApplication.binDirPath
etcDirPath
String CoreApplication.etcDirPath
rscDirPath
String CoreApplication.rscDirPath
includeDirPath
String CoreApplication.includeDirPath
srcDirPath
String CoreApplication.srcDirPath
libDirPath
String CoreApplication.libDirPath
libraryDirPath
String CoreApplication.libraryDirPath
docDirPath
String CoreApplication.docDirPath
colorDirPath
String CoreApplication.colorDirPath
agentName
String CoreApplication.agentName
caBundleFilePath
String CoreApplication.caBundleFilePath
startTime
Date CoreApplication.startTime
int CoreApplication.instance
String CoreApplication.pid
hasPendingMessages
Boolean CoreApplication.hasPendingMessages
numberOfPendingMessages
uint CoreApplication.numberOfPendingMessages
isInstanceRunning
Boolean CoreApplication.isInstanceRunning( int instance )
otherInstancesRunning
Boolean CoreApplication.otherInstancesRunning()
isInstanceAlive
Boolean CoreApplication.isInstanceAlive( int instance )
firstInstanceAlive
int CoreApplication.firstInstanceAlive()
launchInstance
void CoreApplication.launchInstance( [int instance] )
activateInstance
void CoreApplication.activateInstance( int instance )
terminateInstance
void CoreApplication.terminateInstance( int instance )
instancePID
String CoreApplication.instancePID( int instance )
sendMessage
Boolean CoreApplication.sendMessage( int instance, String message[, String uniqueId] )
processPendingMessages
void CoreApplication.processPendingMessages( [int msec=0] )
clearPendingMessages
void CoreApplication.clearPendingMessages()
CoreApplication.CoreApplication
CoreApplication.Get
MacOSX
CoreApplication.isInstanceRunning
CoreApplication.otherInstancesRunning
CoreApplication.isInstanceAlive
CoreApplication.firstInstanceAlive
CoreApplication.launchInstance
Instance index out of range.
There are no core application slots available.
Unable to execute external process.
CoreApplication.activateInstance
CoreApplication.terminateInstance
CoreApplication.instancePID
CoreApplication.sendMessage
CoreApplication.processPendingMessages
CoreApplication.clearPendingMessages
CryptographicHash
String CryptographicHash.algorithmName
hashLength
int CryptographicHash.hashLength
new CryptographicHash( int algorithm )
initialize
void CryptographicHash.initialize()
void CryptographicHash.update( ByteArray data )
finalize
ByteArray CryptographicHash.finalize()
ByteArray CryptographicHash.hash( ByteArray )
CryptographicHash_SHA1
#define CryptographicHash_SHA1 1
CryptographicHash_MD5
#define CryptographicHash_MD5 5
CryptographicHash_SHA224
#define CryptographicHash_SHA224 224
CryptographicHash_SHA256
#define CryptographicHash_SHA256 256
CryptographicHash_SHA384
#define CryptographicHash_SHA384 384
CryptographicHash_SHA512
#define CryptographicHash_SHA512 512
CryptographicHash_SHA3_256
#define CryptographicHash_SHA3_256 3256
CryptographicHash_SHA3_512
#define CryptographicHash_SHA3_512 3512
CryptographicHash.Finalize
CryptographicHash.CryptographicHash
Unknown/unsupported cryptographic hashing algorithm (%d)
CryptographicHash.Get
CryptographicHash.initialize
CryptographicHash.update
CryptographicHash.finalize
CryptographicHash.hash
hotSpot
Point Cursor.hotSpot
hotX
int Cursor.hotX
hotY
int Cursor.hotY
bitmap
Bitmap Cursor.bitmap
new Cursor( [int shape = StdCursor_Arrow] )
new Cursor( Bitmap[, Point hotSpot] )
new Cursor( Bitmap, int hotX, int hotY )
new Cursor( Cursor csr )
void Cursor.assign( Cursor csr )
StdCursor_NoCursor
#define StdCursor_NoCursor 0
no cursor is shown
StdCursor_Arrow
#define StdCursor_Arrow 1
standard arrow cursor (pointing left)
StdCursor_InvArrow
#define StdCursor_InvArrow 2
inverted arrow cursor (pointing right)
StdCursor_UpArrow
#define StdCursor_UpArrow 3
upwards arrow
StdCursor_DownArrow
#define StdCursor_DownArrow 4
downwards arrow
StdCursor_LeftArrow
#define StdCursor_LeftArrow 5
leftwards arrow
StdCursor_RightArrow
#define StdCursor_RightArrow 6
rightwards arrow
StdCursor_Checkmark
#define StdCursor_Checkmark 7
checkmark (ok) cursor
StdCursor_Crossmark
#define StdCursor_Crossmark 8
crossmark (cancel) cursor
StdCursor_Accept
#define StdCursor_Accept 9
arrow + checkmark
StdCursor_Reject
#define StdCursor_Reject 10
arrow + crossmark
StdCursor_Add
#define StdCursor_Add 11
arrow + plus sign
StdCursor_Copy
#define StdCursor_Copy 12
arrow + square
StdCursor_Cross
#define StdCursor_Cross 13
crosshair
StdCursor_Hourglass
#define StdCursor_Hourglass 14
hourglass (native Windows wait cursor)
StdCursor_Watch
#define StdCursor_Watch 15
watch (native Macintosh wait cursor)
StdCursor_Wait
#define StdCursor_Wait StdCursor_Watch
wait cursor: we like the watch! :)
StdCursor_ArrowWait
#define StdCursor_ArrowWait 16
arrow + hourglass/watch
StdCursor_ArrowQuestion
#define StdCursor_ArrowQuestion 17
arrow + question mark
StdCursor_IBeam
#define StdCursor_IBeam 18
I-beam cursor (text edition)
StdCursor_VerticalSize
#define StdCursor_VerticalSize 19
vertical resize
StdCursor_HorizontalSize
#define StdCursor_HorizontalSize 20
horizontal resize
StdCursor_ForwardDiagonalSize
#define StdCursor_ForwardDiagonalSize 21
forward diagonal resize (/)
StdCursor_BackwardDiagonalSize
#define StdCursor_BackwardDiagonalSize 22
backward diagonal resize (\)
StdCursor_SizeAll
#define StdCursor_SizeAll 23
resize in all directions
StdCursor_VerticalSplit
#define StdCursor_VerticalSplit 24
split vertical
StdCursor_HorizontalSplit
#define StdCursor_HorizontalSplit 25
split horizontal
StdCursor_Hand
#define StdCursor_Hand 26
pointing hand cursor
StdCursor_PointingHand
#define StdCursor_PointingHand StdCursor_Hand
pointing hand cursor (same as Hand)
StdCursor_OpenHand
#define StdCursor_OpenHand 27
open hand cursor
StdCursor_ClosedHand
#define StdCursor_ClosedHand 28
closed hand cursor
StdCursor_SquarePlus
#define StdCursor_SquarePlus 29
plus sign into a square (used for zoom in)
StdCursor_SquareMinus
#define StdCursor_SquareMinus 30
minus sign into a square (used for zoom out)
StdCursor_CirclePlus
#define StdCursor_CirclePlus 31
plus sign into a circle (used for zoom in)
StdCursor_CircleMinus
#define StdCursor_CircleMinus 32
minus sign into a circle (used for zoom out)
StdCursor_Forbidden
#define StdCursor_Forbidden 33
stop cursor
instantiating Cursor: internal error
Cursor.Finalize
Cursor.Cursor
Expected a Cursor or Bitmap argument
Invalid arguments
Cursor.Get
Cursor.assign
Dialog.Get
Dialog.Set
Dialog
userResizable
Boolean Dialog.userResizable
result
int Dialog.result
onExecute
void Dialog.onExecute()
onReturn
void Dialog.onReturn( int retVal )
new Dialog( [Control parent] )
int Dialog.execute()
void Dialog.open()
done
void Dialog.done( int retCode )
ok
void Dialog.ok()
cancel
void Dialog.cancel()
newInstance
void Dialog.newInstance()
openBrowser
void Dialog.openBrowser( String uri[, String title[, int width, int height]] )
browseScriptDocumentation
Boolean Dialog.browseScriptDocumentation( String scriptName[, String title[, int width, int height]] )
StdDialogCode_Ok
#define StdDialogCode_Ok 1
StdDialogCode_Cancel
#define StdDialogCode_Cancel 0
Dialog.Finalize
Dialog.Dialog
Dialog.execute
Dialog.open
Dialog.returnCode
Dialog.ok
Dialog.cancel
Dialog.newInstance
2DragStarted()
1BeginInstanceGeneration()
Dialog.openBrowser
Web Browser
Dialog.browseScriptDocumentation
/Global/Dialogs/PJSR/DocumentationBrowser/
Edit.Get
Edit.Set
Edit
String Edit.text
caretPosition
int Edit.caretPosition
selectionStart
int Edit.selectionStart
selectionEnd
int Edit.selectionEnd
selectedText
String Edit.selectedText
hasSelection
Boolean Edit.hasSelection
rightAlignment
Boolean Edit.rightAlignment
Boolean Edit.modified
passwordMode
Boolean Edit.passwordMode
readOnly
Boolean Edit.readOnly
maxLength
int Edit.maxLength
onCaretPositionUpdated
void Edit.onCaretPositionUpdated( int oldPos, int newPos )
onEditCompleted
void Edit.onEditCompleted()
onReturnPressed
void Edit.onReturnPressed()
onSelectionUpdated
void Edit.onSelectionUpdated( int start, int end )
onTextUpdated
void Edit.onTextUpdated( String text )
new Edit( [Control parent] )
void Edit.clear()
void Edit.end()
home
void Edit.home()
selectAll
void Edit.selectAll()
unselect
void Edit.unselect()
Edit.Finalize
Edit.Edit
1editCompletedEvent()
1returnPressedEvent()
1textUpdatedEvent( const QString& )
1caretPositionUpdatedEvent( int, int )
1selectionChangedEvent()
Edit.clear
Edit.end
Edit.home
Edit.selectAll
Edit.unselect
ElapsedTime
Number ElapsedTime.value
String ElapsedTime.text
new ElapsedTime()
new ElapsedTime( ElapsedTime t )
void ElapsedTime.reset()
since
Number ElapsedTime.since( ElapsedTime t )
timeStamp
[low32,high32] ElapsedTime.timeStamp()
String ElapsedTime.toString( Number seconds )
instantiating ElapsedTime: internal error
ElapsedTime.Finalize
ElapsedTime.ElapsedTime
ElapsedTime.Get
ElapsedTime.reset
ElapsedTime.since
ElapsedTime.timeStamp
ElapsedTime.toString
EphemerisFile.Finalize
EphemerisFile.Get
EphemerisFile
String EphemerisFile.filePath
Date EphemerisFile.startTime
endTime
Date EphemerisFile.endTime
constants
String EphemerisFile.constants
objects
Array EphemerisFile.objects
Date EphemerisFile.creationTime
creatorOS
String EphemerisFile.creatorOS
creatorApplication
String EphemerisFile.creatorApplication
title
String EphemerisFile.title
briefDescription
String EphemerisFile.briefDescription
String EphemerisFile.description
organizationName
String EphemerisFile.organizationName
authors
String EphemerisFile.authors
copyright
String EphemerisFile.copyright
fundamentalEphemeridesFilePath
String EphemerisFile.fundamentalEphemeridesFilePath
shortTermFundamentalEphemeridesFilePath
String EphemerisFile.shortTermFundamentalEphemeridesFilePath
asteroidEphemeridesFilePath
String EphemerisFile.asteroidEphemeridesFilePath
shortTermAsteroidEphemeridesFilePath
String EphemerisFile.shortTermAsteroidEphemeridesFilePath
nutationModelFilePath
String EphemerisFile.nutationModelFilePath
shortTermNutationModelFilePath
String EphemerisFile.shortTermNutationModelFilePath
deltaTDataFilePath
String EphemerisFile.deltaTDataFilePath
deltaATDataFilePath
String EphemerisFile.deltaATDataFilePath
cipITRSDataFilePath
String EphemerisFile.cipITRSDataFilePath
fundamentalEphemerides
EphemerisFile EphemerisFile.fundamentalEphemerides
shortTermFundamentalEphemerides
EphemerisFile EphemerisFile.shortTermFundamentalEphemerides
asteroidEphemerides
EphemerisFile EphemerisFile.asteroidEphemerides
shortTermAsteroidEphemerides
EphemerisFile EphemerisFile.shortTermAsteroidEphemerides
nutationModel
EphemerisFile EphemerisFile.nutationModel
shortTermNutationModel
EphemerisFile EphemerisFile.shortTermNutationModel
new EphemerisFile( [String filePath] )
void EphemerisFile.open( String filePath )
void EphemerisFile.close()
isConstantAvailable
Boolean EphemerisFile.isConstantAvailable( String name )
constantValue
Number EphemerisFile.constantValue( String name )
isObjectAvailable
Boolean EphemerisFile.isObjectAvailable( String object[, String origin] )
objectName
String EphemerisFile.objectName( String object[, String origin] )
deltaT
Number EphemerisFile.deltaT( Date t )
Number EphemerisFile.deltaT( String isoTime )
Number EphemerisFile.deltaT( Number jd1[, Number jd2] )
deltaAT
Number EphemerisFile.deltaAT( Date t )
Number EphemerisFile.deltaAT( String isoTime )
Number EphemerisFile.deltaAT( Number jd1[, Number jd2] )
instantiating EphemerisFile: internal error
EphemerisFile.EphemerisFile
unable to create array element(s)
%.16g
EphemerisFile.open
EphemerisFile.close
EphemerisFile.isConstantAvailable
EphemerisFile.constantValue
Undefined ephemeris constant '
EphemerisFile.isObjectAvailable
EphemerisFile.objectName
EphemerisFile.deltaT
EphemerisFile.deltaAT
EphemerisHandle.Finalize
EphemerisHandle
String EphemerisHandle.objectId
originId
String EphemerisHandle.originId
String EphemerisHandle.objectName
Date EphemerisHandle.startTime
Date EphemerisHandle.endTime
hasDerivative
Boolean EphemerisHandle.hasDerivative
Number|null EphemerisHandle.H
Number|null EphemerisHandle.G
B_V
Number|null EphemerisHandle.B_V
Number|null EphemerisHandle.D
new EphemerisHandle( EphemerisFile parent, String object[, String origin] )
stateVector
Vector EphemerisHandle.stateVector( Date )
Vector EphemerisHandle.stateVector( String isoTime )
Vector EphemerisHandle.stateVector( Number jd1[, Number jd2=0] )
stateVectors
Array EphemerisHandle.stateVectors( Date )
Array EphemerisHandle.stateVectors( String isoTime )
Array EphemerisHandle.stateVectors( Number jd1[, Number jd2=0] )
EphemerisHandle.EphemerisHandle
Cannot create a handle to a closed ephemeris file.
EphemerisHandle.Get
EphemerisHandle.stateVector
Invalid time point.
Time point out of range.
GenericChebyshevFit: Empty or insignificant function evaluation interval.
GenericChebyshevFit: Empty polynomial expansion.
EphemerisHandle.stateVectors
ExternalProcess.Get
unable to create array element
ExternalProcess.Set
process write error
ExternalProcess
environment
Array ExternalProcess.environment
int ExternalProcess.error
exitCode
int ExternalProcess.exitCode
exitStatus
int ExternalProcess.exitStatus
Number ExternalProcess.pid
workingDirectory
String ExternalProcess.workingDirectory
bytesAvailable
Number ExternalProcess.bytesAvailable
bytesToWrite
Number ExternalProcess.bytesToWrite
isRunning
Boolean ExternalProcess.isRunning
isStarting
Boolean ExternalProcess.isStarting
standardOutput
ByteArray ExternalProcess.standardOutput
stdout
ByteArray ExternalProcess.stdout
standardError
ByteArray ExternalProcess.standardError
stderr
ByteArray ExternalProcess.stderr
outputData
ByteArray ExternalProcess.outputData
standardInput
ByteArray|String ExternalProcess.standardInput
stdin
ByteArray|String ExternalProcess.stdin
void ExternalProcess.onError( int errorCode )
onFinished
void ExternalProcess.onFinished( int exitCode, int exitStatus )
onStandardErrorDataAvailable
void ExternalProcess.onStandardErrorDataAvailable()
onStandardOutputDataAvailable
void ExternalProcess.onStandardOutputDataAvailable()
onStarted
void ExternalProcess.onStarted()
onStateChanged
void ExternalProcess.onStateChanged( int newState )
new ExternalProcess( [String program[, Array arguments]] )
void ExternalProcess.start( String program[, Array arguments] )
waitForStarted
Boolean ExternalProcess.waitForStarted( [int ms=6000] )
waitForFinished
Boolean ExternalProcess.waitForFinished( [int ms=6000] )
waitForDataAvailable
Boolean ExternalProcess.waitForDataAvailable( [int ms=6000] )
waitForDataWritten
Boolean ExternalProcess.waitForDataWritten( [int ms=6000] )
redirectStandardOutput
void ExternalProcess.redirectStandardOutput( String& fileName[, Boolean append=false] )
void ExternalProcess.redirectStandardOutput( ExternalProcess process )
redirectStandardError
void ExternalProcess.redirectStandardError( String fileName[, Boolean append=false] )
redirectStandardInput
void ExternalProcess.redirectStandardInput( String fileName )
closeStandardOutput
void ExternalProcess.closeStandardOutput()
closeStandardError
void ExternalProcess.closeStandardError()
closeStandardInput
void ExternalProcess.closeStandardInput()
kill
void ExternalProcess.kill()
void ExternalProcess.terminate()
int ExternalProcess.execute( String program[, Array arguments] )
startDetached
Number ExternalProcess.startDetached( String program[, Array arguments[, String workingDirectory]] )
Number ExternalProcess.startDetached( String program[, String workingDirectory] )
ProcessError_FailedToStart
#define ProcessError_FailedToStart 0
ProcessError_Crashed
#define ProcessError_Crashed 1
ProcessError_Timedout
#define ProcessError_Timedout 2
ProcessError_ReadError
#define ProcessError_ReadError 3
ProcessError_WriteError
#define ProcessError_WriteError 4
ProcessError_UnknownError
#define ProcessError_UnknownError 5
ProcessExitStatus_Normal
#define ProcessExitStatus_Normal 0
ProcessExitStatus_Crash
#define ProcessExitStatus_Crash 1
ExternalProcess.Finalize
ExternalProcess.ExternalProcess
empty program name specified
1errorEvent( QProcess::ProcessError )
1finishedEvent( int, QProcess::ExitStatus )
1readyReadStandardErrorEvent()
1readyReadStandardOutputEvent()
1startedEvent()
2stateChanged( QProcess::ProcessState )
1stateChangedEvent( QProcess::ProcessState )
ExternalProcess.start
ExternalProcess.waitForStarted
ExternalProcess.waitForFinished
ExternalProcess.waitForDataAvailable
ExternalProcess.waitForDataWritten
ExternalProcess.redirectStandardOutput
empty file name specified
ExternalProcess.redirectStandardError
ExternalProcess.redirectStandardInput
ExternalProcess.closeStandardOutput
ExternalProcess.closeStandardError
ExternalProcess.closeStandardInput
ExternalProcess.kill
ExternalProcess.terminate
ExternalProcess.execute
ExternalProcess.startDetached
FITSKeyword
String FITSKeyword.name
String FITSKeyword.value
String FITSKeyword.comment
isNull
Boolean FITSKeyword.isNull
isString
Boolean FITSKeyword.isString
isBoolean
Boolean FITSKeyword.isBoolean
isNumeric
Boolean FITSKeyword.isNumeric
numericValue
Number FITSKeyword.numericValue
strippedValue
String FITSKeyword.strippedValue
new FITSKeyword()
new FITSKeyword( String name, String value[, String comment] )
new FITSKeyword( FITSKeyword k )
void FITSKeyword.assign( FITSKeyword k )
void FITSKeyword.assign( String name, String value[, String comment] )
trim
void FITSKeyword.trim()
String FITSKeyword.toString()
Array FITSKeyword.toArray()
instantiating FITSKeyword: internal error
FITSKeyword.Finalize
FITSKeyword.FITSKeyword
FITSKeyword.Get
FITSKeyword.Set
FITSKeyword.assign
FITSKeyword.trim
FITSKeyword.toString
FITSKeyword.toArray
isOpen
Boolean File.isOpen
String File.path
uint32 File.mode
canRead
Boolean File.canRead
canWrite
Boolean File.canWrite
Number File.position
isEOF
Boolean File.isEOF
size
Number File.size
systemTempDirectory
String File.systemTempDirectory
systemCacheDirectory
String File.systemCacheDirectory
homeDirectory
String File.homeDirectory
currentWorkingDirectory
String File.currentWorkingDirectory
rootDirectory
String File.rootDirectory
new File( [String path[, uint32 mode=FileMode_Read|FileMode_Open]] )
seek
Number File.seek( Number pos[, int mode=SeekMode_FromCurrent] )
seekEnd
Number File.seekEnd()
rewind
void File.rewind()
Object File.read( data_type[, count=1] )
Float32Array File.read( DataType_Float32Array, uint length )
Float64Array File.read( DataType_Float64Array, uint length )
Int32Array File.read( DataType_Int32Array, uint length )
Uint32Array File.read( DataType_Uint32Array, uint length )
Int16Array File.read( DataType_Int16Array, uint length )
Uint16Array File.read( DataType_Uint16Array, uint length )
Int8Array File.read( DataType_Int8Array, uint length )
Uint8Array File.read( DataType_Uint8Array, uint length )
Uint8ClampedArray File.read( DataType_Uint8ClampedArray, uint length )
ByteArray File.read( DataType_ByteArray, uint length )
Vector File.read( DataType_Vector, int length )
Matrix File.read( DataType_Matrix, int rows, int cols )
void File.write( Object obj, int dataType )
void File.write( Array obj )
void File.write( TypedArray obj )
void File.write( ByteArray obj )
void File.write( Vector obj )
void File.write( Matrix obj )
outText
void File.outText( String text[, int dataType=DataType_String8] )
outTextLn
void File.outTextLn( String text[, int dataType=DataType_String8] )
void File.flush()
void File.open( String path[, uint32 mode=FileMode_Read|FileMode_Open] )
openForReading
void File.openForReading( String path )
openForReadWrite
void File.openForReadWrite( String path )
create
void File.create( String path )
createForWriting
void File.createForWriting( String path )
openOrCreate
void File.openOrCreate( String path )
void File.close()
openFile
File File.openFile( String path )
openFileForReading
File File.openFileForReading( String path )
createFile
File File.createFile( String path )
createFileForWriting
File File.createFileForWriting( String path )
openOrCreateFile
File File.openOrCreateFile( String path )
void File.remove( String filePath )
createDirectory
void File.createDirectory( String dirPath, Boolean createIntermediateDirs=true )
removeDirectory
void File.removeDirectory( String dirPath )
void File.move( String filePath, String newPath )
exists
Boolean File.exists( String filePath )
directoryExists
Boolean File.directoryExists( String dirPath )
readFile
ByteArray File.readFile( String filePath )
readTextFile
String File.readTextFile( String filePath )
writeFile
void File.writeFile( String filePath, ByteArray data )
writeTextFile
void File.writeTextFile( String filePath, String text )
setPermissions
void File.setPermissions( String filePath, uint32 permissions )
copyTimesAndPermissions
void File.copyTimesAndPermissions( String targetPath, String sourcePath )
copyLink
void File.copyLink( String targetPath, String sourcePath )
copyFile
void File.copyFile( String targetPath, String sourcePath[, Function progress[, Object progressThis=null]] )
moveFile
void File.moveFile( String targetPath, String sourcePath[, Function progress[, Object progressThis=null]] )
sameDevice
Boolean File.sameDevice( String path1, String path2 )
sameFile
Boolean File.sameFile( String path1, String path2 )
readLines
Array File.readLines( String filePath[, int options=ReadTextOptions_None] )
uniqueFileName
String File.uniqueFileName( [String directory=""[, int n=8[, String prefix=""[, String postfix=]]]] )
isReadOnly
Boolean File.isReadOnly( String filePath )
setReadOnly
void File.setReadOnly( String filePath[, Boolean readOnly=true] )
fullPath
String File.fullPath( String path )
fileURI
String File.fileURI( String path )
windowsPathToUnix
String File.windowsPathToUnix( String path )
unixPathToWindows
String File.unixPathToWindows( String path )
getAvailableSpace
Number File.getAvailableSpace( String directory )
findDrive
int File.findDrive( String path )
findName
int File.findName( String path )
findExtension
int File.findExtension( String filePath )
findSuffix
int File.findSuffix( String filePath )
findCompleteSuffix
int File.findCompleteSuffix( String filePath )
extractDrive
String File.extractDrive( String path )
extractDirectory
String File.extractDirectory( String path )
extractName
String File.extractName( String path )
extractExtension
String File.extractExtension( String filePath )
extractSuffix
String File.extractSuffix( String filePath )
extractCompleteSuffix
String File.extractCompleteSuffix( String filePath )
extractNameAndExtension
String File.extractNameAndExtension( String filePath )
extractNameAndSuffix
String File.extractNameAndSuffix( String filePath )
changeExtension
String File.changeExtension( String filePath, String newExt )
changeSuffix
String File.changeSuffix( String filePath, String newExt )
appendToName
String File.appendToName( String filePath, String postFix )
prependToName
String File.prependToName( String filePath, String preFix )
DataType_Boolean
#define DataType_Boolean 0
DataType_Int8
#define DataType_Int8 1
DataType_UInt8
#define DataType_UInt8 2
DataType_Int16
#define DataType_Int16 3
DataType_UInt16
#define DataType_UInt16 4
DataType_Int32
#define DataType_Int32 5
DataType_UInt32
#define DataType_UInt32 6
DataType_Int64
#define DataType_Int64 7
DataType_UInt64
#define DataType_UInt64 8
DataType_Real32
#define DataType_Real32 9
DataType_Real64
#define DataType_Real64 10
DataType_Complex32
#define DataType_Complex32 11
DataType_Complex64
#define DataType_Complex64 12
DataType_String8
#define DataType_String8 13
DataType_UCString
#define DataType_UCString 14
DataType_ByteArray
#define DataType_ByteArray 15
DataType_Vector
#define DataType_Vector 16
DataType_Matrix
#define DataType_Matrix 17
DataType_Float32Array
#define DataType_Float32Array 18
DataType_Float64Array
#define DataType_Float64Array 19
DataType_Int32Array
#define DataType_Int32Array 20
DataType_Uint32Array
#define DataType_Uint32Array 21
DataType_Int16Array
#define DataType_Int16Array 22
DataType_Uint16Array
#define DataType_Uint16Array 23
DataType_Int8Array
#define DataType_Int8Array 24
DataType_Uint8Array
#define DataType_Uint8Array 25
DataType_Uint8ClampedArray
#define DataType_Uint8ClampedArray 26
FileMode_Read
#define FileMode_Read 0x00000001
FileMode_Write
#define FileMode_Write 0x00000002
FileMode_AccessMode
#define FileMode_AccessMode 0x0000000F
FileMode_ShareRead
#define FileMode_ShareRead 0x00000010
FileMode_ShareWrite
#define FileMode_ShareWrite 0x00000020
FileMode_ShareMode
#define FileMode_ShareMode 0x000000F0
FileMode_Open
#define FileMode_Open 0x00000100
FileMode_Create
#define FileMode_Create 0x00000200
FileMode_OpenMode
#define FileMode_OpenMode 0x00000F00
SeekMode_FromBegin
#define SeekMode_FromBegin 0
SeekMode_FromCurrent
#define SeekMode_FromCurrent 1
SeekMode_FromEnd
#define SeekMode_FromEnd 2
ReadTextOptions_None
#define ReadTextOptions_None 0x0000
ReadTextOptions_RemoveEmptyLines
#define ReadTextOptions_RemoveEmptyLines 0x0001
ReadTextOptions_TrimTrailingSpaces
#define ReadTextOptions_TrimTrailingSpaces 0x0002
ReadTextOptions_TrimLeadingSpaces
#define ReadTextOptions_TrimLeadingSpaces 0x0004
ReadTextOptions_TrimLines
#define ReadTextOptions_TrimLines 0x0006
FileType_Block
#define FileType_Block 0x00000001
FileType_Character
#define FileType_Character 0x00000002
FileType_FIFO
#define FileType_FIFO 0x00000004
FileType_Regular
#define FileType_Regular 0x00000008
FileType_Directory
#define FileType_Directory 0x00000010
FileType_SymbolicLink
#define FileType_SymbolicLink 0x00000020
FileType_Socket
#define FileType_Socket 0x00000040
FileType_Mask
#define FileType_Mask 0x000000FF
FileAttribute_Archive
#define FileAttribute_Archive 0x00001000
FileAttribute_Compressed
#define FileAttribute_Compressed 0x00002000
FileAttribute_Encrypted
#define FileAttribute_Encrypted 0x00004000
FileAttribute_Hidden
#define FileAttribute_Hidden 0x00008000
FileAttribute_ReadOnly
#define FileAttribute_ReadOnly 0x00010000
FileAttribute_System
#define FileAttribute_System 0x00020000
FileAttribute_Temporary
#define FileAttribute_Temporary 0x00040000
FileAttribute_Mask
#define FileAttribute_Mask 0x000FF000
FilePermission_Read
#define FilePermission_Read 0x00100000
FilePermission_Write
#define FilePermission_Write 0x00200000
FilePermission_Execute
#define FilePermission_Execute 0x00400000
FilePermission_ReadGroup
#define FilePermission_ReadGroup 0x01000000
FilePermission_WriteGroup
#define FilePermission_WriteGroup 0x02000000
FilePermission_ExecuteGroup
#define FilePermission_ExecuteGroup 0x04000000
FilePermission_ReadOthers
#define FilePermission_ReadOthers 0x10000000
FilePermission_WriteOthers
#define FilePermission_WriteOthers 0x20000000
FilePermission_ExecuteOthers
#define FilePermission_ExecuteOthers 0x40000000
FilePermission_Mask
#define FilePermission_Mask 0xFFF00000
instantiating File: internal error
File.Finalize
File.File
File.Get
File.Set
File.seek
unknown file seek mode
File.seekEnd
File.rewind
File.read
unknown data type
File.write
data type argument required for a string value
invalid string type
data type argument required for a numeric value
invalid numeric type
invalid data type
data type argument required for an array value
invalid array item data type
data type argument invalid for a typed array value
invalid complex number data type
File.outText
File.outTextLn
File.flush
File.open
File.openForReading
File.openForReadWrite
File.create
File.createForWriting
File.openOrCreate
File.close
File.openFile
File.openFileForReading
File.createFile
File.createFileForWriting
File.openOrCreateFile
File.remove
File.createDirectory
File.removeDirectory
File.move
File.exists
File.directoryExists
File.isReadOnly
File.setReadOnly
File.readFile
File.readTextFile
File.writeFile
File.writeTextFile
File.setPermissions
File.copyTimesAndPermissions
File.copyLink
File.copyFile
File.moveFile
File.sameDevice
File.sameFile
File.readLines
File.uniqueFileName
File.fullPath
File.fileURI
File.windowsPathToUnix
File.unixPathToWindows
File.getAvailableSpace
File.findDrive
File.findName
File.findExtension
File.findCompleteSuffix
File.extractDrive
File.extractDirectory
File.extractName
File.extractExtension
File.extractCompleteSuffix
File.extractNameAndExtension
File.changeExtension
File.appendToName
File.prependToName
FileDialog
caption
String FileDialog.caption
filters
Array FileDialog.filters
initialPath
String FileDialog.initialPath
selectedFileExtension
String FileDialog.selectedFileExtension
Boolean FileDialog.execute()
OpenFileDialog
fileName
String OpenFileDialog.fileName
fileNames
Array OpenFileDialog.fileNames
multipleSelections
Boolean OpenFileDialog.multipleSelections
new OpenFileDialog()
loadImageFilters
void OpenFileDialog.loadImageFilters()
SaveFileDialog
String SaveFileDialog.fileName
overwritePrompt
Boolean SaveFileDialog.overwritePrompt
new SaveFileDialog()
void SaveFileDialog.loadImageFilters()
GetDirectoryDialog
String GetDirectoryDialog.directory
new GetDirectoryDialog()
FileDialog.Finalize
FileDialog.FileDialog
FileDialog is not an instantiable object
FileDialog.Get
FileDialog.Set
FileDialog.execute
OpenFileDialog.OpenFileDialog
OpenFileDialog.Get
OpenFileDialog.Set
OpenFileDialog.loadImageFilters
SaveFileDialog.SaveFileDialog
SaveFileDialog.Get
SaveFileDialog.Set
SaveFileDialog.loadImageFilters
GetDirectoryDialog.GetDirectoryDialog
GetDirectoryDialog.Get
FileFind
isValid
Boolean FileFind.isValid
searchPath
String FileFind.searchPath
String FileFind.name
uint32 FileFind.attributes
isDirectory
Boolean FileFind.isDirectory
isFile
Boolean FileFind.isFile
isSymbolicLink
Boolean FileFind.isSymbolicLink
isHidden
Boolean FileFind.isHidden
Number FileFind.size
numberOfLinks
Number FileFind.numberOfLinks
userId
Number FileFind.userId
groupId
Number FileFind.groupId
created
Date FileFind.created
lastAccessed
Date FileFind.lastAccessed
lastModified
Date FileFind.lastModified
new FileFind()
new FileFind( String filePath )
begin
Boolean FileFind.begin( String path )
next
Boolean FileFind.next()
void FileFind.end()
FileFind.Finalize
FileFind.FileFind
FileFind.Get
FileFind.begin
FileFind.next
FileFind.end
FileFormat
String FileFormat.name
fileExtensions
Array FileFormat.fileExtensions
mimeTypes
Array FileFormat.mimeTypes
uint32 FileFormat.version
String FileFormat.description
String FileFormat.implementation
Bitmap FileFormat.icon
smallIcon
Bitmap FileFormat.smallIcon
Boolean FileFormat.canRead
Boolean FileFormat.canWrite
canReadIncrementally
Boolean FileFormat.canReadIncrementally
canWriteIncrementally
Boolean FileFormat.canWriteIncrementally
canStore8Bit
Boolean FileFormat.canStore8Bit
canStore16Bit
Boolean FileFormat.canStore16Bit
canStore32Bit
Boolean FileFormat.canStore32Bit
canStore64Bit
Boolean FileFormat.canStore64Bit
canStoreFloat
Boolean FileFormat.canStoreFloat
canStoreDouble
Boolean FileFormat.canStoreDouble
canStoreComplex
Boolean FileFormat.canStoreComplex
canStoreDComplex
Boolean FileFormat.canStoreDComplex
canStoreGrayscale
Boolean FileFormat.canStoreGrayscale
canStoreRGBColor
Boolean FileFormat.canStoreRGBColor
canStoreAlphaChannels
Boolean FileFormat.canStoreAlphaChannels
canStoreResolution
Boolean FileFormat.canStoreResolution
canStoreKeywords
Boolean FileFormat.canStoreKeywords
canStoreICCProfiles
Boolean FileFormat.canStoreICCProfiles
canStoreThumbnails
Boolean FileFormat.canStoreThumbnails
canStoreProperties
Boolean FileFormat.canStoreProperties
canStoreImageProperties
Boolean FileFormat.canStoreImageProperties
canStoreRGBWS
Boolean FileFormat.canStoreRGBWS
canStoreDisplayFunctions
Boolean FileFormat.canStoreDisplayFunctions
canStoreColorFilterArrays
Boolean FileFormat.canStoreColorFilterArrays
supportsCompression
Boolean FileFormat.supportsCompression
supportsMultipleImages
Boolean FileFormat.supportsMultipleImages
canEditPreferences
Boolean FileFormat.canEditPreferences
usesFormatSpecificData
Boolean FileFormat.usesFormatSpecificData
supportsViewProperties
Boolean FileFormat.supportsViewProperties
isDeprecated
Boolean FileFormat.isDeprecated
formats
Array FileFormat.formats
new FileFormat( String nameExtOrMime[, Boolean toRead=false[, Boolean toWrite=false]] )
new FileFormat( FileFormat fmt )
validateFormatSpecificData
Boolean FileFormat.validateFormatSpecificData( Object data )
disposeFormatSpecificData
void FileFormat.disposeFormatSpecificData( Object data )
editPreferences
void FileFormat.editPreferences()
queryFormatStatus
String FileFormat.queryFormatStatus()
instantiating FileFormat: internal error
FileFormat.Finalize
FileFormat.FileFormat
empty format name, file extension or MIME type specified
no installed image file format was found for the specified MIME type and access conditions
no installed image file format was found for the specified file extension and access conditions
no installed image file format was found with the specified identifier
FileFormat.Get
FileFormat.validateFormatSpecificData
FileFormat.disposeFormatSpecificData
FileFormat.editPreferences
the format cannot edit preferences
FileFormat.queryFormatStatus
FileFormat FileFormatInstance.format
Boolean FileFormatInstance.isOpen
String FileFormatInstance.filePath
selectedImageIndex
int FileFormatInstance.selectedImageIndex
formatSpecificData
Object FileFormatInstance.formatSpecificData
imageFormatInfo
String FileFormatInstance.imageFormatInfo
keywords
Array FileFormatInstance.keywords
ByteArray FileFormatInstance.iccProfile
Image FileFormatInstance.thumbnail
Array FileFormatInstance.properties
imageProperties
Array FileFormatInstance.imageProperties
RGBColorSystem FileFormatInstance.rgbws
displayFunction
Array FileFormatInstance.displayFunction
colorFilterArray
Array FileFormatInstance.colorFilterArray
wasInexactRead
Boolean FileFormatInstance.wasInexactRead
wasLossyWrite
Boolean FileFormatInstance.wasLossyWrite
new FileFormatInstance( FileFormat format )
Boolean FileFormatInstance.close()
Array FileFormatInstance.open( String filePath[, String hints] )
readImage
Boolean FileFormatInstance.readImage( Image )
Matrix FileFormatInstance.read( int startRow, int rowCount[, int channel=0] )
Boolean FileFormatInstance.create( String filePath[, String hints[, int numberOfImages=1]] )
setOptions
Boolean FileFormatInstance.setOptions( ImageDescription d )
setImageId
Boolean FileFormatInstance.setImageId( String id )
writeImage
Boolean FileFormatInstance.writeImage( Image )
createImage
Boolean FileFormatInstance.createImage( ImageDescription d )
Boolean FileFormatInstance.write( Matrix buffer, int startRow[, int channel=0] )
readProperty
Object|null FileFormatInstance.readProperty( String id )
readImageProperty
Object|null FileFormatInstance.readImageProperty( String id )
writeProperty
Boolean FileFormatInstance.writeProperty( String id, Object value[, uint type] )
writeImageProperty
Boolean FileFormatInstance.writeImageProperty( String id, Object value[, uint type] )
FileFormatInstance.Finalize
FileFormatInstance.FileFormatInstance
unable to instantiate file format
FileFormatInstance.Get
internal error: invalid or corrupted ICC profile structure
FileFormatInstance.Set
' file format does not support multiple images
' file format does not support format-specific data
error setting format-specific data
error embedding a FITS keyword list
error embedding FITS keyword
error embedding ICC profile
error embedding thumbnail image
error embedding RGB working space
error embedding display function
insufficient color filter array data
error embedding color filter array
FileFormatInstance.close
FileFormatInstance.open
FileFormatInstance.readImage
FileFormatInstance.read
FileFormatInstance.create
FileFormatInstance.setOptions
FileFormatInstance.setImageId
FileFormatInstance.writeImage
FileFormatInstance.createImage
FileFormatInstance.write
invalid empty matrix
FileFormatInstance.readProperty
invalid property identifier '
illegal use of reserved property identifier '
FileFormatInstance.readImageProperty
FileFormatInstance.writeProperty
unable to initiate property embedding.
FileFormatInstance.writeImageProperty
unable to initiate image property embedding.
FileInfo
uint32 FileInfo.attributes
completeSuffix
String FileInfo.completeSuffix
String FileInfo.directory
drive
String FileInfo.drive
Boolean FileInfo.exists
String FileInfo.extension
Number FileInfo.groupId
Boolean FileInfo.isDirectory
isExecutable
Boolean FileInfo.isExecutable
Boolean FileInfo.isFile
Boolean FileInfo.isHidden
isReadable
Boolean FileInfo.isReadable
Boolean FileInfo.isSymbolicLink
isWritable
Boolean FileInfo.isWritable
Date FileInfo.lastAccessed
Date FileInfo.lastModified
String FileInfo.name
nameAndExtension
String FileInfo.nameAndExtension
nameAndSuffix
String FileInfo.nameAndSuffix
numberOfHardLinks
int FileInfo.numberOfHardLinks
String FileInfo.path
Number FileInfo.size
suffix
String FileInfo.suffix
symbolicLinkTarget
String FileInfo.symbolicLinkTarget
timeCreated
Date FileInfo.timeCreated
Number FileInfo.userId
new FileInfo()
new FileInfo( String filePath )
new FileInfo( FileInfo info )
void FileInfo.assign( FileInfo info )
void FileInfo.clear()
refresh
void FileInfo.refresh( [String filePath] )
instantiating FileInfo: internal error
FileInfo.Finalize
FileInfo.FileInfo
FileInfo.Get
FileInfo.assign
FileInfo.clear
FileInfo.refresh
FileTransfer
remoteURL
String FileTransfer.remoteURL
localFilePath
String FileTransfer.localFilePath
isDownload
Boolean FileTransfer.isDownload
isUpload
Boolean FileTransfer.isUpload
Boolean FileTransfer.ok
responseCode
int FileTransfer.responseCode
bytesTransferred
Number FileTransfer.bytesTransferred
totalTime
double FileTransfer.totalTime
totalSpeed
double FileTransfer.totalSpeed
perform
Boolean FileTransfer.perform()
FileDownload
contentType
String FileDownload.contentType
new FileDownload( String url, String filePath )
FileUpload
new FileUpload( String url, String filePath )
FileTransfer.Finalize
FileTransfer.FileTransfer
FileTransfer is not an instantiable object
FileTransfer.Get
FileTransfer.perform
FileDownload.FileDownload
FileDownload.Get
FileUpload.FileUpload
FileWatcher.Get
FileWatcher.Set
FileWatcher
files
Array FileWatcher.files
directories
Array FileWatcher.directories
onFileChanged
void FileWatcher.onFileChanged( String filePath )
onDirectoryChanged
void FileWatcher.onDirectoryChanged( String dirPath )
new FileWatcher()
new FileWatcher( Array paths )
addPath
void FileWatcher.addPath( String path )
addPaths
void FileWatcher.addPaths( Array paths )
removePath
void FileWatcher.removePath( String path )
removePaths
void FileWatcher.removePaths( Array paths )
void FileWatcher.clear()
FileWatcher.Finalize
FileWatcher.FileWatcher
2fileChanged( const QString& )
1fileChangedEvent( const QString& )
2directoryChanged( const QString& )
1directoryChangedEvent( const QString& )
FileWatcher.addPath
FileWatcher.addPaths
FileWatcher.removePath
FileWatcher.removePaths
FileWatcher.clear
family
String Font.family
isExactMatch
Boolean Font.isExactMatch
pixelSize
int Font.pixelSize
pointSize
Number Font.pointSize
unscaledPointSize
Number Font.unscaledPointSize
fixedPitch
Boolean Font.fixedPitch
kerning
Boolean Font.kerning
stretchFactor
Number Font.stretchFactor
weight
int Font.weight
bold
Boolean Font.bold
italic
Boolean Font.italic
underline
Boolean Font.underline
overline
Boolean Font.overline
strikeOut
Boolean Font.strikeOut
ascent
int Font.ascent
descent
int Font.descent
int Font.height
lineSpacing
int Font.lineSpacing
int Font.maxWidth
new Font()
new Font( int stdFamiliy[, Number size[, String unit = "pt"]] )
new Font( String family[, Number size[, String unit = "pt"]] )
new Font( Font fnt )
void Font.assign( Font fnt )
void Font.assign( int stdFamiliy[, Number size[, String unit = "pt"]] )
void Font.assign( String family[, Number size[, String unit = "pt"]] )
isCharDefined
Boolean Font.isCharDefined( int ch )
int Font.width( String s )
boundingRect
Rect Font.boundingRect( String s )
tightBoundingRect
Rect Font.tightBoundingRect( String s )
families
Array Font.families( [int writingSystem] )
isScalableFont
Boolean Font.isScalableFont( String family )
isFixedPitchFont
Boolean Font.isFixedPitchFont( String family )
FontFamily_Default
#define FontFamily_Default 0
Default font
FontFamily_SansSerif
#define FontFamily_SansSerif 1
Sans serif font: Helvetica, Swiss, Arial
FontFamily_Helvetica
#define FontFamily_Helvetica FontFamily_SansSerif
FontFamily_Swiss
#define FontFamily_Swiss FontFamily_SansSerif
FontFamily_Serif
#define FontFamily_Serif 2
Serif font: Times, Garamond
FontFamily_Times
#define FontFamily_Times FontFamily_Serif
FontFamily_Script
#define FontFamily_Script 3
Handwriting font: Script, Comic
FontFamily_TypeWriter
#define FontFamily_TypeWriter 4
Fixed-pitch font: Courier
FontFamily_Courier
#define FontFamily_Courier FontFamily_TypeWriter
FontFamily_Teletype
#define FontFamily_Teletype FontFamily_TypeWriter
FontFamily_Monospace
#define FontFamily_Monospace FontFamily_TypeWriter
FontFamily_Decorative
#define FontFamily_Decorative 5
Decorative font: OldEnglish
FontFamily_OldEnglish
#define FontFamily_OldEnglish FontFamily_Decorative
FontFamily_Symbol
#define FontFamily_Symbol 6
Math/Greek font: Symbol
FontStretch_UltraCondensed
#define FontStretch_UltraCondensed 50
FontStretch_ExtraCondensed
#define FontStretch_ExtraCondensed 62
FontStretch_Condensed
#define FontStretch_Condensed 75
FontStretch_SemiCondensed
#define FontStretch_SemiCondensed 87
FontStretch_Unstretched
#define FontStretch_Unstretched 100
FontStretch_SemiExpanded
#define FontStretch_SemiExpanded 112
FontStretch_Expanded
#define FontStretch_Expanded 125
FontStretch_ExtraExpanded
#define FontStretch_ExtraExpanded 150
FontStretch_UltraExpanded
#define FontStretch_UltraExpanded 200
FontWeight_Thin
#define FontWeight_Thin 100
FontWeight_ExtraLight
#define FontWeight_ExtraLight 200
FontWeight_UltraLight
#define FontWeight_UltraLight FontWeight_ExtraLight
FontWeight_Light
#define FontWeight_Light 300
FontWeight_Normal
#define FontWeight_Normal 400
FontWeight_Regular
#define FontWeight_Regular FontWeight_Normal
FontWeight_Medium
#define FontWeight_Medium 500
FontWeight_SemiBold
#define FontWeight_SemiBold 600
FontWeight_DemiBold
#define FontWeight_DemiBold FontWeight_SemiBold
FontWeight_Bold
#define FontWeight_Bold 700
FontWeight_ExtraBold
#define FontWeight_ExtraBold 800
FontWeight_UltraBold
#define FontWeight_UltraBold FontWeight_ExtraBold
FontWeight_Heavy
#define FontWeight_Heavy 850
FontWeight_Black
#define FontWeight_Black 900
WritingSystem_Any
#define WritingSystem_Any 0
WritingSystem_Latin
#define WritingSystem_Latin 1
WritingSystem_Greek
#define WritingSystem_Greek 2
WritingSystem_Cyrillic
#define WritingSystem_Cyrillic 3
WritingSystem_Armenian
#define WritingSystem_Armenian 4
WritingSystem_Hebrew
#define WritingSystem_Hebrew 5
WritingSystem_Arabic
#define WritingSystem_Arabic 6
WritingSystem_Syriac
#define WritingSystem_Syriac 7
WritingSystem_Thaana
#define WritingSystem_Thaana 8
WritingSystem_Devanagari
#define WritingSystem_Devanagari 9
WritingSystem_Bengali
#define WritingSystem_Bengali 10
WritingSystem_Gurmukhi
#define WritingSystem_Gurmukhi 11
WritingSystem_Gujarati
#define WritingSystem_Gujarati 12
WritingSystem_Oriya
#define WritingSystem_Oriya 13
WritingSystem_Tamil
#define WritingSystem_Tamil 14
WritingSystem_Telugu
#define WritingSystem_Telugu 15
WritingSystem_Kannada
#define WritingSystem_Kannada 16
WritingSystem_Malayalam
#define WritingSystem_Malayalam 17
WritingSystem_Sinhala
#define WritingSystem_Sinhala 18
WritingSystem_Thai
#define WritingSystem_Thai 19
WritingSystem_Lao
#define WritingSystem_Lao 20
WritingSystem_Tibetan
#define WritingSystem_Tibetan 21
WritingSystem_Myanmar
#define WritingSystem_Myanmar 22
WritingSystem_Georgian
#define WritingSystem_Georgian 23
WritingSystem_Khmer
#define WritingSystem_Khmer 24
WritingSystem_SimplifiedChinese
#define WritingSystem_SimplifiedChinese 25
WritingSystem_TraditionalChinese
#define WritingSystem_TraditionalChinese 26
WritingSystem_Japanese
#define WritingSystem_Japanese 27
WritingSystem_Korean
#define WritingSystem_Korean 28
WritingSystem_Vietnamese
#define WritingSystem_Vietnamese 29
WritingSystem_Symbol
#define WritingSystem_Symbol 30
instantiating Font: internal error
Font.Finalize
Font.Font
Unknown font size unit specifier: '
face
Font.Get
Font.Set
Font.assign
Font.isCharDefined
Font.width
Font.boundingRect
Font.tightBoundingRect
Font.families
Font.isScalableFont
Font.isFixedPitchFont
Frame.Get
Frame.Set
Frame
borderWidth
int Frame.borderWidth
lineWidth
int Frame.lineWidth
int Frame.style
new Frame( [Control parent] )
FrameStyle_Flat
#define FrameStyle_Flat 0
No frame is drawn
FrameStyle_Box
#define FrameStyle_Box 1
Simple rectangular frame
FrameStyle_Raised
#define FrameStyle_Raised 2
Raised 3-D panel
FrameStyle_Sunken
#define FrameStyle_Sunken 3
Sunken (lowered) 3-D panel
FrameStyle_Styled
#define FrameStyle_Styled 4
The appearance depends on the current platform and GUI style
Frame.Finalize
Frame.Frame
frameStyle
Global.cpuId
Global.systemOffsetFromUTC
Global
corePlatform
String corePlatform
coreId
String coreId
coreLanguage
String coreLanguage
coreVersionMajor
int coreVersionMajor
coreVersionMinor
int coreVersionMinor
coreVersionRelease
int coreVersionRelease
coreVersionRevision
int coreVersionRevision
coreVersionBuild
int coreVersionBuild
coreVersionBeta
int coreVersionBeta
coreVersionLE
Boolean coreVersionLE
coreVersionCodename
int coreVersionCodename
coreFilePath
String coreFilePath
coreDirPath
String coreDirPath
coreBaseDirPath
String coreBaseDirPath
coreAppDirPath
String coreAppDirPath
coreBinDirPath
String coreBinDirPath
coreEtcDirPath
String coreEtcDirPath
coreRscDirPath
String coreRscDirPath
coreIncludeDirPath
String coreIncludeDirPath
coreSrcDirPath
String coreSrcDirPath
coreLibDirPath
String coreLibDirPath
coreLibraryDirPath
String coreLibraryDirPath
coreDocDirPath
String coreDocDirPath
coreColorDirPath
String coreColorDirPath
pclId
String pclId
pclVersionMajor
int pclVersionMajor
pclVersionMinor
int pclVersionMinor
pclVersionRelease
int pclVersionRelease
pclVersionBuild
int pclVersionBuild
pclVersionBeta
Boolean pclVersionBeta
jsVersion
int jsVersion
jsStrictMode
Boolean jsStrictMode
jsAbortable
Boolean jsAbortable
jsAutoGC
Boolean jsAutoGC
jsArguments
Array jsArguments
jsScriptResult
Object jsScriptResult
Console console
Infinity
Number Infinity
NaN
Number NaN
undefined
gc
void gc( [Boolean hardGC=true] )
gcBytes
Number gcBytes()
searchDirectory
Array searchDirectory( String dirPath[, Boolean recursive=false] )
matchesWildSpecification
Boolean matchesWildSpecification( String what, String wildPattern )
getEnvironmentVariable
String getEnvironmentVariable( String varName )
replaceEnvironmentVariables
String replaceEnvironmentVariables( String s )
String format( String fmt[, value1[, value2[, ..., valueN]]] )
cout
void cout( String text )
cerr
void cerr( String text )
cflush
void cflush()
processEvents
void processEvents( [Boolean excludeUserInputEvents=false[, int iterations=1]] )
sleep
void sleep( Number seconds )
msleep
void msleep( uint milliseconds )
decodeURI
String decodeURI( String encodedURI )
decodeURIComponent
String decodeURIComponent( String encodedURI ) 
encodeURI
String encodeURI( String URI )
encodeURIComponent
String encodeURIComponent( String uriComp )
eval
Object eval( String s[, object] )
isFinite
Boolean isFinite( Number n )
isNaN
Boolean isNaN( value )
Number
Number Number( value )
Object
Object Object( value )
parseFloat
Number parseFloat( String s )
parseInt
int parseInt( String s[, uint radix] )
loadResource
Boolean loadResource( String filePath[, String rootPath] )
unloadResource
Boolean unloadResource( String filePath[, String rootPath] )
cpuId
[eax,ebx,ecx,edx] cpuId( unsigned info[, unsigned ecx=0] )
systemOffsetFromUTC
Number systemOffsetFromUTC( [Date date | String dateString] )
Array
constructor
Function Array.constructor
index
int Array.index
input
String Array.input
uint Array.length
prototype
Object Array.prototype
new Array()
new Array( element_0[, element_1[, ..., element_N-1]] )
new Array( uint length )
[element_0, element_1, ..., element_N-1]
concat
Array Array.concat( [item1[, item2[, ..., itemN]]] )
every
Boolean Array.every( Function callback[, thisObject] )
filter
Array Array.filter( Function callback[, thisObject] )
forEach
void Array.forEach( Function callback[, thisObject] )
indexOf
uint Array.indexOf( searchItem[, int fromIndex] )
join
String Array.join( [String separator] )
lastIndexOf
uint Array.lastIndexOf( searchItem[, int fromIndex] )
map
Array Array.map( Function callback[, thisObject] )
pop
item Array.pop()
push
item Array.push( [item1[, item2[, ..., itemN]]] )
reduce
Object array.reduce( Function callback[, Object initialValue] )
reduceRight
Object array.reduceRight( Function callback[, Object initialValue] )
void Array.reverse()
shift
item Array.shift()
slice
Array Array.slice( uint start, int end )
some
Boolean Array.some( Function callback[, thisObject] )
void Array.sort( [Function compare] )
splice
Array Array.splice( uint start, uint deleteCount[, item1[, item2[, ..., itemN]]] )
toLocaleString
String Array.toLocaleString()
toSource
String Array.toSource()
String Array.toString()
unshift
uint Array.unshift( [item1[, item2[, ..., itemN]]] )
valueOf
Array Array.valueOf()
propertyIsEnumerable
Boolean Array.propertyIsEnumerable( String propertyName )
isArray
Boolean Array.isArray( Object obj )
Boolean
Function Boolean.constructor
Boolean Boolean.prototype
new Boolean( [value=false] )
String Boolean.toLocaleString()
String Boolean.toSource()
String Boolean.toString()
Boolean Boolean.valueOf()
Boolean Boolean.propertyIsEnumerable( String propertyName )
Date
Function Date.constructor
Date Date.prototype
new Date()
new Date( uint msSinceUNIXEpoch )
new Date( String dateString )
new Date( uint year, uint month, uint day[, uint hour, uint minute, uint second, uint millisecond] )
String Date.toSource()
String Date.toString()
toDateString
String Date.toDateString()
toTimeString
String Date.toTimeString()
toISOString
String Date.toISOString()
toUTCString
String Date.toUTCString()
toLocaleFormat
String Date.toLocaleFormat( String format )
String Date.toLocaleString()
toLocaleDateString
String Date.toLocaleDateString()
toLocaleTimeString
String Date.toLocaleTimeString()
toJSON
String Date.toJSON()
uint Date.valueOf()
getDate
uint Date.getDate()
getDay
uint Date.getDay()
getFullYear
uint Date.getFullYear()
getHours
uint Date.getHours()
getMilliseconds
uint Date.getMilliseconds()
getMinutes
uint Date.getMinutes()
getMonth
uint Date.getMonth()
getSeconds
uint Date.getSeconds()
getTime
uint Date.getTime()
getTimezoneOffset
int Date.getTimezoneOffset()
getUTCDate
uint Date.getUTCDate()
getUTCDay
uint Date.getUTCDay()
getUTCFullYear
uint Date.getUTCFullYear()
getUTCHours
uint Date.getUTCHours()
getUTCMilliseconds
uint Date.getUTCMilliseconds()
getUTCMinutes
uint Date.getUTCMinutes()
getUTCMonth
uint Date.getUTCMonth()
getUTCSeconds
uint Date.getUTCSeconds()
setDate
void Date.setDate( uint day )
setFullYear
void Date.setFullYear( uint year[, uint month[, uint day]] )
setHours
void Date.setHours( uint hour[, uint minute[, uint second[, uint millisecond]]] )
setMilliseconds
void Date.setMilliseconds( uint millisecond )
setMinutes
void Date.setMinutes( uint minute[, uint second[, uint millisecond]] )
setMonth
void Date.setMonth( uint month[, uint day] )
setSeconds
void Date.setSeconds( uint second[, uint millisecond] )
setTime
void Date.setTime( uint time )
setUTCDate
void Date.setUTCDate( uint day )
setUTCFullYear
void Date.setUTCFullYear( uint year[, uint month[, uint day]] )
setUTCHours
void Date.setUTCHours( uint hour[, uint minute[, uint second[, uint millisecond]]] )
setUTCMilliseconds
void Date.setUTCMilliseconds( uint millisecond )
setUTCMinutes
void Date.setUTCMinutes( uint minute[, uint second[, uint millisecond]] )
setUTCMonth
void Date.setUTCMonth( uint month[, uint day] )
setUTCSeconds
void Date.setUTCSeconds( uint second[, uint millisecond] )
Boolean Date.propertyIsEnumerable( String propertyName )
now
uint Date.now()
parse
uint Date.parse( String dateString )
UTC
uint Date.UTC( uint year, uint month, uint day[, uint hour, uint minute, uint second, uint millisecond] )
Function Error.constructor
String Error.message
String Error.name
Error Error.prototype
new Error( [String message[, String fileName[, uint lineNumber]]] )
Boolean Error.propertyIsEnumerable( String propertyName )
Function
Function Function.constructor
arguments
Array Function.arguments
arguments.callee
Function Function.arguments.callee
arguments.length
uint Function.arguments.length
caller
Function Function.caller
uint Function.length
String Function.name
Function Function.prototype
new Function( [String arg1[, String arg2[, ... String argN]],] String functionBody )
String Function.toSource()
String Function.toString()
String Function.toLocaleString()
String Function.valueOf()
apply
void Function.apply( thisObject[, Array arguments] )
call
void Function.call( thisObject[, arg1[, arg2[, ..., argN]]] )
bind
Function Function.bind( thisObject[, arg1[, arg2[, ..., argN]]] )
Boolean Function.propertyIsEnumerable( String propertyName )
JSON
Function JSON.constructor
Object JSON.parse( String text[, Function reviver] )
stringify
String JSON.stringify( Object value[, Function|Array replacer [, String space]] )
Function Number.constructor
Number Number.prototype
new Number( [value=0] )
String Number.toSource()
String Number.toString()
String Number.toLocaleString()
toExponential
String Number.toExponential( [uint fractionalDigits] )
toFixed
String Number.toFixed( [uint digits] )
toPrecision
String Number.toPrecision( [uint precision] )
Number Number.valueOf()
Number Number.NaN
POSITIVE_INFINITY
Number Number.POSITIVE_INFINITY
NEGATIVE_INFINITY
Number Number.NEGATIVE_INFINITY
MAX_VALUE
Number Number.MAX_VALUE
MIN_VALUE
Number Number.MIN_VALUE
Function Object.constructor
__proto__
Object Object.__proto__
__noSuchMethod__
Function Object.__noSuchMethod__
Object Object.prototype
new Object( [value] )
getPrototypeOf
Object Object.getPrototypeOf( Object obj )
Object Object.create( Object proto [, Object propertiesObject] )
defineProperty
void Object.defineProperty( Object obj, String prop, Object descriptor )
defineProperties
void Object.defineProperties( Object obj, Object props )
getOwnPropertyDescriptor
Object Object.getOwnPropertyDescriptor( Object obj, String prop )
keys
Array Object.keys( Object obj )
getOwnPropertyNames
Array Object.getOwnPropertyNames( Object obj )
preventExtensions
Object Object.preventExtensions( Object obj )
isExtensible
Boolean Object.isExtensible( Object obj )
seal
Object Object.seal( Object obj )
isSealed
Boolean Object.isSealed( Object obj )
freeze
Object Object.freeze( Object obj )
isFrozen
Boolean Object.isFrozen( Object obj )
String Object.toSource()
String Object.toString()
String Object.toLocaleString()
Object Object.valueOf()
isPrototypeOf
Boolean Object.isPrototypeOf( Object obj )
hasOwnProperty
Boolean Object.hasOwnProperty( String property )
Boolean Object.propertyIsEnumerable( String property )
watch
void Object.watch( String property, Function handler )
unwatch
void Object.unwatch( String property )
__defineGetter__
void Object.__defineGetter__( String property, Function getter )
__defineSetter__
void Object.__defineSetter__( String property, Function setter )
__lookupGetter__
Function Object.__lookupGetter__( String property )
__lookupSetter__
Function Object.__lookupSetter__( String property )
RegExp
Function RegExp.constructor
Boolean RegExp.global
ignoreCase
Boolean RegExp.ignoreCase
lastIndex
int RegExp.lastIndex
multiline
Boolean RegExp.multiline
source
String RegExp.source
sticky
Boolean RegExp.sticky
RegExp RegExp.prototype
new RegExp( String pattern[, String flags] )
/pattern/[flags]
String RegExp.toSource()
String RegExp.toString()
String RegExp.toLocaleString()
exec
Array RegExp.exec( [String str] )
test
Boolean RegExp.test( [String str] )
Boolean RegExp.propertyIsEnumerable( String propertyName )
ArrayBuffer
Function ArrayBuffer.constructor
uint32 ArrayBuffer.length
byteLength
uint32 ArrayBuffer.byteLength
Object ArrayBuffer.prototype
new ArrayBuffer( uint32 length )
ArrayBuffer ArrayBuffer.slice( uint32 begin[, uint32 end] )
ArrayBufferView
buffer
ArrayBuffer ArrayBufferView.buffer
uint32 ArrayBufferView.byteLength
byteOffset
uint32 ArrayBufferView.byteOffset
DataView
Function DataView.constructor
Object DataView.prototype
new DataView( ArrayBuffer buffer[, uint32 byteOffset[, uint32 byteLength]] )
getInt8
int8 DataView.getInt8( uint32 byteOffset )
getUint8
uint8 DataView.getUint8( uint32 byteOffset )
getInt16
int16 DataView.getInt16( uint32 byteOffset[, Boolean littleEndian=false] )
getUint16
uint16 DataView.getUint16( uint32 byteOffset[, Boolean littleEndian=false] )
getInt32
int32 DataView.getInt32( uint32 byteOffset[, Boolean littleEndian=false] )
getUint32
uint32 DataView.getUint32( uint32 byteOffset[, Boolean littleEndian=false] )
getFloat32
float DataView.getFloat32( uint32 byteOffset[, Boolean littleEndian=false] )
getFloat64
double DataView.getFloat64( uint32 byteOffset[, Boolean littleEndian=false] )
setInt8
void setInt8( uint32 byteOffset, int8 value )
setUint8
void setUint8( uint32 byteOffset, uint8 value )
setInt16
void setInt16( uint32 byteOffset, int16 value[, Boolean littleEndian=false] )
setUint16
void setUint16( uint32 byteOffset, uint16 value[, Boolean littleEndian=false] )
setInt32
void setInt32( uint32 byteOffset, int32 value[, Boolean littleEndian=false] )
setUint32
void setUint32( uint32 byteOffset, uint32 value[, Boolean littleEndian=false] )
setFloat32
void setFloat32( uint32 byteOffset, float value[, Boolean littleEndian=false] )
setFloat64
void setFloat64( uint32 byteOffset, double value[, Boolean littleEndian=false] )
Float32Array
Function Float32Array.constructor
uint32 Float32Array.length
Object Float32Array.prototype
new Float32Array( uint32 length )
new Float32Array( TypedArray array )
new Float32Array( Array array )
new Float32Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Float32Array.set( TypedArray array[, uint32 offset=0] )
void Float32Array.set( Array array[, uint32 offset=0] )
subarray
Float32Array Float32Array.subarray( int begin[, int end] )
BYTES_PER_ELEMENT
int Float32Array.BYTES_PER_ELEMENT
Float64Array
Function Float64Array.constructor
uint32 Float64Array.length
Object Float64Array.prototype
new Float64Array( uint32 length )
new Float64Array( TypedArray array )
new Float64Array( Array array )
new Float64Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Float64Array.set( TypedArray array[, uint32 offset=0] )
void Float64Array.set( Array array[, uint32 offset=0] )
Float64Array Float64Array.subarray( int begin[, int end] )
int Float64Array.BYTES_PER_ELEMENT
Int16Array
Function Int16Array.constructor
uint32 Int16Array.length
Object Int16Array.prototype
new Int16Array( uint32 length )
new Int16Array( TypedArray array )
new Int16Array( Array array )
new Int16Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Int16Array.set( TypedArray array[, uint32 offset=0] )
void Int16Array.set( Array array[, uint32 offset=0] )
Int16Array Int16Array.subarray( int begin[, int end] )
int Int16Array.BYTES_PER_ELEMENT
Int32Array
Function Int32Array.constructor
uint32 Int32Array.length
Object Int32Array.prototype
new Int32Array( uint32 length )
new Int32Array( TypedArray array )
new Int32Array( Array array )
new Int32Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Int32Array.set( TypedArray array[, uint32 offset=0] )
void Int32Array.set( Array array[, uint32 offset=0] )
Int32Array Int32Array.subarray( int begin[, int end] )
int Int32Array.BYTES_PER_ELEMENT
Int8Array
Function Int8Array.constructor
uint32 Int8Array.length
Object Int8Array.prototype
new Int8Array( uint32 length )
new Int8Array( TypedArray array )
new Int8Array( Array array )
new Int8Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Int8Array.set( TypedArray array[, uint32 offset=0] )
void Int8Array.set( Array array[, uint32 offset=0] )
Int8Array Int8Array.subarray( int begin[, int end] )
int Int8Array.BYTES_PER_ELEMENT
Uint16Array
Function Uint16Array.constructor
uint32 Uint16Array.length
Object Uint16Array.prototype
new Uint16Array( uint32 length )
new Uint16Array( TypedArray array )
new Uint16Array( Array array )
new Uint16Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Uint16Array.set( TypedArray array[, uint32 offset=0] )
void Uint16Array.set( Array array[, uint32 offset=0] )
Uint16Array Uint16Array.subarray( int begin[, int end] )
int Uint16Array.BYTES_PER_ELEMENT
Uint32Array
Function Uint32Array.constructor
uint32 Uint32Array.length
Object Uint32Array.prototype
new Uint32Array( uint32 length )
new Uint32Array( TypedArray array )
new Uint32Array( Array array )
new Uint32Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Uint32Array.set( TypedArray array[, uint32 offset=0] )
void Uint32Array.set( Array array[, uint32 offset=0] )
Uint32Array Uint32Array.subarray( int begin[, int end] )
int Uint32Array.BYTES_PER_ELEMENT
Uint8Array
Function Uint8Array.constructor
uint32 Uint8Array.length
Object Uint8Array.prototype
new Uint8Array( uint32 length )
new Uint8Array( TypedArray array )
new Uint8Array( Array array )
new Uint8Array( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Uint8Array.set( TypedArray array[, uint32 offset=0] )
void Uint8Array.set( Array array[, uint32 offset=0] )
Uint8Array Uint8Array.subarray( int begin[, int end] )
int Uint8Array.BYTES_PER_ELEMENT
Uint8ClampedArray
Function Uint8ClampedArray.constructor
uint32 Uint8ClampedArray.length
Object Uint8ClampedArray.prototype
new Uint8ClampedArray( uint32 length )
new Uint8ClampedArray( TypedArray array )
new Uint8ClampedArray( Array array )
new Uint8ClampedArray( ArrayBuffer buffer[, uint32 byteOffset[, uint32 length]] )
void Uint8ClampedArray.set( TypedArray array[, uint32 offset=0] )
void Uint8ClampedArray.set( Array array[, uint32 offset=0] )
Uint8ClampedArray Uint8ClampedArray.subarray( int begin[, int end] )
int Uint8ClampedArray.BYTES_PER_ELEMENT
Failed to create the Global JavaScript object.
JavaScript runtime initialization error.
Global.Get
Global.Set
invalid JavaScript version: %d
invalid script result data type
Global.gc
Global.searchDirectory
Global.matchesWildSpecification
Global.getEnvironmentVariable
Global.replaceEnvironmentVariables
Global.format
Global.cout
Global.cerr
Global.cflush
Global.processEvents
Global.sleep
Global.msleep
Global.loadResource
Global.unloadResource
pen
Pen Graphics.pen
brush
Brush Graphics.brush
brushOrigin
Point Graphics.brushOrigin
Font Graphics.font
backgroundBrush
Brush Graphics.backgroundBrush
transparentBackground
Boolean Graphics.transparentBackground
compositionOperator
int Graphics.compositionOperator
opacity
Number Graphics.opacity
antialiasing
Boolean Graphics.antialiasing
textAntialiasing
Boolean Graphics.textAntialiasing
smoothInterpolation
Boolean Graphics.smoothInterpolation
clipping
Boolean Graphics.clipping
clipRect
Rect Graphics.clipRect
transformationEnabled
Boolean Graphics.transformationEnabled
transformationMatrix
Matrix Graphics.transformationMatrix
isPainting
Boolean Graphics.isPainting
new Graphics()
new Graphics( Bitmap bmp )
new Graphics( SVG svg )
new Graphics( PDF pdf )
new Graphics( Control ctr )
multiplyTransformation
void Graphics.multiplyTransformation( Matrix T )
rotateTransformation
void Graphics.rotateTransformation( Number angleRadians )
scaleTransformation
void Graphics.scaleTransformation( Number sx[, Number sy] )
translateTransformation
void Graphics.translateTransformation( Point d )
void Graphics.translateTransformation( Number dx, Number dy )
shearTransformation
void Graphics.shearTransformation( Number sx[, Number sy] )
resetTransformation
void Graphics.resetTransformation()
transformed
Point Graphics.transformed( Point p )
Point Graphics.transformed( Number x, Number y )
void Graphics.begin( Bitmap bmp )
void Graphics.begin( SVG svg )
void Graphics.begin( PDF pdf )
void Graphics.begin( Control ctr )
void Graphics.end()
pushState
void Graphics.pushState()
popState
void Graphics.popState()
drawPoint
void Graphics.drawPoint( Point p )
void Graphics.drawPoint( int x, int y )
drawLine
void Graphics.drawLine( Point p0, Point p1 )
void Graphics.drawLine( int x0, int y0, int x1, int y1 )
drawRect
void Graphics.drawRect( Rect r )
void Graphics.drawRect( int x0, int y0, int x1, int y1 )
strokeRect
void Graphics.strokeRect( Rect r[, Pen pen] )
void Graphics.strokeRect( int x0, int y0, int x1, int y1[, Pen pen] )
fillRect
void Graphics.fillRect( Rect r[, Brush brush] )
void Graphics.fillRect( int x0, int y0, int x1, int y1[, Brush brush] )
eraseRect
void Graphics.eraseRect( Rect r )
void Graphics.eraseRect( int x0, int y0, int x1, int y1 )
drawRoundedRect
void Graphics.drawRoundedRect( Rect r[, Number rx=25[, Number ry=25]] )
void Graphics.drawRoundedRect( int x0, int y0, int x1, int y1[, Number rx=25[, Number ry=25]] )
strokeRoundedRect
void Graphics.strokeRoundedRect( Rect r[, Number rx=25[, Number ry=25[, Pen pen]]] )
void Graphics.strokeRoundedRect( int x0, int y0, int x1, int y1[, Number rx=25[, Number ry=25[, Pen pen]]] )
fillRoundedRect
void Graphics.fillRoundedRect( Rect r[, Number rx=25[, Number ry=25[, Brush brush]]] )
void Graphics.fillRoundedRect( int x0, int y0, int x1, int y1[, Number rx=25[, Number ry=25[, Brush brush]]] )
eraseRoundedRect
void Graphics.eraseRoundedRect( Rect r[, Number rx=25[, Number ry=25]] )
void Graphics.eraseRoundedRect( int x0, int y0, int x1, int y1[, Number rx=25[, Number ry=25]] )
drawEllipse
void Graphics.drawEllipse( Rect r )
void Graphics.drawEllipse( int x0, int y0, int x1, int y1 )
strokeEllipse
void Graphics.strokeEllipse( Rect r[, Pen pen] )
void Graphics.strokeEllipse( int x0, int y0, int x1, int y1[, Pen pen] )
fillEllipse
void Graphics.fillEllipse( Rect r[, Brush brush] )
void Graphics.fillEllipse( int x0, int y0, int x1, int y1[, Brush brush] )
eraseEllipse
void Graphics.eraseEllipse( Rect r )
void Graphics.eraseEllipse( int x0, int y0, int x1, int y1 )
drawCircle
void Graphics.drawCircle( Point center, int radius )
void Graphics.drawCircle( int xc, int yc, int radius )
strokeCircle
void Graphics.strokeCircle( Point center, int radius[, Pen pen] )
void Graphics.strokeCircle( int xc, int yc, int radius[, Pen pen] )
fillCircle
void Graphics.fillCircle( Point center, int radius[, Brush brush] )
void Graphics.fillCircle( int xc, int yc, int radius[, Brush brush] )
eraseCircle
void Graphics.eraseCircle( Point center, int radius )
void Graphics.eraseCircle( int xc, int yc, int radius )
drawPolygon
void Graphics.drawPolygon( Array points[, int fillRule] )
strokePolygon
void Graphics.strokePolygon( Array points[, int fillRule[, Pen pen]] )
fillPolygon
void Graphics.fillPolygon( Array points[, int fillRule[, Brush brush]] )
erasePolygon
void Graphics.erasePolygon( Array points[, int fillRule] )
drawPolyline
void Graphics.drawPolyline( Array points )
drawEllipticArc
void Graphics.drawEllipticArc( Rect r, Number startRadians, Number spanRadians )
void Graphics.drawEllipticArc( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians )
drawArc
void Graphics.drawArc( Point center, int radius, Number startRadians, Number spanRadians )
void Graphics.drawArc( int cx, int cy, int radius, Number startRadians, Number spanRadians )
drawEllipticChord
void Graphics.drawEllipticChord( Rect r, Number startRadians, Number spanRadians )
void Graphics.drawEllipticChord( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians )
strokeEllipticChord
void Graphics.strokeEllipticChord( Rect r, Number startRadians, Number spanRadians[, Pen pen] )
void Graphics.strokeEllipticChord( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians[, Pen pen] )
fillEllipticChord
void Graphics.fillEllipticChord( Rect r, Number startRadians, Number spanRadians[, Brush brush] )
void Graphics.fillEllipticChord( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians[, Brush brush] )
eraseEllipticChord
void Graphics.eraseEllipticChord( Rect r, Number startRadians, Number spanRadians )
void Graphics.eraseEllipticChord( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians )
drawChord
void Graphics.drawChord( Point center, int radius, Number startRadians, Number spanRadians )
void Graphics.drawChord( int cx, int cy, int radius, Number startRadians, Number spanRadians )
strokeChord
void Graphics.strokeChord( Point center, int radius, Number startRadians, Number spanRadians[, Pen pen] )
void Graphics.strokeChord( int cx, int cy, int radius, Number startRadians, Number spanRadians[, Pen pen] )
fillChord
void Graphics.fillChord( Point center, int radius, Number startRadians, Number spanRadians[, Brush brush] )
void Graphics.fillChord( int cx, int cy, int radius, Number startRadians, Number spanRadians[, Brush brush] )
eraseChord
void Graphics.eraseChord( Point center, int radius, Number startRadians, Number spanRadians )
void Graphics.eraseChord( int cx, int cy, int radius, Number startRadians, Number spanRadians )
drawEllipticPie
void Graphics.drawEllipticPie( Rect r, Number startRadians, Number spanRadians )
void Graphics.drawEllipticPie( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians )
strokeEllipticPie
void Graphics.strokeEllipticPie( Rect r, Number startRadians, Number spanRadians[, Pen pen] )
void Graphics.strokeEllipticPie( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians[, Pen pen] )
fillEllipticPie
void Graphics.fillEllipticPie( Rect r, Number startRadians, Number spanRadians[, Brush brush] )
void Graphics.fillEllipticPie( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians[, Brush brush] )
eraseEllipticPie
void Graphics.eraseEllipticPie( Rect r, Number startRadians, Number spanRadians )
void Graphics.eraseEllipticPie( int x0, int y0, int x1, int y1, Number startRadians, Number spanRadians )
drawPie
void Graphics.drawPie( Point center, int radius, Number startRadians, Number spanRadians )
void Graphics.drawPie( int cx, int cy, int radius, Number startRadians, Number spanRadians )
strokePie
void Graphics.strokePie( Point center, int radius, Number startRadians, Number spanRadians[, Pen pen] )
void Graphics.strokePie( int cx, int cy, int radius, Number startRadians, Number spanRadians[, Pen pen] )
fillPie
void Graphics.fillPie( Point center, int radius, Number startRadians, Number spanRadians[, Brush brush] )
void Graphics.fillPie( int cx, int cy, int radius, Number startRadians, Number spanRadians[, Brush brush] )
erasePie
void Graphics.erasePie( Point center, int radius, Number startRadians, Number spanRadians )
void Graphics.erasePie( int cx, int cy, int radius, Number startRadians, Number spanRadians )
drawBitmap
void Graphics.drawBitmap( Point p, Bitmap bmp )
void Graphics.drawBitmap( int x, int y, Bitmap bmp )
drawBitmapRect
void Graphics.drawBitmapRect( Point p, Bitmap bmp, Rect r )
void Graphics.drawBitmapRect( int x, int y, Bitmap bmp, int x0, int y0, int x1, int y1 )
drawScaledBitmap
void Graphics.drawScaledBitmap( Rect r, Bitmap bmp )
void Graphics.drawScaledBitmap( int x0, int y0, int x1, int y1, Bitmap bmp )
drawScaledBitmapRect
void Graphics.drawScaledBitmapRect( Rect rdst, Bitmap bmp, Rect rsrc )
void Graphics.drawScaledBitmapRect( int dx0, int dy0, int dx1, int dy1, Bitmap bmp, int sx0, int sy0, int sx1, int sy1 )
drawTiledBitmap
void Graphics.drawTiledBitmap( Rect r, Bitmap bmp[, Point origin=0] )
void Graphics.drawTiledBitmap( int x0, int y0, int x1, int y1, Bitmap bmp[, int ox=0, int oy=0] )
drawText
void Graphics.drawText( Point p, String text )
void Graphics.drawText( int x, int y, String text )
drawTextRect
void Graphics.drawTextRect( Rect r, String text[, int align] )
void Graphics.drawTextRect( int x0, int y0, int x1, int y1, String text[, int align] )
textRect
Rect Graphics.textRect( Rect r, String text[, int align] )
Rect Graphics.textRect( int x0, int y0, int x1, int y1, String text[, int align] )
CompositionOp_Clear
#define CompositionOp_Clear 0
CompositionOp_Source
#define CompositionOp_Source 1
CompositionOp_Destination
#define CompositionOp_Destination 2
CompositionOp_SourceOver
#define CompositionOp_SourceOver 3
A over B
CompositionOp_DestinationOver
#define CompositionOp_DestinationOver 4
B over A
CompositionOp_SourceIn
#define CompositionOp_SourceIn 5
A in B
CompositionOp_DestinationIn
#define CompositionOp_DestinationIn 6
B in A
CompositionOp_SourceOut
#define CompositionOp_SourceOut 7
A out B
CompositionOp_DestinationOut
#define CompositionOp_DestinationOut 8
B out A
CompositionOp_SourceAtop
#define CompositionOp_SourceAtop 9
A atop B
CompositionOp_DestinationAtop
#define CompositionOp_DestinationAtop 10
B atop A
CompositionOp_Xor
#define CompositionOp_Xor 11
A xor B
CompositionOp_Min
#define CompositionOp_Min 12
CompositionOp_Max
#define CompositionOp_Max 13
CompositionOp_Add
#define CompositionOp_Add 14
CompositionOp_Multiply
#define CompositionOp_Multiply 15
CompositionOp_Screen
#define CompositionOp_Screen 16
CompositionOp_Overlay
#define CompositionOp_Overlay 17
CompositionOp_ColorDodge
#define CompositionOp_ColorDodge 18
CompositionOp_ColorBurn
#define CompositionOp_ColorBurn 19
CompositionOp_HardLight
#define CompositionOp_HardLight 20
CompositionOp_SoftLight
#define CompositionOp_SoftLight 21
CompositionOp_Difference
#define CompositionOp_Difference 22
CompositionOp_Exclusion
#define CompositionOp_Exclusion 23
FillRule_OddEven
#define FillRule_OddEven 0
Odd-even (or parity, alternate) polygon fill rule
FillRule_Winding
#define FillRule_Winding 1
Nonzero winding polygon fill rule
Graphics.Finalize
Graphics.Graphics
Graphics.Get
Graphics.Set
unknown composition operator
invalid matrix size
Graphics.multiplyTransformation
Graphics.rotateTransformation
Graphics.scaleTransformation
Graphics.translateTransformation
Graphics.shearTransformation
Graphics.resetTransformation
Graphics.transformed
Graphics.begin
the graphics context is already active
unable to initialize graphics context operation
Graphics.end
the graphics context is not active
Graphics.pushState
Graphics.popState
Graphics.drawPoint
Graphics.drawLine
Graphics.drawRect
Graphics.strokeRect
Graphics.fillRect
Graphics.eraseRect
Graphics.drawRoundedRect
Graphics.strokeRoundedRect
Graphics.fillRoundedRect
Graphics.eraseRoundedRect
Graphics.drawEllipse
Graphics.strokeEllipse
Graphics.fillEllipse
Graphics.eraseEllipse
Graphics.drawCircle
Graphics.strokeCircle
Graphics.fillCircle
Graphics.eraseCircle
Graphics.drawPolygon
unknown polygon fill rule
invalid array element
Graphics.strokePolygon
Graphics.fillPolygon
Graphics.erasePolygon
Graphics.drawPolyline
Graphics.drawEllipticArc
Graphics.drawArc
Graphics.drawEllipticChord
Graphics.strokeEllipticChord
Graphics.fillEllipticChord
Graphics.eraseEllipticChord
Graphics.drawChord
Graphics.strokeChord
Graphics.fillChord
Graphics.eraseChord
Graphics.drawEllipticPie
Graphics.strokeEllipticPie
Graphics.fillEllipticPie
Graphics.eraseEllipticPie
Graphics.drawPie
Graphics.strokePie
Graphics.fillPie
Graphics.erasePie
Graphics.drawBitmap
Graphics.drawBitmapRect
Graphics.drawScaledBitmap
Graphics.drawScaledBitmapRect
Graphics.drawTiledBitmap
Graphics.drawText
Graphics.drawTextRect
Graphics.textRect
GridInterpolation
Boolean GridInterpolation.isValid
referenceRect
Rect GridInterpolation.referenceRect
delta
int GridInterpolation.delta
new GridInterpolation()
new GridInterpolation( Rect r, SurfaceSpline S[, int delta = 8[, Boolean verbose = false]] )
new GridInterpolation( Rect r, ShepardInterpolation S[, int delta = 8[, Boolean verbose = false]] )
new GridInterpolation( GridInterpolation G )
void GridInterpolation.assign( GridInterpolation G )
void GridInterpolation.initialize( Rect r, SurfaceSpline S[, int delta = 8[, Boolean verbose = false]] )
void GridInterpolation.initialize( Rect r, ShepardInterpolation S[, int delta = 8[, Boolean verbose = false]] )
void GridInterpolation.clear()
evaluate
Number GridInterpolation.evaluate( Number x, Number y )
Number GridInterpolation.evaluate( Point p )
Array GridInterpolation.evaluate( Array points )
instantiating GridInterpolation: internal error
GridInterpolation.Finalize
Null data pointer in BidimensionalInterpolation::Initialize()
Invalid dimensions in BidimensionalInterpolation::Initialize()
GridInterpolation.GridInterpolation
GridInterpolation::Initialize(): Empty interpolation space.
GridInterpolation::Initialize(): Zero grid distance.
GridInterpolation.Get
GridInterpolation.initialize
GridInterpolation.clear
GridInterpolation.assign
GridInterpolation.evaluate
Array too large.
Expected a Point or Array object.
GroupBox.Get
GroupBox.Set
GroupBox
String GroupBox.title
titleCheckBox
Boolean GroupBox.titleCheckBox
Boolean GroupBox.checked
void GroupBox.onCheck( Boolean checked )
new GroupBox( [Control parent] )
GroupBox.Finalize
GroupBox.GroupBox
bugfix_JS_GroupBox
int Histogram.resolution
lastLevel
int Histogram.lastLevel
Boolean Histogram.isEmpty
totalCount
uint Histogram.totalCount
peakLevel
int Histogram.peakLevel
normalizedPeakLevel
Number Histogram.normalizedPeakLevel
peakCount
uint Histogram.peakCount
entropy
Number Histogram.entropy
new Histogram()
new Histogram( int resolution )
new Histogram( Histogram h )
new Histogram( Image img )
generate
void Histogram.generate( Image img )
void Histogram.assign( Histogram h )
histogramLevel
int Histogram.histogramLevel( Number normalizedLevel )
normalizedLevel
Number Histogram.normalizedLevel( int histogramLevel )
uint Histogram.count( int level )
clipLow
int Histogram.clipLow( uint count )
normalizedClipLow
Number Histogram.normalizedClipLow( uint count )
clipHigh
int Histogram.clipHigh( uint count )
normalizedClipHigh
Number Histogram.normalizedClipHigh( uint count )
resample
void Histogram.resample( Histogram h )
Array Histogram.toArray()
instantiating Histogram: internal error
Histogram.Finalize
Histogram.Histogram
Histogram.Get
Histogram.Set
Histogram.generate
Histogram.assign
Histogram.histogramLevel
Histogram.normalizedLevel
Histogram.count
Histogram.clipLow
Histogram.normalizedClipLow
Histogram.clipHigh
Histogram.normalizedClipHigh
Histogram.resample
Histogram.toArray
sample iterator not initialized
pixel iterator not initialized
Boolean Image.isEmpty
int Image.width
int Image.height
Rect Image.bounds
numberOfChannels
int Image.numberOfChannels
numberOfNominalChannels
int Image.numberOfNominalChannels
numberOfNominalSamples
int Image.numberOfNominalSamples
hasAlphaChannels
Boolean Image.hasAlphaChannels
numberOfAlphaChannels
int Image.numberOfAlphaChannels
numberOfAlphaSamples
int Image.numberOfAlphaSamples
numberOfSelectedChannels
int Image.numberOfSelectedChannels
numberOfSelectedPixels
int Image.numberOfSelectedPixels
numberOfSelectedSamples
int Image.numberOfSelectedSamples
numberOfPixels
int Image.numberOfPixels
numberOfSamples
int Image.numberOfSamples
colorSpace
int Image.colorSpace
isColor
Boolean Image.isColor
isGrayscale
Boolean Image.isGrayscale
sampleType
int Image.sampleType
isInteger
Boolean Image.isInteger
isReal
Boolean Image.isReal
isComplex
Boolean Image.isComplex
int Image.bitsPerSample
selectedChannel
int Image.selectedChannel
firstSelectedChannel
int Image.firstSelectedChannel
lastSelectedChannel
int Image.lastSelectedChannel
selectedPoint
Point Image.selectedPoint
selectedRect
Rect Image.selectedRect
rangeClippingEnabled
Boolean Image.rangeClippingEnabled
lowRangeClippingEnabled
Boolean Image.lowRangeClippingEnabled
highRangeClippingEnabled
Boolean Image.highRangeClippingEnabled
rangeClipLow
Number Image.rangeClipLow
rangeClipHigh
Number Image.rangeClipHigh
interpolation
int Image.interpolation
interpolationClamping
Number Image.interpolationClamping
interpolationSmoothness
Number Image.interpolationSmoothness
interpolationXRadius
int Image.interpolationXRadius
interpolationYRadius
int Image.interpolationYRadius
selectionPoint
Number Image.selectionPoint
statusEnabled
Boolean Image.statusEnabled
statusInitializationEnabled
Boolean Image.statusInitializationEnabled
statusTotal
uint Image.statusTotal
statusCount
uint Image.statusCount
statusInfo
String Image.statusInfo
isStatusInitialized
Boolean Image.isStatusInitialized
isStatusCompleted
Boolean Image.isStatusCompleted
new Image()
new Image( Image src )
new Image( int width, int height[, int numberOfChannels=1[, int colorSpace=Gray[, int bitsPerSample=32[, int sampleType=Float]]]] )
new Image( TypedArray array, int width, int height[, int numberOfChannels=1[, int colorSpace=Gray]] )
readRawFile
void Image.readRawFile( String path )
writeRawFile
void Image.writeRawFile( String path )
createAlphaChannels
void Image.createAlphaChannels( int n )
deleteAlphaChannels
void Image.deleteAlphaChannels()
deleteAlphaChannel
void Image.deleteAlphaChannel( int c )
canPopSelections
Boolean Image.canPopSelections()
pushSelections
void Image.pushSelections()
popSelections
void Image.popSelections()
resetChannelSelection
void Image.resetChannelSelection()
resetRectSelection
void Image.resetRectSelection()
resetSelections
void Image.resetSelections()
allocate
void Image.allocate( int width, int height[, int numberOfChannels=1[, int colorSpace=Gray]] )
free
void Image.free()
void Image.assign( Image[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
void Image.swap( Image img )
transfer
void Image.transfer( Image img )
void Image.fill( [Number|Complex v[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
void Image.invert( [Number v=1[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
truncate
void Image.truncate( [Number v0=0, Number v1=1[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
rescale
void Image.rescale( [Number v0=0, Number v1=1[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
normalize
void Image.normalize( [Number v0=0, Number v1=1[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
binarize
void Image.binarize( [Number v=0.5[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
setAbs
void Image.setAbs( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
void Image.apply( Number scalar[, int op[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
void Image.apply( Complex scalar[, int op[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
void Image.apply( Image image[, int op[, Point pos=int_max[, int channel=-1[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]]]] )
Number Image.count( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
minimum
Number|Complex Image.minimum( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
maximum
Number|Complex Image.maximum( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
minimumPosition
Point Image.minimumPosition( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
maximumPosition
Point Image.maximumPosition( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
mean
Number Image.mean( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
median
Number Image.median( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
variance
Number Image.variance( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
stdDev
Number Image.stdDev( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
avgDev
Number Image.avgDev( [Number center=median()[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
twoSidedAvgDev
Array Image.twoSidedAvgDev( [Number center=median()[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
Number Image.MAD( [Number center=median()[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
twoSidedMAD
Array Image.twoSidedMAD( [Number center=median()[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
biweightMidvariance
Number Image.biweightMidvariance( [Number center=median()[, Number sigma=MAD()[, int k=9[, Boolean reducedLength=false[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]]]]] )
Number Image.BWMV( [Number center=median()[, Number sigma=MAD()[, int k=9[, Boolean reducedLength=false[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]]]]] )
twoSidedBiweightMidvariance
Array Image.twoSidedBiweightMidvariance( [Number center=median()[, Array sigma=twoSidedMAD()[, int k=9[, Boolean reducedLength=false[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]]]]] )
twoSidedBWMV
Array Image.twoSidedBWMV( [Number center=median()[, Array sigma=twoSidedMAD()[, int k=9[, Boolean reducedLength=false[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]]]]] )
bendMidvariance
Number Image.bendMidvariance( [Number center=median()[, Number beta=0.2[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]]] )
Number Image.PBMV( [Number center=median()[, Number beta=0.2[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]]] )
Number Image.Sn( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
Number Image.Qn( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
Number Image.norm( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
modulus
Number Image.modulus( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
sumOfSquares
Number Image.sumOfSquares( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
meanOfSquares
Number Image.meanOfSquares( [Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]] )
cropBy
void Image.cropBy( int left, int top, int right, int bottom[, Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.cropBy( int left, int top, int right, int bottom, Array fillValues )
cropTo
void Image.cropTo( int x0, int y0, int x1, int y1[, Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.cropTo( int x0, int y0, int x1, int y1, Array fillValues )
void Image.cropTo( Rect r[, Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.cropTo( Rect r, Array fillValues )
crop
void Image.crop( [Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.crop( Array fillValues )
shiftBy
void Image.shiftBy( int dx, int dy[, Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.shiftBy( int dx, int dy, Array fillValues )
shiftTo
void Image.shiftTo( int dx, int dy[, Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.shiftTo( int dx, int dy, Array fillValues )
void Image.shiftTo( Point p[, Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.shiftTo( Point p, Array fillValues )
void Image.shift( [Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.shift( Array fillValues )
interpolate
Number Image.interpolate( Number x, Number y[, int channel=0] )
Number Image.interpolate( Point p[, int channel=0] )
void Image.resample( Number scale )
void Image.resample( Number sx, Number sy[, int mode[, int absMode]] )
rotate
void Image.rotate( Number angleRadians[, Number cx=0, Number cy=0[, Number fill0[, Number fill1[, ..., Number fillN]]]] )
void Image.rotate( Number angleRadians[, Number cx=0, Number cy=0[, Array fillValues]] )
void Image.rotate( Number angleRadians[, Point center=0[, Number fill0[, Number fill1[, ..., Number fillN]]]] )
void Image.rotate( Number angleRadians[, Point center=0[, Array fillValues]] )
translate
void Image.translate( Number dx, Number dy[, Number fill0[, Number fill1[, ..., Number fillN]]] )
void Image.translate( Number dx, Number dy, Array fillValues )
rotate180
void Image.rotate180()
rotate90ccw
void Image.rotate90ccw()
rotate90cw
void Image.rotate90cw()
mirrorHorizontal
void Image.mirrorHorizontal()
mirrorVertical
void Image.mirrorVertical()
polarTransform
void Image.polarTransform( [Number startAngleRadians=0[, Number endAngleRadians=2pi]] )
logPolarTransform
void Image.logPolarTransform( [Number startAngleRadians=0[, Number endAngleRadians=2pi]] )
getLightness
void Image.getLightness( Image L[, Rect rect=0] )
getLuminance
void Image.getLuminance( Image Y[, Rect rect=0] )
getIntensity
void Image.getIntensity( Image I[, Rect rect=0] )
setLightness
void Image.setLightness( Image L[, Point p=int_max[, Rect rect=0]] )
setLuminance
void Image.setLuminance( Image Y[, Point p=int_max[, Rect rect=0]] )
sample
Number|Complex Image.sample( Point p[, int channel=0] )
Number|Complex Image.sample( int x, int y[, int channel=0] )
setSample
void Image.setSample( Number|Complex scalar, Point p[, int channel=0] )
void Image.setSample( Number|Complex scalar, int x, int y[, int channel=0] )
getSamples
void Image.getSamples( TypedArray|Array|Vector samples[, Rect rect=0[, int channel=-1]] )
setSamples
void Image.setSamples( TypedArray|Array|Vector samples[, Rect rect=0[, int channel=-1]] )
initSampleIterator
void Image.initSampleIterator( [Rect r=0[, int channel=-1]] )
nextSample
Boolean Image.nextSample()
previousSample
Boolean Image.previousSample()
skipSamples
Boolean Image.skipSamples( int dx, int dy )
sampleValue
Number|Complex Image.sampleValue()
setSampleValue
void Image.setSampleValue( Number|Complex )
initPixelIterator
void Image.initPixelIterator( [Rect r=0[, int firstChannel=-1[, int lastChannel=-1]]] )
nextPixel
Boolean Image.nextPixel()
previousPixel
Boolean Image.previousPixel()
skipPixels
Boolean Image.skipPixels( int dx, int dy )
pixelValue
Vector Image.pixelValue()
getPixelValue
void Image.getPixelValue( Vector )
setPixelValue
void Image.setPixelValue( Vector )
forEachSample
void Image.forEachSample( Function f[, Object thisObj[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
forEachMutableSample
void Image.forEachMutableSample( Function f[, Object thisObj[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
forEachPixel
void Image.forEachPixel( Function f[, Object thisObj[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
forEachMutablePixel
void Image.forEachMutablePixel( Function f[, Object thisObj[, Rect rect=0[, int firstChannel=-1[, int lastChannel=-1]]]] )
convolve
void Image.convolve( Array kernel[, int highPassMode=0[, Number thr0=0[, Number thr1=0[, int interlacing=1]]]] )
void Image.convolve( Matrix kernel[, int highPassMode=0[, Number thr0=0[, Number thr1=0[, int interlacing=1]]]] )
convolveSeparable
void Image.convolveSeparable( Array rowVector, Array colVector[, int highPassMode=0[, int interlacing=1]] )
void Image.convolveSeparable( Vector rowVector, Vector colVector[, int highPassMode=0[, int interlacing=1]] )
convolveFFT
void Image.convolveFFT( Array kernel )
void Image.convolveFFT( Matrix kernel )
void Image.convolveFFT( Image respFunc )
FFT
void Image.FFT( [Boolean centered=false] )
fastFourierTransform
void Image.fastFourierTransform( [Boolean centered=false] )
inverseFFT
void Image.inverseFFT( [Boolean centered=false] )
inverseFastFourierTransform
void Image.inverseFastFourierTransform( [Boolean centered=false] )
aTrousWaveletTransform
Array Image.aTrousWaveletTransform( Array kernel, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
Array Image.aTrousWaveletTransform( Matrix kernel, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
Array Image.aTrousWaveletTransform( Array rowVector, Array colVector, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
Array Image.aTrousWaveletTransform( Vector rowVector, Vector colVector, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
starletTransform
Array Image.starletTransform( Array kernel, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
Array Image.starletTransform( Matrix kernel, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
Array Image.starletTransform( Array rowVector, Array colVector, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
Array Image.starletTransform( Vector rowVector, Vector colVector, int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
inverseStarletTransform
void Image.inverseStarletTransform( Array layers )
inverseATrousWaveletTransform
void Image.inverseATrousWaveletTransform( Array layers )
noiseKSigma
[noise,count] Image.noiseKSigma( [int j=0[, Number k=3[, Number eps=0.01[, int n=10]]]] )
noiseMRS
[noise,count] Image.noiseMRS( [int numberOfLayers=4, [Number sigma=0[, Number k=3]]] )
multiscaleLinearTransform
Array Image.multiscaleLinearTransform( int numberOfLayers[, int scalingSequence=0[, Array layerState]] )
inverseMultiscaleLinearTransform
void Image.inverseMultiscaleLinearTransform( Array layers )
multiscaleMedianTransform
Array Image.multiscaleMedianTransform( int numberOfLayers[, int scalingSequence[, Array layerState]] )
inverseMultiscaleMedianTransform
void Image.inverseMultiscaleMedianTransform( Array layers )
medianWaveletTransform
Array Image.medianWaveletTransform( int numberOfLayers[, int scalingSequence[, Array layerState[, Number threshold=5]]] )
inverseMedianWaveletTransform
void Image.inverseMedianWaveletTransform( Array layers )
inverseMultiscaleTransform
void Image.inverseMultiscaleTransform( Array layers )
morphologicalTransformation
void Image.morphologicalTransformation( int operator, Array structure[, Number thr0=0[, Number thr1=0[, int interlacing=1]]] )
Bitmap Image.render( [int zoomFactor=1[, Boolean enableTransparency=true[, Boolean fast=false]]] )
blend
void Image.blend( Bitmap bmp[, Rect rect=0] )
void Image.blend( Bitmap bmp, Point pos[, Rect rect=0] )
void Image.blend( Bitmap bmp, x0, y0, x1, y1 )
void Image.blend( Bitmap bmp, x, y, x0, y0, x1, y1 )
toMatrix
Matrix Image.toMatrix( [Rect rect=0[, int channel=-1]] )
Float32Array Image.toFloat32Array( [Rect rect=0[, int channel=-1]] )
Float64Array Image.toFloat64Array( [Rect rect=0[, int channel=-1]] )
Uint32Array Image.toUint32Array( [Rect rect=0[, int channel=-1]] )
Uint16Array Image.toUint16Array( [Rect rect=0[, int channel=-1]] )
Uint8Array Image.toUint8Array( [Rect rect=0[, int channel=-1]] )
assignStatus
void Image.assignStatus( Image img )
initializeStatus
void Image.initializeStatus( String info, uint total )
advanceStatus
void Image.advanceStatus( uint count )
completeStatus
void Image.completeStatus()
newUIntImage
Image Image.newUIntImage( [int bitsPerSample=16] )
newFloatImage
Image Image.newFloatImage( [int bitsPerSample=32] )
newComplexImage
Image Image.newComplexImage( [int bitsPerSample=32] )
PCM
Image Image.PCM( Image fftA, Image fftB )
phaseCorrelationMatrix
Image Image.phaseCorrelationMatrix( Image fftA, Image fftB )
CPSM
Image Image.CPSM( Image fftA, Image fftB )
crossPowerSpectrumMatrix
Image Image.crossPowerSpectrumMatrix( Image fftA, Image fftB )
fileExtensionsForMimeType
Array Image.fileExtensionsForMimeType( String mimeType )
mimeTypesForFileExtension
Array Image.mimeTypesForFileExtension( String pathOrExt )
ColorSpace_Unknown
#define ColorSpace_Unknown -1
Unknown or unsupported color space
ColorSpace_Gray
#define ColorSpace_Gray 0
Grayscale monochrome space
ColorSpace_RGB
#define ColorSpace_RGB 1
RGB color space
ColorSpace_CIEXYZ
#define ColorSpace_CIEXYZ 2
CIE XYZ color space
ColorSpace_CIELab
#define ColorSpace_CIELab 3
CIE L*a*b* color space
ColorSpace_CIELch
#define ColorSpace_CIELch 4
CIE L*c*h* color space
ColorSpace_HSV
#define ColorSpace_HSV 5
HSV color ordering system: Hue, Saturation, Value
ColorSpace_HSI
#define ColorSpace_HSI 6
HSI color ordering system: Hue, Saturation, Intensity
ImageOp_Nop
#define ImageOp_Nop 0
ImageOp_Mov
#define ImageOp_Mov 1
ImageOp_Add
#define ImageOp_Add 2
ImageOp_Sub
#define ImageOp_Sub 3
ImageOp_Mul
#define ImageOp_Mul 4
ImageOp_Div
#define ImageOp_Div 5
ImageOp_Pow
#define ImageOp_Pow 6
ImageOp_Dif
#define ImageOp_Dif 7
ImageOp_Min
#define ImageOp_Min 8
ImageOp_Max
#define ImageOp_Max 9
ImageOp_Or
#define ImageOp_Or 10
ImageOp_And
#define ImageOp_And 11
ImageOp_Xor
#define ImageOp_Xor 12
ImageOp_Not
#define ImageOp_Not 13
ImageOp_Nor
#define ImageOp_Nor 14
ImageOp_Nand
#define ImageOp_Nand 15
ImageOp_Xnor
#define ImageOp_Xnor 16
ImageOp_ColorBurn
#define ImageOp_ColorBurn 17
ImageOp_LinearBurn
#define ImageOp_LinearBurn 18
ImageOp_Screen
#define ImageOp_Screen 19
ImageOp_ColorDodge
#define ImageOp_ColorDodge 20
ImageOp_Overlay
#define ImageOp_Overlay 21
ImageOp_SoftLight
#define ImageOp_SoftLight 22
ImageOp_HardLight
#define ImageOp_HardLight 23
ImageOp_VividLight
#define ImageOp_VividLight 24
ImageOp_LinearLight
#define ImageOp_LinearLight 25
ImageOp_PinLight
#define ImageOp_PinLight 26
ImageOp_Exclusion
#define ImageOp_Exclusion 27
Interpolation_Auto
#define Interpolation_Auto -1
Automatic pixel interpolation (Image.resample())
Interpolation_NearestNeighbor
#define Interpolation_NearestNeighbor 0
Nearest neighbor pixel interpolation
Interpolation_Bilinear
#define Interpolation_Bilinear 1
Bilinear pixel interpolation
Interpolation_BicubicSpline
#define Interpolation_BicubicSpline 2
Bicubic spline pixel interpolation
Interpolation_BicubicBSpline
#define Interpolation_BicubicBSpline 3
Bicubic B-spline pixel interpolation
Interpolation_Lanczos3
#define Interpolation_Lanczos3 4
Lanczos-3 pixel interpolation
Interpolation_Lanczos4
#define Interpolation_Lanczos4 5
Lanczos-4 pixel interpolation
Interpolation_Lanczos5
#define Interpolation_Lanczos5 6
Lanczos-5 pixel interpolation
Interpolation_MitchellNetravaliFilter
#define Interpolation_MitchellNetravaliFilter 7
Mitchell-Netravali cubic filter interpolation
Interpolation_CatmullRomSplineFilter
#define Interpolation_CatmullRomSplineFilter 8
Catmull-Rom spline filter interpolation
Interpolation_CubicBSplineFilter
#define Interpolation_CubicBSplineFilter 9
Cubic B-spline filter interpolation
SampleType_Integer
#define SampleType_Integer 0
8, 16 and 32-bit unsigned integer pixel samples
SampleType_Real
#define SampleType_Real 1
32 and 64-bit IEEE 754 floating point real pixel samples
SampleType_Complex
#define SampleType_Complex 2
32 and 64-bit IEEE 754 floating point complex pixel samples
ResizeMode_RelativeDimensions 
#define ResizeMode_RelativeDimensions 0
Resize relative to current image dimensions
ResizeMode_AbsolutePixels
#define ResizeMode_AbsolutePixels 1
Resize to absolute dimensions in pixels
ResizeMode_AbsoluteCentimeters
#define ResizeMode_AbsoluteCentimeters 2
Resize to absolute dimensions in centimeters
ResizeMode_AbsoluteInches
#define ResizeMode_AbsoluteInches 3
Resize to absolute dimensions in inches
ResizeMode_ForceArea
#define ResizeMode_ForceArea 4
Force the total number of pixels and keep existing aspect ratio
AbsoluteResizeMode_ForceWidthAndHeight
#define AbsoluteResizeMode_ForceWidthAndHeight 0
Force both dimensions
AbsoluteResizeMode_ForceWidth
#define AbsoluteResizeMode_ForceWidth 1
Force width, preserve aspect ratio
AbsoluteResizeMode_ForceHeight
#define AbsoluteResizeMode_ForceHeight 2
Force height, preserve aspect ratio
MorphOp_Erosion
#define MorphOp_Erosion 0
MorphOp_Dilation
#define MorphOp_Dilation 1
MorphOp_Closing
#define MorphOp_Closing 2
MorphOp_Opening
#define MorphOp_Opening 3
MorphOp_Median
#define MorphOp_Median 4
MorphOp_Selection
#define MorphOp_Selection 5
MorphOp_Midpoint
#define MorphOp_Midpoint 6
instantiating Image: internal error
empty image
invalid sample iteration parameters
invalid pixel iteration parameters
Image.Finalize
<* Panic *> Internal error: Invalid shared image.
Image.Image
unknown pixel sample type
unsupported number of bits per sample
unknown color space
invalid number of channels
invalid image dimension(s)
insufficient number of pixel samples in source array
invalid typed array type
expected a typed array object
invalid integer sample format: must be 8, 16 or 32 bits per sample
invalid floating point sample format: must be either 32 or 64 bits per sample
insufficient number of channels: at least 3 channels are required for a color image
Image.Get
Image.Set
invalid channel index
unknown interpolation algorithm
read-only image
clonePixelData
extractLuminance
getPixels
setPixels
ATW
inverseATW
MLT
inverseMLT
MMT
inverseMMT
MWT
inverseMWT
%3d%%
ImageDescription
String ImageDescription.id
int ImageDescription.width
int ImageDescription.height
int ImageDescription.numberOfChannels
int ImageDescription.colorSpace
supported
Boolean ImageDescription.supported
int ImageDescription.bitsPerSample
Boolean ImageDescription.ieeefpSampleFormat
Boolean ImageDescription.complexSample
Boolean ImageDescription.signedIntegers
Boolean ImageDescription.metricResolution
Boolean ImageDescription.embedICCProfile
Boolean ImageDescription.embedThumbnail
Boolean ImageDescription.embedProperties
Boolean ImageDescription.embedRGBWS
Boolean ImageDescription.embedDisplayFunction
Boolean ImageDescription.embedColorFilterArray
Boolean ImageDescription.embedPreviewRects
Number ImageDescription.lowerRange
Number ImageDescription.upperRange
Number ImageDescription.xResolution
Number ImageDescription.yResolution
int ImageDescription.isoSpeed
Number ImageDescription.exposure
Number ImageDescription.aperture
Number ImageDescription.focalLength
String ImageDescription.cfaType
new ImageDescription()
new ImageDescription( ImageDescription d )
void ImageDescription.assign( ImageDescription r )
instantiating ImageDescription: internal error
ImageDescription.Finalize
ImageDescription.ImageDescription
ImageDescription.Get
ImageDescription.Set
ImageDescription.assign
ImageStatistics
uint ImageStatistics.count
Number ImageStatistics.mean
Number ImageStatistics.sumOfSquares
Number ImageStatistics.median
Number ImageStatistics.variance
Number ImageStatistics.stdDev
standardDeviation
Number ImageStatistics.standardDeviation
Number ImageStatistics.avgDev
averageDeviation
Number ImageStatistics.averageDeviation
mad
Number ImageStatistics.mad
medianDeviation
Number ImageStatistics.medianDeviation
bwmv
Number ImageStatistics.bwmv
Number ImageStatistics.biweightMidvariance
pbmv
Number ImageStatistics.pbmv
Number ImageStatistics.bendMidvariance
sn
Number ImageStatistics.sn
qn
Number ImageStatistics.qn
Number ImageStatistics.minimum
Point ImageStatistics.minimumPosition
Number ImageStatistics.maximum
Point ImageStatistics.maximumPosition
rejectionLow
Number ImageStatistics.rejectionLow
rejectionHigh
Number ImageStatistics.rejectionHigh
lowRejectionEnabled
Boolean ImageStatistics.lowRejectionEnabled
highRejectionEnabled
Boolean ImageStatistics.highRejectionEnabled
extremesEnabled
Boolean ImageStatistics.extremesEnabled
meanEnabled
Boolean ImageStatistics.meanEnabled
sumOfSquaresEnabled
Boolean ImageStatistics.sumOfSquaresEnabled
varianceEnabled
Boolean ImageStatistics.varianceEnabled
medianEnabled
Boolean ImageStatistics.medianEnabled
avgDevEnabled
Boolean ImageStatistics.avgDevEnabled
madEnabled
Boolean ImageStatistics.madEnabled
bwmvEnabled
Boolean ImageStatistics.bwmvEnabled
pbmvEnabled
Boolean ImageStatistics.pbmvEnabled
snEnabled
Boolean ImageStatistics.snEnabled
qnEnabled
Boolean ImageStatistics.qnEnabled
new ImageStatistics()
new ImageStatistics( ImageStatistics s )
new ImageStatistics( Image img )
void ImageStatistics.generate( Image img )
void ImageStatistics.assign( ImageStatistics s )
instantiating ImageStatistics: internal error
ImageStatistics.Finalize
ImageStatistics.ImageStatistics
ImageStatistics.Get
ImageStatistics.Set
ImageStatistics.generate
ImageStatistics.assign
Boolean ImageWindow.isWindow
Boolean ImageWindow.isNull
isClosed
Boolean ImageWindow.isClosed
isNew
Boolean ImageWindow.isNew
isACopy
Boolean ImageWindow.isACopy
String ImageWindow.filePath
String ImageWindow.fileURL
isModified
Boolean ImageWindow.isModified
int ImageWindow.bitsPerSample
isFloatSample
Boolean ImageWindow.isFloatSample
isComplexSample
Boolean ImageWindow.isComplexSample
rgbWorkingSpace
RGBColorSystem ImageWindow.rgbWorkingSpace
mainView
View ImageWindow.mainView
View ImageWindow.currentView
numberOfPreviews
int ImageWindow.numberOfPreviews
Array ImageWindow.previews
View ImageWindow.selectedPreview
ImageWindow ImageWindow.mask
Boolean ImageWindow.maskInverted
Boolean ImageWindow.maskVisible
int ImageWindow.maskMode
Boolean ImageWindow.maskEnabled
Boolean ImageWindow.transparencyMode
Boolean ImageWindow.transparencyColor
transparencyVisible
Boolean ImageWindow.transparencyVisible
hasMaskReferences
Boolean ImageWindow.hasMaskReferences
Number ImageWindow.resolution
horizontalResolution
Number ImageWindow.horizontalResolution
verticalResolution
Number ImageWindow.verticalResolution
Boolean ImageWindow.metricResolution
int ImageWindow.isoSpeed
Number ImageWindow.exposure
Number ImageWindow.aperture
Number ImageWindow.focalLength
String ImageWindow.cfaType
Array ImageWindow.keywords
Boolean ImageWindow.visible
iconic
Boolean ImageWindow.iconic
Point ImageWindow.position
int ImageWindow.width
int ImageWindow.height
Rect ImageWindow.geometry
zoomFactor
int ImageWindow.zoomFactor
viewportWidth
int ImageWindow.viewportWidth
viewportHeight
int ImageWindow.viewportHeight
viewportPosition
Point ImageWindow.viewportPosition
visibleViewportRect
Rect ImageWindow.visibleViewportRect
hasPendingUpdates
Boolean ImageWindow.hasPendingUpdates
viewportUpdateRect
Rect ImageWindow.viewportUpdateRect
new ImageWindow()
new ImageWindow( ImageWindow )
new ImageWindow( int width, int height[, int numberOfChannels[, int bitsPerSample[, Boolean floatSample[, Boolean color[, String id]]]]] )
Boolean ImageWindow.save( [Boolean allowMessages=true[, Boolean strict=true]] )
saveAs
Boolean ImageWindow.saveAs( String filePath[, Boolean queryOptions=true[, Boolean allowMessages=true[, Boolean strict=true[, Boolean verifyOverwrite=true[, String formatHints='']]]]] )
int ImageWindow.close( [Boolean multiple=false] )
forceClose
void ImageWindow.forceClose()
isValidView
Boolean ImageWindow.isValidView( View view )
void ImageWindow.undo( [uint n=1] )
undoAll
void ImageWindow.undoAll()
void ImageWindow.redo( [uint n=1] )
redoAll
void ImageWindow.redoAll()
go
void ImageWindow.go( uint index )
purge
void ImageWindow.purge( [Boolean swapFiles=true[, properties=true[, Boolean histograms=true[, Boolean statistics=true[, Boolean notify=true]]]]] )
previewById
View ImageWindow.previewById( String id )
previewRect
Rect ImageWindow.previewRect( View preview )
createPreview
View ImageWindow.createPreview( Rect r, String id )
View ImageWindow.createPreview( int x0, int y0, int x1, int y1, String id )
modifyPreview
void ImageWindow.modifyPreview( View preview, Rect r[, String id] )
void ImageWindow.modifyPreview( View preview, int x0, int y0, int x1, int y1[, String id] )
deletePreview
void ImageWindow.deletePreview( View preview )
deletePreviews
void ImageWindow.deletePreviews()
setSampleFormat
void ImageWindow.setSampleFormat( int bitsPerSample, Boolean floatSample )
isMaskCompatible
Boolean ImageWindow.isMaskCompatible( ImageWindow mask )
setMask
void ImageWindow.setMask( ImageWindow mask[, Boolean invert=false] )
removeMask
void ImageWindow.removeMask()
updateMaskReferences
void ImageWindow.updateMaskReferences()
removeMaskReferences
void ImageWindow.removeMaskReferences()
isMaskOf
Boolean ImageWindow.isMaskOf( ImageWindow window )
setResolution
void ImageWindow.setResolution( Number res )
void ImageWindow.setResolution( Number xRes, Number yRes[, Boolean metric] )
void ImageWindow.show()
void ImageWindow.hide()
iconize
void ImageWindow.iconize()
deiconize
void ImageWindow.deiconize()
void ImageWindow.bringToFront()
void ImageWindow.sendToBack()
setViewport
void ImageWindow.setViewport( Point center[, int zoomFactor] )
void ImageWindow.setViewport( Number x, Number y[, int zoomFactor] )
fitWindow
void ImageWindow.fitWindow()
zoomToFit
void ImageWindow.zoomToFit( [Boolean allowZoomIn=false[, Boolean animate=true]] )
zoomToOptimalFit
void ImageWindow.zoomToOptimalFit( [Boolean allowZoomIn=false[, Boolean animate=true]] )
zoomIn
void ImageWindow.zoomIn()
zoomOut
void ImageWindow.zoomOut()
viewportToImage
Point ImageWindow.viewportToImage( Point p )
Rect ImageWindow.viewportToImage( Rect r )
viewportScalarToImage
Number ImageWindow.viewportScalarToImage( Number k )
imageToViewport
Point ImageWindow.imageToViewport( Point p )
Rect ImageWindow.imageToViewport( Rect r )
imageScalarToViewport
Number ImageWindow.imageScalarToViewport( Number k )
regenerate
void ImageWindow.regenerate()
updateViewport
void ImageWindow.updateViewport()
updateViewportRect
void ImageWindow.updateViewportRect( Rect r )
void ImageWindow.updateViewportRect( int x0, int y0, int x1, int y1 )
updateImageRect
void ImageWindow.updateImageRect( Rect r )
void ImageWindow.updateImageRect( Number x0, Number y0, Number x1, Number y1 )
commitPendingUpdates
void ImageWindow.commitPendingUpdates()
applyColorTransformation
void ImageWindow.applyColorTransformation( Bitmap bmp[, View view] )
regenerateAstrometricSolution
void ImageWindow.regenerateAstrometricSolution()
copyAstrometricSolution
void ImageWindow.copyAstrometricSolution( ImageWindow source )
clearAstrometricSolution
void ImageWindow.clearAstrometricSolution()
setAstrometricSolution
void ImageWindow.setAstrometricSolution( Array keywords, ByteArray controlPoints )
updateAstrometryMetadata
void ImageWindow.updateAstrometryMetadata()
Array ImageWindow.astrometricSolution()
astrometricSolutionSummary
String ImageWindow.astrometricSolutionSummary()
imageToCelestial
Point ImageWindow.imageToCelestial( Point xy )
Point ImageWindow.imageToCelestial( Number x, Number y )
Array ImageWindow.imageToCelestial( Array xy )
Array ImageWindow.imageToCelestial( Array x, Array y )
celestialToImage
Point ImageWindow.celestialToImage( Point eqDeg )
Point ImageWindow.celestialToImage( Number alphaDeg, Number deltaDeg )
Array ImageWindow.celestialToImage( Array eqDeg )
Array ImageWindow.celestialToImage( Array alphaDeg, Array deltaDeg )
Array ImageWindow.windows
openWindows
Array ImageWindow.openWindows
activeWindow
ImageWindow ImageWindow.activeWindow
swapFilesDirectory
String ImageWindow.swapFilesDirectory
Array ImageWindow.open( String url[, String id=''[, String formatHints=''[, Boolean asCopy=false]]] )
windowById
ImageWindow ImageWindow.windowById( String id )
windowByFilePath
ImageWindow ImageWindow.windowByFilePath( String path )
MaskMode_Replace
#define MaskMode_Replace 0
MaskMode_Multiply
#define MaskMode_Multiply 1
MaskMode_OverlayRed
#define MaskMode_OverlayRed 2
MaskMode_OverlayGreen
#define MaskMode_OverlayGreen 3
MaskMode_OverlayBlue
#define MaskMode_OverlayBlue 4
MaskMode_OverlayYellow
#define MaskMode_OverlayYellow 5
MaskMode_OverlayMagenta
#define MaskMode_OverlayMagenta 6
MaskMode_OverlayCyan
#define MaskMode_OverlayCyan 7
MaskMode_OverlayOrange
#define MaskMode_OverlayOrange 8
MaskMode_OverlayViolet
#define MaskMode_OverlayViolet 9
MaskMode_Default
#define MaskMode_Default MaskMode_OverlayRed
TransparencyMode_Hide
#define TransparencyMode_Hide 0
TransparencyMode_BackgroundBrush
#define TransparencyMode_BackgroundBrush 1
TransparencyMode_Color
#define TransparencyMode_Color 2
TransparencyMode_Default
#define TransparencyMode_Default TransparencyMode_BackgroundBrush
ImageWindow.Finalize
ImageWindow.ImageWindow
invalid dimension(s)
invalid view identifier
invalid sample format
ImageWindow.Get
ImageWindow.Set
invalid view specified
null view specified
invalid preview
incompatible mask image
Invalid mask rendering mode
Invalid transparency rendering mode
Invalid RGB working space
null image window
ImageWindow.save
Cannot save() a new image - try ImageWindow.saveAs()
ImageWindow.saveAs
No file path was specified.
ImageWindow.close
ImageWindow.forceClose
ImageWindow.isValidView
ImageWindow.undo
ImageWindow.undoAll
ImageWindow.redo
ImageWindow.redoAll
ImageWindow.go
ImageWindow.purge
ImageWindow.previewById
ImageWindow.previewRect
invalid preview specified
ImageWindow.createPreview
invalid view identifier: 
ImageWindow.modifyPreview
ImageWindow.deletePreview
ImageWindow.deletePreviews
ImageWindow.setSampleFormat
ImageWindow.isMaskCompatible
null image window specified
ImageWindow.setMask
ImageWindow.removeMask
ImageWindow.updateMaskReferences
ImageWindow.removeMaskReferences
ImageWindow.isMaskOf
ImageWindow.setResolution
ImageWindow.show
ImageWindow.hide
ImageWindow.iconize
ImageWindow.deiconize
ImageWindow.bringToFront
ImageWindow.sendToBack
ImageWindow.setViewport
ImageWindow.fitWindow
ImageWindow.zoomToFit
ImageWindow.zoomToOptimalFit
ImageWindow.zoomIn
ImageWindow.zoomOut
ImageWindow.viewportToImage
ImageWindow.viewportScalarToImage
ImageWindow.imageToViewport
ImageWindow.imageScalarToViewport
ImageWindow.regenerate
ImageWindow.updateViewport
ImageWindow.updateViewportRect
ImageWindow.updateImageRect
ImageWindow.commitPendingUpdates
ImageWindow.applyColorTransformation
ImageWindow.regenerateAstrometricSolution
ImageWindow.copyAstrometricSolution
ImageWindow.clearAstrometricSolution
ImageWindow.setAstrometricSolution
ImageWindow.updateAstrometryMetadata
ImageWindow.astrometricSolution
ImageWindow.astrometricSolutionSummary
ImageWindow.imageToCelestial
the image has no astrometric solution.
mismatched array lengths.
invalid array length.
Invalid call to AstrometricMetadata::CelestialToImage(): No astrometric solution.
ImageWindow.celestialToImage
ImageWindow.open
ImageWindow.windowById
ImageWindow.windowByFilePath
no file name was specified
Image.clonePixelData
source and target images refer to the same object
Image.allocate
insufficient number of channels
Image.free
Image.assign
Image.swap
Image.transfer
Image.createAlphaChannels
Image.deleteAlphaChannels
Image.deleteAlphaChannel
invalid alpha channel index
Image.fill
Image.invert
Image.truncate
Image.rescale
invalid function call for a complex image
Image.normalize
Image.binarize
Image.setAbs
invalid function call for an unsigned integer image
Image.apply
empty operand image
unknown image operator
Computing absolute value
Inverting pixel samples
Truncating pixel samples
Rescaling pixel samples
Computing extreme pixel sample values
Normalizing pixel samples
Binarizing pixel samples
Division by zero or insignificant scalar
Image.render
Image.blend
cannot blend a bitmap that is being painted on
expected a Point or Rect argument
Blending RGBA bitmap
Blending grayscale bitmap
Image.getLightness
Image.getLuminance
Image.extractLuminance
Image.getIntensity
Image.setLightness
Image.setLuminance
Transferring pixel data
Computing CIE L* component
Computing CIE Y component
Computing intensity component
Importing CIE L* component
Importing CIE Y component
Image.convolve
Image.convolveSeparable
Image.convolveFFT
empty response function image
Image.FFT
invalid sample type: must be a complex image
Image.inverseFFT
Apply to 32-bit floating-point images
Apply to 64-bit floating-point images
Apply to 8-bit integer images
Apply to 16-bit integer images
Apply to 32-bit integer images
Image.cropBy
Image.cropTo
Image.crop
Image.shiftBy
Image.shiftTo
Image.shift
Image.interpolate
pixel interpolation not supported for complex-valued images
Image.resample
unknown absolute resizing mode
unknown resizing mode
invalid X-axis scaling factor
invalid Y-axis scaling factor
invalid scaling factor
Image.rotate
Image.translate
Image.rotate180
Image.rotate90ccw
Image.rotate90cw
Image.mirrorHorizontal
Image.mirrorVertical
Image.polarTransform
final polar angle out of range
starting polar angle out of range
Image.logPolarTransform
Bilinear interpolation
Interpolate 32-bit complex images
Interpolate 64-bit complex images
Bicubic spline interpolation, c=%.2f
Bicubic B-spline interpolation
Lanczos-3 LUT interpolation
, c=%.2f
Lanczos-%d interpolation
Lanczos-4 LUT interpolation
Lanczos-5 LUT interpolation
Cubic filter (B=%.6f, C=%.6f)
Mitchell-Netravali cubic filter
 (%dx%d)
Catmull-Rom spline filter
Cubic B-spline filter
Nearest neighbor interpolation
Crop margins: %+d, %+d, %+d, %+d
expected a Matrix or Array object
invalid kernel filter size
row vector: expected a Vector or Array object
column vector: expected a Vector or Array object
invalid row vector length
invalid column vector length
incongruent separable filter dimensions
Image.fileExtensionsForMimeType
invalid MIME type specifier
Image.mimeTypesForFileExtension
invalid file extension
Image.toMatrix
Image.toFloat32Array
Image.toFloat64Array
Image.toUint32Array
Image.toUint16Array
Image.toUint8Array
Image.morphologicalTransformation
invalid morphological operator
Closing
Erosion
Opening
Dilation
Midpoint
empty structure
invalid structure size
inconsistent structure dimensions
Selection, k=%.5f
Image.inverseMultiscaleTransform
insufficient layers
Multiscale reconstruction
Image.starletTransform
invalid scaling sequence
invalid number of layers
invalid layer state array length
Image.noiseKSigma
invalid KS sigma multiplier
invalid wavelet layer index for KS noise evaluation
Image.noiseMRS
invalid MRS sigma multiplier
invalid number of wavelet layers for MRS noise evaluation
Image.multiscaleLinearTransform
Image.multiscaleMedianTransform
invalid MMT scaling sequence
invalid number of MMT layers
Image.medianWaveletTransform
Image.newUIntImage
Image.newFloatImage
Image.newComplexImage
Image.PCM
phase matrices require complex images
incongruent image formats
Image.CPSM
Invalid image geometry in PhaseCorrelationMatrix()
Phase correlation matrix
Invalid image geometry in CrossPowerSpectrumMatrix()
Cross power spectrum matrix
Image.sample
coordinate(s) out of range.
channel index out of range
Image.setSample
Image.getSamples
Image.setSamples
Image.initSampleIterator
Image.nextSample
Image.previousSample
Image.skipSamples
Image.sampleValue
Image.setSampleValue
Image.initPixelIterator
Image.nextPixel
Image.previousPixel
Image.skipPixels
Image.pixelValue
Image.getPixelValue
Image.setPixelValue
insufficient pixel components
Image.forEachSample
invalid function
Image.forEachMutableSample
Image.forEachPixel
Image.forEachMutablePixel
array allocation error
error setting array element
insufficient array elements
array reallocation error
insufficient vector components
invalid image selection
function call error
expected a numeric real pixel sample value
invalid numeric conversion
error accessing pixel component(s)
Image.readRawFile
Image.writeRawFile
Image.canPopSelections
Image.pushSelections
Image.popSelections
Image.resetChannelSelection
Image.resetRectSelection
Image.resetSelections
Image.count
Image.minimum
Image.maximum
Image.minimumPosition
Image.maximumPosition
Image.mean
Image.median
Image.avgDev
Image.twoSidedAvgDev
Image.variance
Image.stdDev
Image.MAD
Image.twoSidedMAD
Image.biweightMidvariance
Image.twoSidedBiweightMidvariance
at least two sigma estimates are required
Image.bendMidvariance
Image.Sn
Image.Qn
Image.norm
Image.modulus
Image.sumOfSquares
Image.meanOfSquares
Computing two-sided average absolute deviation
Computing two-sided median absolute deviation
Computing two-sided biweight midvariance
Image.assignStatus
Image.initializeStatus
invalid status monitor count
Image.advanceStatus
Image.completeStatus
empty source image
new ProcessInstance( [ProcessInstance] )
processId
String ProcessInstance.processId()
processCategory
String ProcessInstance.processCategory()
isAssignable
Boolean ProcessInstance.isAssignable()
canProcessViews
Boolean ProcessInstance.canProcessViews()
canProcessGlobal
Boolean ProcessInstance.canProcessGlobal()
canProcessImages
Boolean ProcessInstance.canProcessImages()
void ProcessInstance.assign( ProcessInstance )
Boolean ProcessInstance.validate()
isMaskable
Boolean ProcessInstance.isMaskable( View view, ImageWindow mask )
canExecuteOn
Boolean ProcessInstance.canExecuteOn( View view )
Boolean ProcessInstance.canExecuteOn( Image image )
isHistoryUpdater
Boolean ProcessInstance.isHistoryUpdater( View view )
executeOn
Boolean ProcessInstance.executeOn( View view[, Boolean swapFile=true] )
Boolean ProcessInstance.executeOn( Image image[, String hints=""] )

canExecuteGlobal
Boolean ProcessInstance.canExecuteGlobal()
executeGlobal
Boolean ProcessInstance.executeGlobal()
void ProcessInstance.launch()
canLaunchInterface
Boolean ProcessInstance.canLaunchInterface()
launchInterface
Boolean ProcessInstance.launchInterface()
startJD
Number ProcessInstance.startJD()
executionTime
Number ProcessInstance.executionTime()
String ProcessInstance.description()
setDescription
void ProcessInstance.setDescription( String text )
String ProcessInstance.toSource( [String language="JavaScript"[, String varId=""[, int indent=0]]] )
writeInstanceAddr
Boolean ProcessInstance.writeInstanceAddr( String instanceAddr )
readIcon
Boolean ProcessInstance.readIcon( String iconId )
writeIcon
Boolean ProcessInstance.writeIcon( String iconId )
icons
Array ProcessInstance.icons()
iconsByProcessId
Array ProcessInstance.iconsByProcessId( String processId )
fromIcon
ProcessInstance ProcessInstance.fromIcon( String iconId )
instantiating ProcessInstance: internal error
The JavaScript runtime has not been initialized.
.add( ProcessInstance instance )
.insert( uint index, ProcessInstance instance )
.delete( uint index )
ProcessInstance 
.at( uint index )
.setMask( uint index, ImageWindow mask[, Boolean invert=false] )
void 
.setMask( uint index, String maskId[, Boolean invert=false] )
invertMask
.invertMask( uint index[, Boolean invert] )
.maskId( uint index )
.maskInverted( uint index )
.enable( uint index[, Boolean enable=true] )
.disable( uint index[, Boolean disable=true] )
.enabled( uint index )
.disabled( uint index )
ProcessInstance.ProcessInstance
unable to get constructor function identifier
unknown process class '
ProcessInstance.processId
ProcessInstance.processCategory
ProcessInstance.isAssignable
ProcessInstance.canProcessViews
ProcessInstance.canProcessGlobal
ProcessInstance.canProcessImages
ProcessInstance.assign
ProcessInstance.validate
ProcessInstance.isMaskable
ProcessInstance.canExecuteOn
ProcessInstance.isHistoryUpdater
ProcessInstance.executeOn
invalid process execution: null view
invalid process execution: null image
ProcessInstance.canExecuteGlobal
ProcessInstance.executeGlobal
ProcessInstance.launch
ProcessInstance.canLaunchInterface
ProcessInstance.launchInterface
ProcessInstance.startJD
ProcessInstance.executionTime
ProcessInstance.description
ProcessInstance.setDescription
ProcessInstance.toSource
ProcessInstance.writeInstanceAddr
empty instance address
invalid address literal: 
null instance pointer: 
in instance assignment: source and target are instances of different processes
not an assignable process: 
ProcessInstance.readIcon
empty icon identifier
invalid icon identifier: '
not a process icon: '
source and target are instances of different processes: '
ProcessInstance.writeIcon
ProcessInstance.icons
ProcessInstance.iconsByProcessId
empty process identifier
invalid process identifier: '
unknown process class: '
ProcessInstance.fromIcon
ProcessInstance.Finalize
invalid property
corrupted metaparameter definition
invalid MetaTable structure
unable to lock parameter data
invalid MetaEnumeration element index
expected an array table definition
invalid string or block data
int8
uint8
int16
uint16
int
uint
int64
uint64
double
float
ProcessContainer.Get
ProcessContainer.add
ProcessContainer.insert
ProcessContainer.delete
ProcessContainer.clear
ProcessContainer.at
ProcessContainer.setMask
ProcessContainer.invertMask
ProcessContainer.maskId
ProcessContainer.maskInverted
ProcessContainer.enable
ProcessContainer.disable
ProcessContainer.enabled
ProcessContainer.disabled
invalid argument object type: expected an Array or a typed array
Internal Error: Unsupported property type '
Inconsistent matrix row length.
Invalid or unsupported view property type 0x%x
Label.Get
Label.Set
Label
String Label.text
useRichText
Boolean Label.useRichText
wordWrapping
Boolean Label.wordWrapping
margin
int Label.margin
textAlignment
int Label.textAlignment
new Label( [Control parent] )
void Label.clear()
Label.Finalize
Label.Label
Label.clear
LinearFunction
intercept
Number LinearFunction.intercept
Number LinearFunction.b
slope
Number LinearFunction.slope
Number LinearFunction.m
adev
Number LinearFunction.adev
Boolean LinearFunction.isValid
new LinearFunction()
new LinearFunction( LinearFunction S )
new LinearFunction( Number x1, Number y1, Number x2, Number y2 )
new LinearFunction( Array|TypedArray x, Array|TypedArray y )
void LinearFunction.fit( Array|TypedArray x, Array|TypedArray y )
void LinearFunction.evaluate( Number x )
instantiating LinearFit: internal error
LinearFunction.Finalize
LinearFunction.LinearFunction
LinearFit::LinearFit(): Less than two data points specified.
LinearFunction.Get
LinearFunction.Set
LinearFunction.fit
LinearFunction.evaluate
Math
EMath
E
Number Math.E
LOG2E
Number Math.LOG2E
LOG10E
Number Math.LOG10E
LN2
Number Math.LN2
LN10
Number Math.LN10
PI4
Number Math.PI4
PI2
Number Math.PI2
_3PI4
Number Math._3PI4
PI
Number Math.PI
_5PI4
Number Math._5PI4
_3PI2
Number Math._3PI2
_7PI4
Number Math._7PI4
_2PI
Number Math._2PI
_1_PI
Number Math._1_PI
_2_PI
Number Math._2_PI
DEG
Number Math.DEG
RAD
Number Math.RAD
SQRT2
Number Math.SQRT2
SQRT1_2
Number Math.SQRT1_2
GOLDEN
Number Math.GOLDEN
EPSILON
Number Math.EPSILON
MAX
Number Math.MAX
MIN
Number Math.MIN
LOWEST
Number Math.LOWEST
EPSILON32
Number Math.EPSILON32
MAX32
Number Math.MAX32
MIN32
Number Math.MIN32
LOWEST32
Number Math.LOWEST32
Number Math.abs( Number x )
Number Math.angle( Number deg[, Number min=0[, Number sec=0]] )
acos
Number Math.acos( Number x )
acosh
Number Math.acosh( Number x )
asin
Number Math.asin( Number x )
asinh
Number Math.asinh( Number x )
atan
Number Math.atan( Number y[, Number x=1] )
atan2
Number Math.atan2( Number y, Number x )
atan2pi
Number Math.atan2pi( Number y, Number x )
atanh
Number Math.atanh( Number x )
ceil
Number Math.ceil( Number x )
Number Math.cos( Number x )
Number Math.cosh( Number x )
cotan
Number Math.cotan( Number x )
deg
Number Math.deg( Number x )
Number Math.exp( Number x )
fact
Number Math.fact( int x )
floor
Number Math.floor( Number x )
frac
Number Math.frac( Number x )
frexp
Array Math.frexp( Number x )
hav
Number Math.hav( Number x )
lngamma
Number Math.lngamma( Number x )
complexTimeToJD
Number Math.complexTimeToJD( int year, int month, Number day[, Number dayFraction=0] )
complexTimeToJD2
Array Math.complexTimeToJD2( int year, int month, Number day[, Number dayFraction=0] )
jdToComplexTime
Array Math.jdToComplexTime( Number jd1[, Number jd2] )
decimalToSexagesimal
Array Math.decimalToSexagesimal( Number degrees )
sexagesimalToDecimal
Number Math.sexagesimalToDecimal( int sign, Number s1[, Number s2 = 0[, Number s3 = 0]] )
ldexp
Number Math.ldexp( Number mant, Number exp )
Number Math.ln( Number x )
Number Math.log( Number x )
log10
Number Math.log10( Number x )
log2
Number Math.log2( Number x )
logn
Number Math.logn( Number n, Number x )
mod
Number Math.mod( Number x, Number y )
poly
Number Math.poly( Number x, Array coeffs )
Number Math.pow( Number x, Number y )
pow10
Number Math.pow10( Number x )
pow2
Number Math.pow2( Number x )
round
Number Math.round( Number x )
roundTo
Number Math.roundTo( Number x, int n )
sign
int Math.sign( Number x )
Number Math.sin( Number x )
Number Math.sinh( Number x )
Number Math.sqrt( Number x )
Number Math.tan( Number x )
Number Math.tanh( Number x )
trunc
Number Math.trunc( Number x )
ahav
Number Math.ahav( Number x )
rad
Number Math.rad( Number x )
rad2min
Number Math.rad2min( Number x )
rad2sec
Number Math.rad2sec( Number x )
min2rad
Number Math.min2rad( Number x )
sec2rad
Number Math.sec2rad( Number x )
min
Number Math.min( Number x1[, Number x2[, ..., Number xN]] )
max
Number Math.max( Number x1[, Number x2[, ..., Number xN]] )
range
Number Math.range( Number x, Number a, Number b )
minElem
Number Math.minElem( Array|TypedArray data )
maxElem
Number Math.maxElem( Array|TypedArray data )
sum
Number Math.sum( Array|TypedArray data )
stableSum
Number Math.stableSum( Array|TypedArray data )
Number Math.modulus( Array|TypedArray data )
stableModulus
Number Math.stableModulus( Array|TypedArray data )
Number Math.sumOfSquares( Array|TypedArray data )
stableSumOfSquares
Number Math.stableSumOfSquares( Array|TypedArray data )
Number Math.mean( Array|TypedArray data )
stableMean
Number Math.stableMean( Array|TypedArray data )
trimmedMean
Number Math.trimmedMean( Array|TypedArray data[, int l=1[, int h=1]] )
trimmedMeanOfSquares
Number Math.trimmedMeanOfSquares( Array|TypedArray data[, int l=1[, int h=1]] )
Number Math.variance( Array|TypedArray data )
Number Math.stdDev( Array|TypedArray data )
Number Math.median( Array|TypedArray data )
Number Math.select( Array|TypedArray data, int k )
Number Math.avgDev( Array|TypedArray data[, Number center=median(data)] )
stableAvgDev
Number Math.stableAvgDev( Array|TypedArray data[, Number center=median(data)] )
Array Math.twoSidedAvgDev( Array|TypedArray data[, Number center=median(data)] )
Number Math.MAD( Array|TypedArray data[, Number center=median(data)] )
Array Math.twoSidedMAD( Array|TypedArray data[, Number center=median(data)] )
Number Math.Sn( Array|TypedArray data )
Number Math.Qn( Array|TypedArray data )
Number Math.biweightMidvariance( Array|TypedArray data[, Number center=median(data)[, Number sigma=MAD(data,center)[, int k=9[, Boolean reducedLength=false]]]] )
Array Math.twoSidedBiweightMidvariance( Array|TypedArray data[, Number center=median(data)[, Array|Number sigma=twoSidedMAD(data,center)[, int k=9[, Boolean reducedLength=false]]]] )
Number Math.bendMidvariance( Array|TypedArray data[, Number center=median(data)[, Number beta=0.2]] )
Number Math.random()
randomArray
Array Math.randomArray( uint n )
randomFloat32Array
Float32Array Math.randomFloat32Array( uint n[, String distr[, distr_p1[, distr_p2]]] )
randomFloat64Array
Float64Array Math.randomFloat64Array( uint n[, String distr[, distr_p1[, distr_p2]]] )
randomSeed32
uint Math.randomSeed32()
randomSeed64
[lsw,msw] Math.randomSeed64()
initRandomGenerator
void Math.initRandomGenerator( [Array seed64] )
void Math.initRandomGenerator( uint seedLSW, uint seedMSW )
void Math.initRandomGenerator( uint seed32 )
mtf
Number Math.mtf( Number m, Number x )
solve
Array Math.solve( Matrix A, Matrix B )
svd
Array Math.svd( Matrix A )
parseReal
Number Math.parseReal( String s[, int precision[, Number lowerBound[, Number upperBound]]] )
parseInteger
Number Math.parseInteger( String s[, int lowerBound[, int upperBound]] )
uiResourceScalingIndex
int Math.uiResourceScalingIndex( Number scalingFactor )
uiResourceScalingFactor
Number Math.uiResourceScalingFactor( Number scalingFactor )
uiResourceScalingFactorForIndex
Number Math.uiResourceScalingFactorForIndex( int index )
uiScaled
int Math.uiScaled( Number scalingFactor, Number size )
uiUnscaled
int Math.uiUnscaled( Number scalingFactor, Number size )
uiScaledResourceForIndex
String Math.uiScaledResourceForIndex( int index, String resource )
uiScaledResource
String Math.uiScaledResource( Number scalingFactor, String resource )
lnfact
avg
stddev
BMV
Math.abs
Math.angle
Math.acos
Math.acosh
Math.asin
Math.asinh
Math.atan
Math.atan2
Math.atan2pi
Math.atanh
Math.ceil
Math.cos
Math.cosh
Math.cotan
Math.deg
Math.exp
Math.fact
Math.lnfact
Math.frac
Math.frexp
Math.hav
Math.lngamma
Math.complexTimeToJD
Math.complexTimeToJD2
Math.jdToComplexTime
Math.decimalToSexagesimal
Math.sexagesimalToDecimal
Math.ldexp
Math.log
Math.log10
Math.log2
Math.logn
Math.mod
Math.poly
insufficient number of coefficients
Math.pow
Math.pow10
Math.pow2
Math.round
Math.roundTo
Math.sign
Math.sin
Math.sinh
Math.sqrt
Math.tan
Math.tanh
Math.trunc
Math.ahav
Math.rad
Math.rad2min
Math.rad2sec
Math.min2rad
Math.sec2rad
Math.minElem
Math.maxElem
Math.range
Math.sum
Math.stableSum
Math.modulus
Math.stableModulus
Math.sumOfSquares
Math.stableSumOfSquares
Math.mean
Math.stableMean
Math.trimmedMean
Math.trimmedMeanOfSquares
Math.variance
Math.stdDev
Math.median
Math.select
Math.avgDev
Math.stableAvgDev
Math.twoSidedAvgDev
Math.MAD
Math.twoSidedMAD
Math.Sn
Math.Qn
Math.biweightMidvariance
Math.twoSidedBiweightMidvariance
insufficient number of sigma values
Math.bendMidvariance
Math.random
Math.randomArray
Math.randomFloat32Array
gaussian
poisson
chi2
chisq
chisquare
chisq(): the degrees of freedom parameter must be > 0
st
studentt
studentt(): the degrees of freedom parameter must be > 0
uniform
Unknown distribution '
GammaRandomDeviates(): The function shape parameter must be > 0.
GammaRandomDeviates(): The scale parameter must be > 0.
Math.randomFloat64Array
Math.randomSeed32
Math.randomSeed64
Math.initRandomGenerator
insufficient number of random seed values
Math.mtf
Math.solve
Math.svd
Math.parseReal
Numeric value out of range: %.16g - valid range is [%.16g,%.16g]
Math.parseInteger
Integer value out of range: %d - valid range is [%d,%d]
Math.uiResourceScalingIndex
Math.uiResourceScalingFactor
Math.uiResourceScalingFactorForIndex
Math.uiScaled
Math.uiUnscaled
Math.uiScaledResourceForIndex
Math.uiScaledResource
Matrix
int Matrix.rows
cols
int Matrix.cols
int Matrix.columns
Boolean Matrix.isEmpty
numberOfElements
uint Matrix.numberOfElements
new Matrix()
new Matrix( int rows, int cols )
new Matrix( Number value, int rows, int cols )
new Matrix( Number a00, Number a01, Number a02, Number a10, Number a11, Number a12, Number a20, Number a21, Number a22 )
new Matrix( Matrix A[, int startRow, int startCol, int rows, int cols] )
new Matrix( Array a, int rows, int cols )
new Matrix( Array a, int startIndex, int rows, int cols )
new Matrix( TypedArray a, int rows, int cols )
new Matrix( TypedArray a, int startIndex, int rows, int cols )
void Matrix.assign( Number value )
void Matrix.assign( Number value, int rows, int cols )
void Matrix.assign( Number a00, Number a01, Number a02, Number a10, Number a11, Number a12, Number a20, Number a21, Number a22 )
void Matrix.assign( Matrix A[, int startRow, int startCol, int rows, int cols] )
void Matrix.assign( Array a )
void Matrix.assign( Array a, int rows, int cols )
void Matrix.assign( Array a, int startIndex, int rows, int cols )
void Matrix.assign( TypedArray a, int rows, int cols )
void Matrix.assign( TypedArray a, int startIndex, int rows, int cols )
void Matrix.swap( Matrix A )
isEqualTo
Boolean Matrix.isEqualTo( Matrix A )
isLessThan
Boolean Matrix.isLessThan( Matrix A )
sameElements
Boolean Matrix.sameElements( Matrix A )
Number Matrix.at( int row, int col )
void Matrix.at( int row, int col, Number value )
rowVector
Vector Matrix.rowVector( int row )
colVector
Vector Matrix.colVector( int col )
transpose
Matrix Matrix.transpose()
inverse
Matrix Matrix.inverse()
void Matrix.invert()
flipped
Matrix Matrix.flipped()
flip
void Matrix.flip()
void Matrix.truncate( [Number v0=0[, Number v1=1]] )
void Matrix.rescale( [Number v0=0[, Number v1=1]] )
void Matrix.sort()
Array|null Matrix.linearSearch( Number value )
Array|null Matrix.binarySearch( Number value )
minElement
Number Matrix.minElement()
maxElement
Number Matrix.maxElement()
Number Matrix.sum()
Number Matrix.modulus()
Number Matrix.sumOfSquares()
Number Matrix.mean()
Number Matrix.stableSum()
Number Matrix.stableModulus()
Number Matrix.stableSumOfSquares()
Number Matrix.stableMean()
Number Matrix.trimmedMean( [int l=1[, int h=1]] )
Number Matrix.trimmedMeanOfSquares( [int l=1[, int h=1]] )
Number Matrix.median()
Number Matrix.stdDev()
Number Matrix.variance()
Number Matrix.avgDev( [Number center=median()] )
Number Matrix.stableAvgDev( [Number center=median()] )
Array Matrix.twoSidedAvgDev( [Number center=median()] )
Number Matrix.MAD( [Number center=median()] )
Array Matrix.twoSidedMAD( [Number center=median()] )
Number Matrix.biweightMidvariance( [Number center=median()[, Number sigma=MAD()[, int k=9[, Boolean reducedLength=false]]]] )
Number Matrix.BWMV( [Number center=median()[, Number sigma=MAD()[, int k=9[, Boolean reducedLength=false]]]] )
Array Matrix.twoSidedBiweightMidvariance( [Number center=median()[, Array|Number sigma=twoSidedMAD()[, int k=9[, Boolean reducedLength=false]]]] )
Array Matrix.twoSidedBWMV( [Number center=median()[, Array|Number sigma=twoSidedMAD()[, int k=9[, Boolean reducedLength=false]]]] )
Number Matrix.bendMidvariance( [Number center=median()[, Number beta=0.2]] )
Number Matrix.PBMV( [Number center=median()[, Number beta=0.2]] )
Number Matrix.Sn()
Number Matrix.Qn()
void Matrix.add( Number s )
Matrix Matrix.add( Matrix A )
void Matrix.sub( Number s )
Matrix Matrix.sub( Matrix A )
void Matrix.mul( Number s )
Matrix Matrix.mul( Matrix A )
void Matrix.div( Number s )
void Matrix.pow( Number s )
addElementWise
void Matrix.addElementWise( Matrix A )
subElementWise
void Matrix.subElementWise( Matrix A )
mulElementWise
void Matrix.mulElementWise( Matrix A )
divElementWise
void Matrix.divElementWise( Matrix A )
powElementWise
void Matrix.powElementWise( Matrix A )
invertElementWise
void Matrix.invertElementWise()
Matrix Matrix.abs()
sqr
Matrix Matrix.sqr()
Matrix Matrix.sqrt()
void Matrix.setAbs()
setSqr
void Matrix.setSqr()
void Matrix.setSqrt()
setRandom
void Matrix.setRandom()
toImage
Image Matrix.toImage()
Array Matrix.toArray( [int startRow=0, int startCol=0, int rows=rows, int cols=cols] )
Float32Array Matrix.toFloat32Array( [int startRow=0, int startCol=0, int rows=rows, int cols=cols] )
Float64Array Matrix.toFloat64Array( [int startRow=0, int startCol=0, int rows=rows, int cols=cols] )
fromImage
Matrix Matrix.fromImage( Image img[, Rect rect=0[, int channel=-1]] )
unitMatrix
Matrix Matrix.unitMatrix( [int n=3] )
gaussianFilter
Matrix Matrix.gaussianFilter( Number sigma[, Number epsilon=0.01[, Number rho=1[, Number theta=0]]] )
gaussianFilterBySize
Matrix Matrix.gaussianFilterBySize( int size[, Number epsilon=0.01[, Number rho=1[, Number theta=0]]] )
variableShapeFilter
Matrix Matrix.variableShapeFilter( Number sigma[, Number shape=2[, Number epsilon=0.01[, Number rho=1[, Number theta=0]]]] )
variableShapeFilterBySize
Matrix Matrix.variableShapeFilterBySize( int size[, Number shape=2[, Number epsilon=0.01[, Number rho=1[, Number theta=0]]]] )
moffatFilter
Matrix Matrix.moffatFilter( Number sigma[, Number beta=4[, Number epsilon=0.01[, Number rho=1[, Number theta=0]]]] )
moffatFilterBySize
Matrix Matrix.moffatFilterBySize( int size[, Number beta=4[, Number epsilon=0.01[, Number rho=1[, Number theta=0]]]] )
linearFilter
Matrix Matrix.linearFilter( int size[, Number v0=1.0[, Number v1=0.01]] )
instantiating Matrix: internal error
Matrix.Finalize
Matrix.Matrix
expected a Matrix, Array, or typed array object
Matrix.Get
columnVector
Matrix.assign
Matrix.swap
Matrix.isEqualTo
Matrix.isLessThan
Matrix.sameElements
Matrix.at
Matrix.rowVector
Matrix.colVector
Matrix.transpose
Matrix.inverse
Invalid matrix inversion: Non-square or empty matrix.
Invalid matrix inversion: Singular matrix.
Matrix.invert
Matrix.flipped
Matrix.flip
Matrix.truncate
Matrix.rescale
Matrix.sort
Matrix.linearSearch
Matrix.binarySearch
Matrix.minElement
Matrix.maxElement
Matrix.sum
Matrix.modulus
Matrix.sumOfSquares
Matrix.mean
Matrix.stableSum
Matrix.stableModulus
Matrix.stableSumOfSquares
Matrix.stableMean
Matrix.trimmedMean
Matrix.trimmedMeanOfSquares
Matrix.median
Matrix.stdDev
Matrix.variance
Matrix.avgDev
Matrix.stableAvgDev
Matrix.twoSidedAvgDev
Matrix.MAD
Matrix.twoSidedMAD
Matrix.biweightMidvariance
Matrix.twoSidedBiweightMidvariance
Matrix.bendMidvariance
Matrix.Sn
Matrix.Qn
Matrix.add
Invalid matrix addition.
Matrix.sub
Invalid matrix subtraction.
Matrix.mul
Invalid matrix multiplication.
Matrix.div
Matrix.pow
Matrix.addElementWise
Matrix.subElementWise
Matrix.mulElementWise
Matrix.divElementWise
Matrix.powElementWise
Matrix.invertElementWise
Matrix.abs
Matrix.sqr
Matrix.sqrt
Matrix.setAbs
Matrix.setSqr
Matrix.setSqrt
Matrix.setRandom
Matrix.toImage
Matrix.toArray
Matrix.toFloat32Array
Matrix.toFloat64Array
Matrix.fromImage
Matrix.unitMatrix
Matrix.gaussianFilter
Matrix.gaussianFilterBySize
Matrix.variableShapeFilter
Matrix.variableShapeFilterBySize
Matrix.moffatFilter
Matrix.moffatFilterBySize
Matrix.linearFilter
MessageBox
String MessageBox.text
String MessageBox.caption
int MessageBox.icon
firstButton
int MessageBox.firstButton
secondButton
int MessageBox.secondButton
thirdButton
int MessageBox.thirdButton
int MessageBox.defaultButton
escapeButton
int MessageBox.escapeButton
int MessageBox.result
new MessageBox( [String text[, String caption[, int icon[, int button1[, int button2[, int button3[, int defaultButton[, int escapeButton]]]]]]]] )
int MessageBox.execute()
StdButton_NoButton 
#define StdButton_NoButton 0
StdButton_Ok
#define StdButton_Ok 1
StdButton_Cancel
#define StdButton_Cancel 2
StdButton_Yes
#define StdButton_Yes 3
StdButton_No
#define StdButton_No 4
StdButton_Abort
#define StdButton_Abort 5
StdButton_Retry
#define StdButton_Retry 6
StdButton_Ignore
#define StdButton_Ignore 7
StdButton_YesToAll
#define StdButton_YesToAll 8
StdButton_NoToAll
#define StdButton_NoToAll 9
StdIcon_NoIcon
#define StdIcon_NoIcon 0
StdIcon_Question
#define StdIcon_Question 1
StdIcon_Information
#define StdIcon_Information 2
StdIcon_Warning
#define StdIcon_Warning 3
StdIcon_Error
#define StdIcon_Error 4
instantiating MessageBox: internal error
MessageBox.Finalize
MessageBox.MessageBox
Unknown standard button
Unknown standard icon
MessageBox.Get
MessageBox.Set
MessageBox.execute
MessageListener.Get
MessageListener.Set
2MessageReceived( int, const IsoString&, const String& )
1OnMessage( int, const IsoString&, const String& )
MessageListener
onMessage
void MessageListener.onMessage( int instance, String uniqueId, String message )
new MessageListener()
MessageListener.Finalize
MessageListener.MessageListener
NetworkTransfer.Get
NetworkTransfer.Set
String NetworkTransfer.url
proxyURL
String NetworkTransfer.proxyURL
customHTTPHeaders
Array NetworkTransfer.customHTTPHeaders
Boolean NetworkTransfer.ok
aborted
Boolean NetworkTransfer.aborted
String NetworkTransfer.responseCode
String NetworkTransfer.contentType
Number NetworkTransfer.bytesTransferred
Number NetworkTransfer.totalSpeed
Number NetworkTransfer.totalTime
errorInformation
String NetworkTransfer.errorInformation
onDownloadDataAvailable
Boolean NetworkTransfer.onDownloadDataAvailable( ByteArray data )
onUploadDataRequested
ByteArray NetworkTransfer.onUploadDataRequested( Number maxSize )
onTransferProgress
Boolean NetworkTransfer.onTransferProgress( Number dlTotal, Number dlCurrent, Number ulTotal, Number ulCurrent )
new NetworkTransfer()
setURL
void NetworkTransfer.setURL( String url[, String userName=""[, String userPassword=""]] )
setProxyURL
void NetworkTransfer.setProxyURL( String url[, String userName=""[, String userPassword=""]] )
setSSL
void NetworkTransfer.setSSL( [Boolean useSSL=true[, Boolean forceSSL=true[, Boolean verifyPeer=true[, Boolean verifyHost=true]]]] )
setCustomHTTPHeaders
void NetworkTransfer.setCustomHTTPHeaders( Array headers )
setConnectionTimeout
void NetworkTransfer.setConnectionTimeout( int seconds )
download
Boolean NetworkTransfer.download()
upload
Boolean NetworkTransfer.upload( [Number uploadSize=0] )
post
Boolean NetworkTransfer.post( String fields )
smtp
Boolean NetworkTransfer.smtp( String mailFrom, Array mailRecipients )
closeConnection
void NetworkTransfer.closeConnection()
NetworkTransfer.Finalize
NetworkTransfer.NetworkTransfer
NetworkTransfer.setURL
empty URL specified
NetworkTransfer.setProxyURL
NetworkTransfer.setSSL
NetworkTransfer.setCustomHTTPHeaders
NetworkTransfer.setConnectionTimeout
NetworkTransfer.download
NetworkTransfer.upload
NetworkTransfer.post
NetworkTransfer.smtp
expected an Array object
NetworkTransfer.closeConnection


\keywords {
   
}

\author {
   Juan Conejero, PTeam
}

\copyright {
   Copyright (c) 2003-2020 Pleiades Astrophoto. All Rights Reserved.
}

\brief {
   
}

\description {
   
}
[readonly]


\relatedobjects {
}

\relatedscripts {
}

\relatedtools {
}

\make[noauthors]

<end><cbr>Generating core JavaScript PIDoc sources...
<end><cbr>* PIDoc sources were generated for %d core JavaScript objects.
 class="read_only_property"
 (read-only)
[
\[
]
\]
{
\{
}
\}


\n

ObserverPosition
lambda
Number ObserverPosition.lambda
longitude
Number ObserverPosition.longitude
phi
Number ObserverPosition.phi
latitude
Number ObserverPosition.latitude
Number ObserverPosition.height
equatorialRadius
Number ObserverPosition.equatorialRadius
flattening
Number ObserverPosition.flattening
regionalCenter
Vector ObserverPosition.regionalCenter
cioBased
Boolean ObserverPosition.cioBased
new ObserverPosition( Number longitude, Number latitude[, Number height = 0[, Number equatorialRadius[, Number flattening[, Vector regionalCenter[, Boolean cioBased = false]]]]] )
instantiating ObserverPosition: internal error
ObserverPosition.Finalize
ObserverPosition.ObserverPosition
ObserverPosition.Get
ObserverPosition.Set
PDF
String PDF.filePath
ByteArray PDF.outputData
String PDF.title
creator
String PDF.creator
pageSize
Rect PDF.pageSize
int PDF.resolution
fullRect
Rect PDF.fullRect
paintRect
Rect PDF.paintRect
margins
Rect PDF.margins
leftMargin
Number PDF.leftMargin
topMargin
Number PDF.topMargin
rightMargin
Number PDF.rightMargin
bottomMargin
Number PDF.bottomMargin
minMargins
Rect PDF.minMargins
maxMargins
Rect PDF.maxMargins
portrait
Boolean PDF.portrait
landscape
Boolean PDF.landscape
Boolean PDF.isPainting
new PDF( [String filePath] )
PDF.Finalize
PDF.PDF
empty PDF file path
PixInsight PDF Document
PDF.Get
PDF.Set
Parameters
isGlobalTarget
Boolean Parameters.isGlobalTarget
isViewTarget
Boolean Parameters.isViewTarget
targetView
View Parameters.targetView
has
Boolean Parameters.has( String id )
get
String Parameters.get( String id )
getString
String Parameters.getString( String id )
getInteger
Number Parameters.getInteger( String id[, int radix=0] )
getUInt
Number Parameters.getUInt( String id[, int radix=0] )
getReal
Number Parameters.getReal( String id )
getBoolean
Boolean Parameters.getBoolean( String id )
void Parameters.set( String id, Object value )
void Parameters.remove( String id )
void Parameters.clear()
Parameters.Get
Parameters.has
Parameters.getString
Parameters.getInteger
Parameters.getUInt
Parameters.getReal
Parameters.getBoolean
Parameters.set
invalid parameter value
Parameters.remove
Parameters.clear
Number Pen.width
uint32 Pen.color
int Pen.style
cap
int Pen.cap
int Pen.join
Brush Pen.brush
Boolean Pen.isSolid
Boolean Pen.isEmpty
new Pen( [uint32 color=0xff000000[, Number width=0[, int style=PenStyle_Solid[, int cap=PenCap_Flat[, int join=PenJoin_Miter]]]]] )
new Pen( Pen p )
void Pen.assign( Pen p )
PenStyle_Empty
#define PenStyle_Empty 0
Nothing drawn
PenStyle_Solid
#define PenStyle_Solid 1
_____________
PenStyle_Dash
#define PenStyle_Dash 2
_ _ _ _ _ _ _
PenStyle_Dot
#define PenStyle_Dot 3
.............
PenStyle_DashDot
#define PenStyle_DashDot 4
_._._._._._._
PenStyle_DashDotDot
#define PenStyle_DashDotDot 5
_.._.._.._.._
PenJoin_Miter
#define PenJoin_Miter 0
Lines are joined by sharp corners
PenJoin_Bevel
#define PenJoin_Bevel 1
Lines are joined by flat corners
PenJoin_Round
#define PenJoin_Round 2
Circular arcs are drawn between lines
PenCap_Flat
#define PenCap_Flat 0
Square caps not reaching the end points of lines
PenCap_Square
#define PenCap_Square 1
Square caps extending beyond end points by half the line width
PenCap_Round
#define PenCap_Round 2
Round caps centered at the line end points
instantiating Pen: internal error
Pen.Finalize
Pen.Pen
Unknown pen join style
Unknown pen cap style
Unknown pen style
Pen.Get
Pen.Set
Pen.assign
Point
Number Point.x
Number Point.y
new Point()
new Point( Number x, Number y )
new Point( Number d )
new Point( Point p )
void Point.assign( Point p )
void Point.assign( Number x[, Number y=x] )
transform
void Point.transform( Matrix M )
Point Point.transformed( Matrix M )
void Point.translate( Point p )
void Point.translate( Number x[, Number y=x] )
translateBy
void Point.translateBy( Point d )
void Point.translateBy( Number dx[, Number dy=dx] )
translated
Point Point.translated( Point p )
Point Point.translated( Number x[, Number y=x] )
translatedBy
Point Point.translatedBy( Point d )
Point Point.translatedBy( Number dx[, Number dy=dx] )
moveTo
void Point.moveTo( Point p )
void Point.moveTo( Number x[, Number y=x] )
movedTo
Point Point.movedTo( Point p )
Point Point.movedTo( Number x[, Number y=x] )
moveBy
void Point.moveBy( Point d )
void Point.moveBy( Number dx[, Number dy=dx] )
movedBy
Point Point.movedBy( Point d )
Point Point.movedBy( Number dx[, Number dy=dx] )
void Point.rotate( Number angleRadians[, Point center=0] )
void Point.rotate( Number sin, Number cos[, Point center=0] )
void Point.rotate( Number angleRadians, Number cx, Number cy )
void Point.rotate( Number sin, Number cos, Number cx, Number cy )
Point Point.rotated( Number angleRadians[, Point center=0] )
Point Point.rotated( Number sin, Number cos[, Point center=0] )
Point Point.rotated( Number angleRadians, Number cx, Number cy )
Point Point.rotated( Number sin, Number cos, Number cx, Number cy )
symmetrize
void Point.symmetrize()
symmetric
Point Point.symmetric()
void Point.round( [uint n=0] )
rounded
Point Point.rounded( [uint n=0] )
void Point.truncate()
truncated
Point Point.truncated()
void Point.add( Point p )
void Point.add( Number x[, Number y=x] )
void Point.sub( Point p )
void Point.sub( Number x[, Number y=x] )
void Point.mul( Point p )
void Point.mul( Number x[, Number y=x] )
void Point.div( Point p )
void Point.div( Number x[, Number y=x] )
dot
Number Point.dot( Point p )
Number Point.dot( Number x, Number y )
distanceTo
Number Point.distanceTo( Point p )
Number Point.distanceTo( Number x, Number y )
Boolean Rect.isEqualTo( Point p )
Boolean Rect.isEqualTo( Number x, Number y )
Boolean Rect.isEqualTo( Number scalar )
Boolean Rect.isLessThan( Point p )
Boolean Rect.isLessThan( Number x, Number y )
Boolean Rect.isLessThan( Number scalar )
String Point.toString()
Array Point.toArray()
toVector
Vector Point.toVector()
instantiating Point: internal error
Point.Finalize
Point.Point
Point.Get
Point.Set
Point.assign
Point.transform
invalid matrix dimensions
Point.transformed
Point.translate
Point.translateBy
Point.translated
Point.translatedBy
Point.rotate
Point.rotated
Point.symmetrize
Point.symmetric
Point.round
Point.rounded
Point.truncate
Point.truncated
Point.add
Point.sub
Point.mul
Point.div
Point.dot
Point.distanceTo
Point.isEqualTo
Point.isLessThan
Point.toString
[%f,%f]
Point.toArray
Point.toVector
PointGridInterpolation
Boolean PointGridInterpolation.isValid
Rect PointGridInterpolation.referenceRect
int PointGridInterpolation.delta
new PointGridInterpolation()
new PointGridInterpolation( Rect r, SurfaceSpline Sx, SurfaceSpline Sy[, int delta = 8[, Boolean verbose = false]] )
new PointGridInterpolation( Rect r, ShepardInterpolation Sx, ShepardInterpolation Sy[, int delta = 8[, Boolean verbose = false]] )
new PointGridInterpolation( PointGridInterpolation G )
void PointGridInterpolation.assign( PointGridInterpolation G )
void PointGridInterpolation.initialize( Rect r, SurfaceSpline Sx, SurfaceSpline Sy[, int delta = 8[, Boolean verbose = false]] )
void PointGridInterpolation.initialize( Rect r, ShepardInterpolation Sx, ShepardInterpolation Sy[, int delta = 8[, Boolean verbose = false]] )
void PointGridInterpolation.clear()
Point PointGridInterpolation.evaluate( Number x, Number y )
Point PointGridInterpolation.evaluate( Point p )
Array PointGridInterpolation.evaluate( Array points )
instantiating PointGridInterpolation: internal error
PointGridInterpolation.Finalize
PointGridInterpolation.PointGridInterpolation
PointGridInterpolation::Initialize(): Empty interpolation space.
PointGridInterpolation::Initialize(): Zero grid distance.
PointGridInterpolation.Get
PointGridInterpolation.initialize
PointGridInterpolation.clear
PointGridInterpolation.assign
PointGridInterpolation.evaluate
PointSurfaceSpline
Boolean PointSurfaceSpline.isValid
isRecursive
Boolean PointSurfaceSpline.isRecursive
new PointSurfaceSpline()
new PointSurfaceSpline( Array P1, Array P2[, Number smoothness = 0[, Vector W = null[, int order = 2[, Boolean allowExtrapolation = true[, int maxSplineLength = 1600[, int bucketCapacity = 64[, Boolean verbose = true]]]]]]] )
void PointSurfaceSpline.initialize( Array P1, Array P2[, Number smoothness = 0[, Vector W = null[, int order = 2[, Boolean allowExtrapolation = true[, int maxSplineLength = 1600[, int bucketCapacity = 64[, Boolean verbose = true]]]]]]] )
void PointSurfaceSpline.clear()
Point PointSurfaceSpline.evaluate( Number x, Number y )
Point PointSurfaceSpline.evaluate( Point p )
Array PointSurfaceSpline.evaluate( Array points )
PointSurfaceSpline.Finalize
PointSurfaceSpline.PointSurfaceSpline
RecursivePointSurfaceSpline::Initialize(): At least three input nodes must be specified.
RecursivePointSurfaceSpline::Initialize(): Insufficient data.
PointSurfaceSpline::Initialize(): At least three input nodes must be specified.
PointSurfaceSpline::Initialize(): Insufficient data.
SurfaceSpline::Initialize(): Null vector pointer(s).
SurfaceSpline::Initialize(): At least three input nodes must be specified.
SurfaceSpline::Initialize(): Empty or insignificant interpolation space.
SurfaceSpline::Initialize(): Less than three input nodes left after sanitization.
PointSurfaceSpline.Get
PointSurfaceSpline.initialize
PointSurfaceSpline.clear
PointSurfaceSpline.evaluate
Position
observer
ObserverPosition Position.observer
isTopocentric
Boolean Position.isTopocentric
polarMotionEnabled
Boolean Position.polarMotionEnabled
TDB
Date Position.TDB
Teph
Date Position.Teph
TT
Date Position.TT
UT1
Date Position.UT1
barycentricPositionOfEarth
Vector Position.barycentricPositionOfEarth
barycentricVelocityOfEarth
Vector Position.barycentricVelocityOfEarth
barycentricPositionOfSun
Vector Position.barycentricPositionOfSun
heliocentricPositionOfEarth
Vector Position.heliocentricPositionOfEarth
equinoxBPNMatrix
Matrix Position.equinoxBPNMatrix
cioBPNMatrix
Matrix Position.cioBPNMatrix
CIP
Vector Position.CIP
CIP_ITRS
Vector Position.CIP_ITRS
CIO
Number Position.CIO
EO
Number Position.EO
ERA
Number Position.ERA
GAST
Number Position.GAST
epsA
Number Position.epsA
new Position( Date t[, String timescale="TT"] )
new Position( String isoTime[, String timescale="TT"] )
new Position( Number jd1[, Number jd2=0[, String timescale="TT"]] )
Vector Position.true( EphemerisHandle H )
Vector Position.true( StarPosition S )
trueDistance
Number Position.trueDistance( EphemerisHandle H )
Number Position.trueDistance( StarPosition S )
geometric
Vector Position.geometric( EphemerisHandle H )
Vector Position.geometric( StarPosition S )
astrometric
Vector Position.astrometric( EphemerisHandle H )
Vector Position.astrometric( StarPosition S )
proper
Vector Position.proper( EphemerisHandle H )
Vector Position.proper( StarPosition S )
apparent
Vector Position.apparent( EphemerisHandle H )
Vector Position.apparent( StarPosition S )
intermediate
Vector Position.intermediate( EphemerisHandle H )
Vector Position.intermediate( StarPosition S )
canComputeApparentVisualMagnitude
Boolean Position.canComputeApparentVisualMagnitude( EphemerisHandle H )
apparentVisualMagnitude
Number|null Position.apparentVisualMagnitude( EphemerisHandle H )
initEquinoxBasedParameters
void Position.initEquinoxBasedParameters()
initCIOBasedParameters
void Position.initCIOBasedParameters()
nutationAngles
Array Position.nutationAngles()
equatorialToEcliptic
Vector Position.equatorialToEcliptic( Vector r, Number eps )
Vector Position.equatorialToEcliptic( Vector r, Number se, Number ce )
icrsEquatorialToGalactic
Vector Position.icrsEquatorialToGalactic( Vector r )
Position.Finalize
Position.Position
Position.Get
Position.Set
Position.true
Position.trueDistance
Position.geometric
Position.astrometric
Position.proper
Position.apparent
Position.intermediate
Position.canComputeApparentVisualMagnitude
Position.apparentVisualMagnitude
Position.initEquinoxBasedParameters
Position.initCIOBasedParameters
Position.nutationAngles
Position.equatorialToEcliptic
Position.icrsEquatorialToGalactic
RGBColorSystem
Number gamma
srgbGamma
Boolean srgbGamma
Array Y
Array x
Array y
new RGBColorSystem( [Number gamma=2.2[, Boolean srgbGamma=true[, Array Y=Y_srgb[, Array x=x_srgb, Array y=y_srgb]]]] )
new RGBColorSystem( RGBColorSystem rgbws )
void RGBColorSystem.assign( RGBColorSystem rgbws )
Number RGBColorSystem.lightness( Number r, Number g, Number b )
Number RGBColorSystem.lightness( Array rgb )
rgbToCIEXYZ
Array RGBColorSystem.rgbToCIEXYZ( Number r, Number g, Number b )
Array RGBColorSystem.rgbToCIEXYZ( Array rgb )
cieXYZToRGB
Array RGBColorSystem.cieXYZToRGB( Number x, Number y, Number z )
Array RGBColorSystem.cieXYZToRGB( Array xyz )
cieXYZToCIELab
Array RGBColorSystem.cieXYZToCIELab( Number x, Number y, Number z )
Array RGBColorSystem.cieXYZToCIELab( Array xyz )
rgbToCIELab
Array RGBColorSystem.rgbToCIELab( Number r, Number g, Number b )
Array RGBColorSystem.rgbToCIELab( Array rgb )
cieLabToRGB
Array RGBColorSystem.cieLabToRGB( Number L, Number a, Number b )
Array RGBColorSystem.cieLabToRGB( Array Lab )
cieLabToCIEXYZ
Array RGBColorSystem.cieLabToCIEXYZ( Number L, Number a, Number b )
Array RGBColorSystem.cieLabToCIEXYZ( Array Lab )
cieLabToCIELch
Array RGBColorSystem.cieLabToCIELch( Number L, Number a, Number b )
Array RGBColorSystem.cieLabToCIELch( Array Lab )
rgbToCIELch
Array RGBColorSystem.rgbToCIELch( Number r, Number g, Number b )
Array RGBColorSystem.rgbToCIELch( Array rgb )
cieLchToRGB
Array RGBColorSystem.cieLchToRGB( Number L, Number c, Number h )
Array RGBColorSystem.cieLchToRGB( Array Lch )
cieLchToCIELab
Array RGBColorSystem.cieLchToCIELab( Number L, Number c, Number h )
Array RGBColorSystem.cieLchToCIELab( Array Lch )
Number RGBColorSystem.value( Number r, Number g, Number b )
Number RGBColorSystem.value( Array rgb )
intensity
Number RGBColorSystem.intensity( Number r, Number g, Number b )
Number RGBColorSystem.intensity( Array rgb )
hue
Number RGBColorSystem.hue( Number r, Number g, Number b )
Number RGBColorSystem.hue( Array rgb )
hsvSaturation
Number RGBColorSystem.hsvSaturation( Number r, Number g, Number b )
Number RGBColorSystem.hsvSaturation( Array rgb )
hsiSaturation
Number RGBColorSystem.hsiSaturation( Number r, Number g, Number b )
Number RGBColorSystem.hsiSaturation( Array rgb )
rgbToHSV
Array RGBColorSystem.rgbToHSV( Number r, Number g, Number b )
Array RGBColorSystem.rgbToHSV( Array rgb )
hsvToRGB
Array RGBColorSystem.hsvToRGB( Number h, Number s, Number v )
Array RGBColorSystem.hsvToRGB( Array hsv )
rgbToHSI
Array RGBColorSystem.rgbToHSI( Number r, Number g, Number b )
Array RGBColorSystem.rgbToHSI( Array rgb )
hsiToRGB
Array RGBColorSystem.hsiToRGB( Number h, Number s, Number i )
Array RGBColorSystem.hsiToRGB( Array hsi )
instantiating RGBColorSystem: internal error
RGBColorSystem.Finalize
RGBColorSystem.RGBColorSystem
invalid x vector length
invalid y vector length
invalid Y vector length
invalid gamma value
RGBColorSystem.Get
luminance
RGBColorSystem.assign
RGBColorSystem.lightness
invalid vector length
RGBColorSystem.rgbToCIEXYZ
RGBColorSystem.cieXYZToRGB
RGBColorSystem.cieXYZToCIELab
RGBColorSystem.rgbToCIELab
RGBColorSystem.cieLabToRGB
RGBColorSystem.cieLabToCIEXYZ
RGBColorSystem.cieLabToCIELch
RGBColorSystem.rgbToCIELch
RGBColorSystem.cieLchToRGB
RGBColorSystem.cieLchToCIELab
RGBColorSystem.value
RGBColorSystem.intensity
RGBColorSystem.hue
RGBColorSystem.hsvSaturation
RGBColorSystem.hsiSaturation
RGBColorSystem.rgbToHSV
RGBColorSystem.hsvToRGB
RGBColorSystem.rgbToHSI
RGBColorSystem.hsiToRGB
Rect
Number Rect.x0
Number Rect.left
Number Rect.y0
Number Rect.top
Number Rect.x1
Number Rect.right
Number Rect.y1
Number Rect.bottom
leftTop
Point Rect.leftTop
rightTop
Point Rect.rightTop
leftBottom
Point Rect.leftBottom
rightBottom
Point Rect.rightBottom
Point Rect.center
Number Rect.width
Number Rect.height
perimeter
Number Rect.perimeter
area
Number Rect.area
hypot
Number Rect.hypot
diagonal
Number Rect.diagonal
isPoint
Boolean Rect.isPoint
isLine
Boolean Rect.isLine
isHorizontalLine
Boolean Rect.isHorizontalLine
isVerticalLine
Boolean Rect.isVerticalLine
isPointOrLine
Boolean Rect.isPointOrLine
isRect
Boolean Rect.isRect
isNormal
Boolean Rect.isNormal
isOrdered
Boolean Rect.isOrdered
new Rect()
new Rect( Number x0, Number y0, Number x1, Number y1 )
new Rect( Number width, Number height )
new Rect( Number d )
new Rect( Rect r )
void Rect.assign( Rect r )
void Rect.assign( Number v )
void Rect.assign( Number width, Number height )
void Rect.assign( Number x0, Number y0, Number x1, Number y1 )
order
void Rect.order()
ordered
Rect Rect.ordered()
void Rect.transform( Matrix M )
Rect Rect.transformed( Matrix M )
void Rect.translate( Point p )
void Rect.translate( Number x[, Number y=x] )
void Rect.translateBy( Point d )
void Rect.translateBy( Number dx[, Number dy=dx] )
Rect Rect.translated( Point p )
Rect Rect.translated( Number x[, Number y=x] )
Rect Rect.translatedBy( Point d )
Rect Rect.translatedBy( Number dx[, Number dy=dx] )
void Rect.moveTo( Point p )
void Rect.moveTo( Number x[, Number y=x] )
Rect Rect.movedTo( Point p )
Rect Rect.movedTo( Number x[, Number y=x] )
void Rect.moveBy( Point d )
void Rect.moveBy( Number dx[, Number dy=dx] )
Rect Rect.movedBy( Point d )
Rect Rect.movedBy( Number dx[, Number dy=dx] )
void Rect.rotate( Number angleRadians[, Point center=0] )
void Rect.rotate( Number sin, Number cos[, Point center=0] )
void Rect.rotate( Number angleRadians, Number xc, Number yc )
void Rect.rotate( Number sin, Number cos, Number xc, Number yc )
Rect Rect.rotated( Number angleRadians[, Point center=0] )
Rect Rect.rotated( Number sin, Number cos[, Point center=0] )
Rect Rect.rotated( Number angleRadians, Number xc, Number yc )
Rect Rect.rotated( Number sin, Number cos, Number xc, Number yc )
void Rect.symmetrize()
Rect Rect.symmetric()
resizeTo
void Rect.resizeTo( Number width[, Number height=width] )
resizedTo
Rect Rect.resizedTo( Number width[, Number height=width] )
resizeBy
void Rect.resizeBy( Point d )
void Rect.resizeBy( Number dx[, Number dy=dx] )
resizedBy
Rect Rect.resizedBy( Point d )
Rect Rect.resizedBy( Number dx[, Number dy=dx] )
inflateBy
void Rect.inflateBy( Point d )
void Rect.inflateBy( Number dx[, Number dy=dx] )
inflatedBy
Rect Rect.inflatedBy( Point d )
Rect Rect.inflatedBy( Number dx[, Number dy=dx] )
deflateBy
void Rect.deflateBy( Point d )
void Rect.deflateBy( Number dx[, Number dy=dx] )
deflatedBy
Rect Rect.deflatedBy( Point d )
Rect Rect.deflatedBy( Number dx[, Number dy=dx] )
void Rect.round( [uint n=0] )
Rect Rect.rounded( [uint n=0] )
clipCode
uint32 Rect.clipCode( Point p )
uint32 Rect.clipCode( Number x, Number y )
includes
Boolean Rect.includes( Point p )
Boolean Rect.includes( Number x, Number y )
intersects
Boolean Rect.intersects( Rect r )
Boolean Rect.intersects( Number x0, Number y0, Number x1, Number y1 )
unite
void Rect.unite( Rect r )
void Rect.unite( Number x0, Number y0, Number x1, Number y1 )
union
Rect Rect.union( Rect r )
Rect Rect.union( Number x0, Number y0, Number x1, Number y1 )
intersect
void Rect.intersect( Rect r )
void Rect.intersect( Number x0, Number y0, Number x1, Number y1 )
intersection
Rect Rect.intersection( Rect r )
Rect Rect.intersection( Number x0, Number y0, Number x1, Number y1 )
void Rect.add( Rect r )
void Rect.add( Point p )
void Rect.add( Number x[, Number y=x] )
void Rect.add( Number x0, Number y0, Number x1, Number y1 )
void Rect.sub( Rect r )
void Rect.sub( Point p )
void Rect.sub( Number x[, Number y=x] )
void Rect.sub( Number x0, Number y0, Number x1, Number y1 )
void Rect.mul( Rect r )
void Rect.mul( Point p )
void Rect.mul( Number x[, Number y=x] )
void Rect.mul( Number x0, Number y0, Number x1, Number y1 )
void Rect.div( Rect r )
void Rect.div( Point p )
void Rect.div( Number x[, Number y=x] )
void Rect.div( Number x0, Number y0, Number x1, Number y1 )
Boolean Rect.isEqualTo( Rect r )
Boolean Rect.isEqualTo( Point p0, Point p1 )
Boolean Rect.isEqualTo( Number x0, Number y0, Number x1, Number y1 )
Boolean Rect.isEqualTo( Number scalar )
Boolean Rect.isLessThan( Rect r )
Boolean Rect.isLessThan( Point p0, Point p1 )
Boolean Rect.isLessThan( Number x0, Number y0, Number x1, Number y1 )
Boolean Rect.isLessThan( Number scalar )
String Rect.toString()
Array Rect.toArray()
instantiating Rect: internal error
Rect.Finalize
Rect.Rect
manhattanDistance
Rect.Get
Rect.Set
Rect.assign
Rect.order
Rect.ordered
Rect.transform
Rect.transformed
Rect.translate
Rect.translateBy
Rect.translated
Rect.translatedBy
Rect.rotate
Rect.rotated
Rect.symmetrize
Rect.symmetric
Rect.resizeTo
Rect.resizedTo
Rect.resizeBy
Rect.resizedBy
Rect.inflateBy
Rect.inflatedBy
Rect.deflateBy
Rect.deflatedBy
Rect.round
Rect.rounded
Rect.clipCode
Rect.includes
Rect.intersects
Rect.unite
Rect.union
Rect.intersect
Rect.intersection
Rect.add
Rect.sub
Rect.mul
Rect.div
Rect.isEqualTo
Rect.isLessThan
Rect.toString
[%lf,%lf,%lf,%lf]
Rect.toArray
The JavaScript runtime is already initialized.
Failed to initialize the JavaScript runtime.
Failed to create the JavaScript context.
<end><cbr><br>JavaScript runtime initialized.
JavaScript Runtime
<end><cbr><br><b>Regenerating JavaScript runtime:</b>
<end><cbr><br>* Rebuilding core JavaScript objects...
<end><cbr><br>* Rebuilding external JavaScript objects...
<end><cbr><br>* Running initialization scripts...
<end><cbr><br>* Regenerating Object Browser interface...
<end><cbr><br>done.
null
Internal error: Invalid script data.
Empty script.
Source code MD5 checksum mismatch: Expected 
JavaScript compiled ok.
*** Error (strict)
 [%03u]: 
String SVG.filePath
ByteArray SVG.outputData
Rect SVG.size
int SVG.width
int SVG.height
int SVG.resolution
String SVG.description
String SVG.title
Rect SVG.viewBox
Boolean SVG.isPainting
new SVG( String filePath[, int width, int height] )
new SVG( [int width, int height] )
SVG.Finalize
SVG.SVG
empty SVG file path
SVG.Get
SVG.Set
illegal operation while the SVG object is being painted on
ScrollBox.Get
ScrollBox.Set
ScrollBox
autoScroll
Boolean ScrollBox.autoScroll
horizontalAutoScroll
Boolean ScrollBox.horizontalAutoScroll
verticalAutoScroll
Boolean ScrollBox.verticalAutoScroll
tracking
Boolean ScrollBox.tracking
horizontalTracking
Boolean ScrollBox.horizontalTracking
verticalTracking
Boolean ScrollBox.verticalTracking
scrollPosition
Point ScrollBox.scrollPosition
horizontalScrollPosition
int ScrollBox.horizontalScrollPosition
verticalScrollPosition
int ScrollBox.verticalScrollPosition
minHorizontalScrollPosition
int ScrollBox.minHorizontalScrollPosition
maxHorizontalScrollPosition
int ScrollBox.maxHorizontalScrollPosition
minVerticalScrollPosition
int ScrollBox.minVerticalScrollPosition
maxVerticalScrollPosition
int ScrollBox.maxVerticalScrollPosition
scrollBarsVisible
Boolean ScrollBox.scrollBarsVisible
horizontalScrollBarVisible
Boolean ScrollBox.horizontalScrollBarVisible
verticalScrollBarVisible
Boolean ScrollBox.verticalScrollBarVisible
lineHeight
int ScrollBox.lineHeight
int ScrollBox.lineWidth
pageHeight
int ScrollBox.pageHeight
pageWidth
int ScrollBox.pageWidth
Control ScrollBox.viewport
onHorizontalScrollPosUpdated
void ScrollBox.onHorizontalScrollPosUpdated( int newPos )
onHorizontalScrollRangeUpdated
void ScrollBox.onHorizontalScrollRangeUpdated( int minPos, int maxPos )
onVerticalScrollPosUpdated
void ScrollBox.onVerticalScrollPosUpdated( int newPos )
onVerticalScrollRangeUpdated
void ScrollBox.onVerticalScrollRangeUpdated( int minPos, int maxPos )
new ScrollBox( [Control parent] )
showScrollBars
void ScrollBox.showScrollBars( [Boolean show=true] )
void ScrollBox.showScrollBars( Boolean showHorz, Boolean showVert )
hideScrollBars
void ScrollBox.hideScrollBars( [Boolean hide=true] )
void ScrollBox.hideScrollBars( Boolean hideHorz, Boolean hideVert )
setHorizontalScrollRange
void ScrollBox.setHorizontalScrollRange( int min, int max )
setVerticalScrollRange
void ScrollBox.setVerticalScrollRange( int min, int max )
setScrollPosition
void ScrollBox.setScrollPosition( int x, int y )
void ScrollBox.setScrollPosition( Point pos )
ScrollBox.Finalize
ScrollBox.ScrollBox
1horizontalScrollPosUpdatedEvent( int )
1verticalScrollPosUpdatedEvent( int )
1horizontalScrollRangeUpdatedEvent( int, int )
1verticalScrollRangeUpdatedEvent( int, int )
ScrollBox.showScrollBars
ScrollBox.hideScrollBars
ScrollBox.setHorizontalScrollRange
ScrollBox.setVerticalScrollRange
ScrollBox.setScrollPosition
Settings
lastReadOK
Boolean Settings.lastReadOK
canReadGlobal
Boolean Settings.canReadGlobal( String key )
canWriteGlobal
Boolean Settings.canWriteGlobal( String key )
Object Settings.read( String key, int dataType )
readGlobal
Object Settings.readGlobal( String key, int dataType )
void Settings.write( String key, int dataType, Object x )
writeGlobal
void Settings.writeGlobal( String key, int dataType, Object x )
Boolean Settings.remove( String key )
removeGlobal
Boolean Settings.removeGlobal( String key )
Native Boolean type
8-bit signed integer
8-bit unsigned integer
16-bit signed integer
16-bit unsigned integer
32-bit signed integer
32-bit unsigned integer
64-bit signed integer
64-bit unsigned integer
DataType_Float
#define DataType_Float 9
32-bit IEEE 754 floating point
DataType_Double
#define DataType_Double 10
64-bit IEEE 754 floating point
DataType_String
#define DataType_String 13
UTF-8 or ISO 8859-1 string (8-bit characters)
UTF-16 string (16-bit characters)
Native ByteArray type
Settings.Get
Settings.canReadGlobal
Settings.canWriteGlobal
Settings.read
Settings.readGlobal
Unknown global settings key: 
Settings.write
Settings.writeGlobal
Global variables are write-protected for script access
Settings.remove
Settings.removeGlobal
ShepardInterpolation
Boolean ShepardInterpolation.isValid
power
uint ShepardInterpolation.power
Number ShepardInterpolation.radius
new ShepardInterpolation()
void ShepardInterpolation.initialize( Vector x, Vector y, Vector z )
void ShepardInterpolation.initialize( Rect r, Vector x, Vector y, Vector z )
void ShepardInterpolation.clear()
Number ShepardInterpolation.evaluate( Number x, Number y )
Number ShepardInterpolation.evaluate( Point p )
Vector ShepardInterpolation.evaluate( Array points )
instantiating ShepardInterpolation: internal error
ShepardInterpolation.Finalize
ShepardInterpolation.ShepardInterpolation
ShepardInterpolation.Get
ShepardInterpolation.Set
ShepardInterpolation.initialize
ShepardInterpolation::Initialize(): At least three input nodes must be specified.
ShepardInterpolation::Initialize(): Empty or insignificant interpolation space.
ShepardInterpolation::Initialize(): Less than three input nodes left after sanitization.
ShepardInterpolation::Initialize(): Less than three input nodes in the specified search region.
ShepardInterpolation.clear
ShepardInterpolation.evaluate
isHorizontal
Boolean Sizer.isHorizontal
isVertical
Boolean Sizer.isVertical
unsigned Sizer.numberOfItems
parentControl
Control Sizer.parentControl
Number Sizer.displayPixelRatio
unsigned Sizer.margin
scaledMargin
unsigned Sizer.scaledMargin
unscaledMargin
unsigned Sizer.unscaledMargin
spacing
unsigned Sizer.spacing
scaledSpacing
unsigned Sizer.scaledSpacing
unscaledSpacing
unsigned Sizer.unscaledSpacing
new Sizer( [Boolean vertical] )
void Sizer.add( Control[, int stretchFactor[, int alignment]] )
void Sizer.add( Sizer[, int stretchFactor] )
void Sizer.insert( int index, Control[, int stretchFactor[, int alignment]] )
void Sizer.insert( int index, Sizer[, int stretchFactor] )
void Sizer.remove( Control )
void Sizer.remove( Sizer )
addSpacing
void Sizer.addSpacing( int size[, Boolean autoScaling=true] )
addScaledSpacing
void Sizer.addScaledSpacing( int size )
addUnscaledSpacing
void Sizer.addUnscaledSpacing( int size )
addStretch
void Sizer.addStretch( [int stretchFactor] )
insertSpacing
void Sizer.insertSpacing( int index, int size[, Boolean autoScaling=true] )
insertScaledSpacing
void Sizer.insertScaledSpacing( int index, int size )
insertUnscaledSpacing
void Sizer.insertUnscaledSpacing( int index, int size )
insertStretch
void Sizer.insertStretch( int index[, int stretchFactor] )
Boolean Sizer.has( Control )
Boolean Sizer.has( Sizer )
int Sizer.indexOf( Control )
int Sizer.indexOf( Sizer )
setAlignment
void Sizer.setAlignment( Control, int alignment )
void Sizer.setAlignment( Sizer, int alignment )
setStretchFactor
void Sizer.setStretchFactor( Control, int stretch )
void Sizer.setStretchFactor( Sizer, int stretch )
int Sizer.logicalPixelsToPhysical( Number size )
int Sizer.physicalPixelsToLogical( Number size )
Align_Expand
#define Align_Expand 0
The item can be expanded to occupy the available space
Align_Left
#define Align_Left 1
The item aligns to the left side of the available space
Align_Top
#define Align_Top Align_Left
The item aligns to the top side of the available space
Align_Right
#define Align_Right 2
The item aligns to the right side of the available space
Align_Bottom
#define Align_Bottom Align_Right
The item aligns to the bottom side of the available space
Align_Center
#define Align_Center 3
The item aligns centered within the available space
Align_Default
#define Align_Default Align_Expand
Default alignment
Sizer.Finalize
Sizer.Sizer
Sizer.Get
Sizer.Set
Sizer.add
Sizer.insert
Sizer.remove
Sizer.addSpacing
Sizer.addScaledSpacing
Sizer.addUnscaledSpacing
Sizer.addStretch
Sizer.insertSpacing
Sizer.insertScaledSpacing
Sizer.insertUnscaledSpacing
Sizer.insertStretch
Sizer.has
Sizer.indexOf
Sizer.setAlignment
Sizer.setStretchFactor
Sizer.logicalPixelsToPhysical
Sizer.physicalPixelsToLogical
Slider.Get
Slider.Set
Slider
int Slider.value
normalizedValue
double Slider.normalizedValue
minValue
int Slider.minValue
maxValue
int Slider.maxValue
stepSize
int Slider.stepSize
int Slider.pageSize
tickStyle
int Slider.tickStyle
tickInterval
int Slider.tickInterval
Boolean Slider.tracking
onRangeUpdated
void Slider.onRangeUpdated( int minValue, int maxValue )
onValueUpdated
void Slider.onValueUpdated( int value )
new Slider( [Control parent[, Boolean vertical=false]] )
setRange
void Slider.setRange( int minValue, int maxValue )
TickStyle_NoTicks
#define TickStyle_NoTicks 0x00
TickStyle_Top
#define TickStyle_Top 0x01
TickStyle_Left
#define TickStyle_Left TickStyle_Top
TickStyle_Bottom
#define TickStyle_Bottom 0x02
TickStyle_Right
#define TickStyle_Right TickStyle_Bottom
TickStyle_BothSides
#define TickStyle_BothSides TickStyle_Top|TickStyle_Bottom
Slider.Finalize
Slider.Slider
1valueUpdatedEvent( int )
1rangeUpdatedEvent( int, int )
Slider.setRange
SpinBox.Get
SpinBox.Set
SpinBox
int SpinBox.value
double SpinBox.normalizedValue
int SpinBox.minValue
int SpinBox.maxValue
int SpinBox.stepSize
prefix
String SpinBox.prefix
String SpinBox.suffix
minimumValueText
String SpinBox.minimumValueText
wrapping
Boolean SpinBox.wrapping
editable
Boolean SpinBox.editable
alignment
int SpinBox.alignment
autoAdjustWidth
Boolean SpinBox.autoAdjustWidth
void SpinBox.onValueUpdated( int value )
void SpinBox.onRangeUpdated( int minValue, int maxValue )
new SpinBox( [Control parent] )
void SpinBox.setRange( int minValue, int maxValue )
SpinBox.Finalize
SpinBox.SpinBox
SpinBox.setRange
StarPosition
Number StarPosition.alpha
rightAscension
Number StarPosition.rightAscension
Number StarPosition.delta
declination
Number StarPosition.declination
muAlpha
Number StarPosition.muAlpha
properMotionRA
Number StarPosition.properMotionRA
muDelta
Number StarPosition.muDelta
properMotionDec
Number StarPosition.properMotionDec
parallax
Number StarPosition.parallax
radialVelocity
Number StarPosition.radialVelocity
epoch
Date StarPosition.epoch
new StarPosition( Number alpha, Number delta[, Number muAlpha = 0[, Number muDelta = 0[, Number parallax = 0[, Number radialVelocity = 0[, Date|String|Number epoch = 2451545.0]]]]] )
StarPosition.Finalize
StarPosition.StarPosition
StarPosition.Get
StarPosition.Set
Function String.constructor
uint String.length
String String.prototype
new String( [value=""] )
'string-literal'
"string-literal"
charAt
String String.charAt( uint index )
charCodeAt
uint16 String.charCodeAt( uint index )
String String.concat( String s2, String s3[, ..., String sN] )
contains
Boolean String.contains( String searchValue[, uint fromIndex] )
endsWith
Boolean String.endsWith( String searchValue[, uint length] )
int String.indexOf( String searchValue[, uint fromIndex] )
int String.lastIndexOf( String searchValue[, uint fromIndex] )
localeCompare
int String.localeCompare( String compareString )
match
Array String.match( RegExp exp )
quote
String String.quote()
repeat
String String.repeat( uint n )
String String.replace( RegExp|String, String|Function[, String flags] )
search
int String.search( RegExp exp )
String String.slice( int begin[, int end] )
split
Array String.split( [String separator[, uint limit]] )
startsWith
Boolean String.startsWith( String searchValue[, uint fromIndex] )
substr
String String.substr( uint start[, uint length] )
substring
String String.substring( uint startIndex[, uint endIndex] )
toLocaleLowerCase
String String.toLocaleLowerCase()
toLocaleUpperCase
String String.toLocaleUpperCase()
toLowerCase
String String.toLowerCase()
String String.toSource()
String String.toString()
toUpperCase
String String.toUpperCase()
String String.trim()
trimLeft
String String.trimLeft()
trimRight
String String.trimRight()
String String.valueOf()
fromCharCode
String String.fromCharCode( uint16 c1[, uint16 c2[, ..., uint16 cN]] )
toBoolean
Boolean String.toBoolean()
tryToBoolean
Boolean|null String.tryToBoolean()
toFloat
Number String.toFloat()
tryToFloat
Number|null String.tryToFloat()
toDouble
Number String.toDouble()
tryToDouble
Number|null String.tryToDouble()
toNumber
Number String.toNumber()
tryToNumber
Number|null String.tryToNumber()
toInt
int String.toInt( [int base=0] )
tryToInt
int|null String.tryToInt( [int base=0] )
toUInt
uint String.toUInt( [int base=0] )
tryToUInt
uint|null String.tryToUInt( [int base=0] )
toInt64
[lsw,msw] String.toInt64( [int base=0] )
tryToInt64
[lsw,msw]|null String.tryToInt64( [int base=0] )
toUInt64
[lsw,msw] String.toUInt64( [int base=0] )
tryToUInt64
[lsw,msw]|null String.tryToUInt64( [int base=0] )
unquote
String String.unquote()
String.toBoolean
String.tryToBoolean
String.toFloat
String.tryToFloat
String.toInt
String.tryToInt
String.toUInt
String.tryToUInt
String.toInt64
String.tryToInt64
String.toUInt64
String.tryToUInt64
String.unquote
SurfaceSimplifier
tolerance
Number SurfaceSimplifier.tolerance
rejectFraction
Number SurfaceSimplifier.rejectFraction
rejectionEnabled
Boolean SurfaceSimplifier.rejectionEnabled
centroidInclusionEnabled
Boolean SurfaceSimplifier.centroidInclusionEnabled
new SurfaceSimplifier( [Number tolerance = 0.01] )
simplify
Array SurfaceSimplifier.simplify( Vector x, Vector y, Vector z )
instantiating SurfaceSimplifier: internal error
SurfaceSimplifier.Finalize
SurfaceSimplifier.SurfaceSimplifier
SurfaceSimplifier.Get
SurfaceSimplifier.Set
SurfaceSimplifier.simplify
SurfaceSpline
Boolean SurfaceSpline.isValid
uint SurfaceSpline.length
uint SurfaceSpline.order
smoothing
Number SurfaceSpline.smoothing
new SurfaceSpline()
new SurfaceSpline( SurfaceSpline S )
void SurfaceSpline.assign( SurfaceSpline S )
void SurfaceSpline.initialize( Vector x, Vector y, Vector z[, Vector w] )
void SurfaceSpline.clear()
Number SurfaceSpline.evaluate( Number x, Number y )
Number SurfaceSpline.evaluate( Point p )
Vector SurfaceSpline.evaluate( Array points )
instantiating SurfaceSpline: internal error
SurfaceSpline.Finalize
SurfaceSpline.SurfaceSpline
SurfaceSpline.Get
SurfaceSpline.Set
SurfaceSpline.initialize
Invalid weights vector length in surface spline initialization.
SurfaceSpline.clear
SurfaceSpline.assign
SurfaceSpline.evaluate
TabBox.Get
TabBox.Set
TabBox
currentPageIndex
int TabBox.currentPageIndex
currentPageControl
Control TabBox.currentPageControl
numberOfPages
int TabBox.numberOfPages
tabPosition
int TabBox.tabPosition
leftControl
Control TabBox.leftControl
rightControl
Control TabBox.rightControl
onPageSelected
void TabBox.onPageSelected( int pageIndex )
new TabBox( [Control parent] )
addPage
void TabBox.addPage( Control page, String label[, Bitmap icon] )
insertPage
void TabBox.insertPage( int index, Control page, String label[, Bitmap icon] )
removePage
void TabBox.removePage( int index )
enablePage
void TabBox.enablePage( int index[, Boolean enable=true] )
disablePage
void TabBox.disablePage( int index[, Boolean disable=true] )
isPageEnabled
bool TabBox.isPageEnabled( int index )
pageIcon
Bitmap TabBox.pageIcon( int index )
setPageIcon
void TabBox.setPageIcon( int index, Bitmap icon )
clearPageIcon
void TabBox.clearPageIcon( int index )
pageLabel
String TabBox.pageLabel( int index )
setPageLabel
void TabBox.setPageLabel( int index, String label )
pageToolTip
String TabBox.pageToolTip( int index )
setPageToolTip
void TabBox.setPageToolTip( int index, String tip )
clearControls
void TabBox.clearControls( [Boolean clearLeft, Boolean clearRight] )
pageControlByIndex
Control TabBox.pageControlByIndex( int index )
TabBox.Finalize
TabBox.TabBox
1pageSelectedEvent( int )
TabBox.addPage
TabBox.insertPage
TabBox.removePage
TabBox.enablePage
TabBox.disablePage
TabBox.isPageEnabled
TabBox.pageIcon
TabBox.setPageIcon
TabBox.clearPageIcon
TabBox.pageLabel
TabBox.setPageLabel
TabBox.pageToolTip
TabBox.setPageToolTip
TabBox.clearControls
TabBox.pageControlByIndex
TextBox.Get
TextBox.Set
TextBox
String TextBox.text
int TextBox.caretPosition
int TextBox.selectionStart
int TextBox.selectionEnd
String TextBox.selectedText
Boolean TextBox.hasSelection
Boolean TextBox.readOnly
void TextBox.onCaretPositionUpdated()
void TextBox.onSelectionUpdated()
void TextBox.onTextUpdated()
new TextBox( [Control parent] )
void TextBox.insert( String text )
void TextBox.clear()
void TextBox.end()
void TextBox.home()
void TextBox.selectAll()
void TextBox.unselect()
TextBox.Finalize
TextBox.TextBox
1textUpdatedEvent()
1caretPositionUpdatedEvent()
TextBox.insert
TextBox.clear
TextBox.end
TextBox.home
TextBox.selectAll
TextBox.unselect
Timer.Get
Timer.Set
interval
Number Timer.interval
singleShot
Boolean Timer.singleShot
periodic
Boolean Timer.periodic
Boolean Timer.isRunning
uint Timer.count
onTimeout
void Timer.onTimeout()
new Timer( [Number interval=1.0[, Boolean periodic=true]] )
void Timer.start()
stop
void Timer.stop()
Timer.Finalize
Timer.Timer
1timeoutEvent()
Timer.start
Timer.stop
parentTree
TreeBox TreeBoxNode.parentTree
TreeBoxNode TreeBoxNode.parent
numberOfChildren
uint TreeBoxNode.numberOfChildren
Boolean TreeBoxNode.enabled
expanded
Boolean TreeBoxNode.expanded
selectable
Boolean TreeBoxNode.selectable
selected
Boolean TreeBoxNode.selected
Boolean TreeBoxNode.checkable
Boolean TreeBoxNode.checked
new TreeBoxNode()
new TreeBoxNode( TreeBox[, int idx] )
new TreeBoxNode( TreeBoxNode[, int idx] )
child
TreeBoxNode TreeBoxNode.child( int index )
void TreeBoxNode.add( TreeBoxNode node )
void TreeBoxNode.insert( int index, TreeBoxNode node )
void TreeBoxNode.remove( int index )
String TreeBoxNode.text( int col )
setText
void TreeBoxNode.setText( int col, String txt )
Bitmap TreeBoxNode.icon( int col )
setIcon
void TreeBoxNode.setIcon( int col, Bitmap icon )
clearIcon
void TreeBoxNode.clearIcon( int col )
int TreeBoxNode.alignment( int col )
void TreeBoxNode.setAlignment( int col, int align )
String TreeBoxNode.toolTip( int col )
setToolTip
void TreeBoxNode.setToolTip( int col, String tip )
Font TreeBoxNode.font( int col )
setFont
void TreeBoxNode.setFont( int col, Font font )
uint32 TreeBoxNode.backgroundColor( int col )
setBackgroundColor
void TreeBoxNode.setBackgroundColor( int col, uint32 rgba )
uint32 TreeBoxNode.textColor( int col )
setTextColor
void TreeBoxNode.setTextColor( int col, uint32 rgba )
TreeBox.Get
TreeBox.Get1
TreeBox.Get2
TreeBox.Get3
TreeBox.Set
TreeBox.Set1
TreeBox.Set2
TreeBox.Set3
TreeBox
int TreeBox.numberOfChildren
currentNode
TreeBoxNode TreeBox.currentNode
multipleSelection
Boolean TreeBox.multipleSelection
selectedNodes
Array TreeBox.selectedNodes
numberOfColumns
int TreeBox.numberOfColumns
indentSize
int TreeBox.indentSize
nodeExpansion
Boolean TreeBox.nodeExpansion
rootDecoration
Boolean TreeBox.rootDecoration
alternateRowColor
Boolean TreeBox.alternateRowColor
uniformRowHeight
Boolean TreeBox.uniformRowHeight
int TreeBox.iconWidth
int TreeBox.iconHeight
headerVisible
Boolean TreeBox.headerVisible
headerSorting
Boolean TreeBox.headerSorting
nodeDragging
Boolean TreeBox.nodeDragging
onCurrentNodeUpdated
void TreeBox.onCurrentNodeUpdated( TreeBoxNode currentItem, TreeBoxNode oldItem )
onNodeActivated
void TreeBox.onNodeActivated( TreeBoxNode item, int columnIndex )
onNodeUpdated
void TreeBox.onNodeUpdated( TreeBoxNode item, int columnIndex )
onNodeEntered
void TreeBox.onNodeEntered( TreeBoxNode item, int columnIndex )
onNodeClicked
void TreeBox.onNodeClicked( TreeBoxNode item, int columnIndex )
onNodeDoubleClicked
void TreeBox.onNodeDoubleClicked( TreeBoxNode item, int columnIndex )
onNodeExpanded
void TreeBox.onNodeExpanded( TreeBoxNode item )
onNodeCollapsed
void TreeBox.onNodeCollapsed( TreeBoxNode item )
onNodeSelectionUpdated
void TreeBox.onNodeSelectionUpdated()
new TreeBox( [Control parent] )
TreeBoxNode TreeBox.child( int idx )
childIndex
int TreeBox.childIndex( TreeBoxNode node )
void TreeBox.insert( int idx, TreeBoxNode node )
void TreeBox.add( TreeBoxNode node )
void TreeBox.remove( int idx )
void TreeBox.clear()
selectAllNodes
void TreeBox.selectAllNodes()
nodeByPosition
TreeBoxNode TreeBox.nodeByPosition( Point p )
TreeBoxNode TreeBox.nodeByPosition( int x, int y )
setNodeIntoView
void TreeBox.setNodeIntoView( TreeBoxNode )
nodeRect
Rect TreeBox.nodeRect( TreeBoxNode )
setIconSize
void TreeBox.setIconSize( int width, int height )
void TreeBox.setIconSize( int size )
isColumnVisible
Boolean TreeBox.isColumnVisible( int col )
showColumn
void TreeBox.showColumn( int col[, Boolean show=true] )
hideColumn
void TreeBox.hideColumn( int col[, Boolean hide=true] )
columnWidth
int TreeBox.columnWidth( int col )
setColumnWidth
void TreeBox.setColumnWidth( int col, int width )
adjustColumnWidthToContents
void TreeBox.adjustColumnWidthToContents( int col )
headerText
String TreeBox.headerText( int col )
setHeaderText
void TreeBox.setHeaderText( int col, String txt )
headerIcon
Bitmap TreeBox.headerIcon( int col )
setHeaderIcon
void TreeBox.setHeaderIcon( int col, Bitmap icon )
headerAlignment
int TreeBox.headerAlignment( int col )
setHeaderAlignment
void TreeBox.setHeaderAlignment( int col, int align )
void TreeBox.sort( [int col=0[, Boolean ascending=true]] )
TreeBoxNode.Finalize
TreeBoxNode.TreeBoxNode
Invalid TreeBoxNode parent object
TreeBoxNode.Get
TreeBoxNode.Set
TreeBoxNode.child
TreeBoxNode.add
TreeBoxNode.insert
TreeBoxNode.remove
TreeBoxNode.text
TreeBoxNode.setText
TreeBoxNode.icon
TreeBoxNode.setIcon
TreeBoxNode.clearIcon
TreeBoxNode.alignment
TreeBoxNode.setAlignment
TreeBoxNode.toolTip
TreeBoxNode.setToolTip
TreeBoxNode.font
TreeBoxNode.setFont
TreeBoxNode.backgroundColor
TreeBoxNode.setBackgroundColor
TreeBoxNode.textColor
TreeBoxNode.setTextColor
TreeBox.Finalize
TreeBox.TreeBox
1currentNodeUpdatedEvent( QTreeWidgetItem*, QTreeWidgetItem* )
1nodeActivatedEvent( QTreeWidgetItem*, int )
1nodeUpdatedEvent( QTreeWidgetItem*, int )
1nodeEnteredEvent( QTreeWidgetItem*, int )
1nodeClickedEvent( QTreeWidgetItem*, int )
1nodeDoubleClickedEvent( QTreeWidgetItem*, int )
1nodeExpandedEvent( QTreeWidgetItem* )
1nodeCollapsedEvent( QTreeWidgetItem* )
1nodeSelectionUpdatedEvent()
TreeBox.child
TreeBox.childIndex
TreeBox.insert
TreeBox.add
TreeBox.remove
TreeBox.clear
TreeBox.selectAllNodes
TreeBox.nodeByPosition
TreeBox.setNodeIntoView
TreeBox.nodeRect
TreeBox.setIconSize
TreeBox.isColumnVisible
TreeBox.showColumn
TreeBox.hideColumn
TreeBox.columnWidth
TreeBox.setColumnWidth
TreeBox.adjustColumnWidthToContents
TreeBox.headerText
TreeBox.setHeaderText
TreeBox.headerIcon
TreeBox.setHeaderIcon
TreeBox.headerAlignment
TreeBox.setHeaderAlignment
TreeBox.sort
TypeDescription
Boolean TypeDescription.isNull
String TypeDescription.id
hasProperties
Boolean TypeDescription.hasProperties
Array TypeDescription.properties
hasStaticProperties
Boolean TypeDescription.hasStaticProperties
staticProperties
Array TypeDescription.staticProperties
hasEventHandlers
Boolean TypeDescription.hasEventHandlers
eventHandlers
Array TypeDescription.eventHandlers
hasConstructors
Boolean TypeDescription.hasConstructors
constructors
Array TypeDescription.constructors
hasMethods
Boolean TypeDescription.hasMethods
methods
Array TypeDescription.methods
hasStaticMethods
Boolean TypeDescription.hasStaticMethods
staticMethods
Array TypeDescription.staticMethods
hasConstants
Boolean TypeDescription.hasConstants
Array TypeDescription.constants
inherits
Boolean TypeDescription.inherits
objectsInherited
Array TypeDescription.objectsInherited
objectsInheriting
Array TypeDescription.objectsInheriting
isCoreObject
Boolean TypeDescription.isCoreObject
isExternalObject
Boolean TypeDescription.isExternalObject
new TypeDescription( String id )
inheritsFrom
Boolean TypeDescription.inheritsFrom( String objectId )
inheritedBy
Boolean TypeDescription.inheritedBy( String objectId )
Array TypeDescription.objects
coreObjects
Array TypeDescription.coreObjects
externalObjects
Array TypeDescription.externalObjects
objectDefined
Boolean TypeDescription.objectDefined( String objectId )
enterDefinitionContext
void TypeDescription.enterDefinitionContext()
leaveDefinitionContext
void TypeDescription.leaveDefinitionContext()
beginObjectDefinition
void TypeDescription.beginObjectDefinition( String objectId )
endObjectDefinition
void TypeDescription.endObjectDefinition()
defineIncludedFile
void TypeDescription.defineIncludedFile( String formalDescription )
clearAll
void TypeDescription.clearAll()
inherit
void TypeDescription.inherit( String objectId )
void TypeDescription.defineProperty( String formalDescription[, Boolean readOnly=false] )
defineStaticProperty
void TypeDescription.defineStaticProperty( String formalDescription[, Boolean readOnly=false] )
defineEventHandler
void TypeDescription.defineEventHandler( String formalDescription )
defineConstructor
void TypeDescription.defineConstructor( String formalDescription )
defineMethod
void TypeDescription.defineMethod( String formalDescription )
defineStaticMethod
void TypeDescription.defineStaticMethod( String formalDescription )
defineConstant
void TypeDescription.defineConstant( String formalDescription )
TypeDescription.Finalize
TypeDescription.TypeDescription
invalid object identifier
TypeDescription.Get
TypeDescription.inheritsFrom
TypeDescription.inheritedBy
TypeDescription.objectDefined
TypeDescription.enterDefinitionContext
already in a definition context
TypeDescription.leaveDefinitionContext
not in a definition context
an object is still being defined
TypeDescription.beginObjectDefinition
already in object definition mode
TypeDescription.endObjectDefinition
no object is being defined
TypeDescription.clearAll
TypeDescription.inherit
attempt to derive an object from itself
TypeDescription.defineIncludedFile
missing include formal description
#include
invalid included file formal description: missing '#include' directive
invalid included file formal description: missing header file
invalid included file formal description: bad header file specification
TypeDescription.defineProperty
missing property formal description
invalid property formal description: no data type specified
invalid property formal description: no parent object specified
invalid property formal description: missing parent object identifier
invalid property formal description: attempt to define a property of another object '
invalid property formal description: missing property identifier
TypeDescription.defineStaticProperty
TypeDescription.defineEventHandler
missing event handler formal description
invalid method formal description: no return data type specified
invalid method formal description: no parent object specified
invalid method formal description: missing parent object identifier
invalid method formal description: attempt to define a method of another object '
invalid method formal description: missing left parenthesis
invalid method formal description: missing right parenthesis
invalid method formal description: extra tokens after right parenthesis
invalid method formal description: missing method identifier
TypeDescription.defineConstructor
invalid constructor formal description: mMissing 'new' operator
invalid constructor formal description: missing left parenthesis
invalid constructor formal description: missing right parenthesis
invalid constructor formal description: extra tokens after right parenthesis
invalid constructor formal description: missing object identifier
invalid constructor formal description: attempt to define a constructor of another object '
TypeDescription.defineMethod
TypeDescription.defineStaticMethod
TypeDescription.defineConstant
#define
invalid predefined constant formal description: missing '#define' directive
invalid predefined constant formal description: missing macro identifier
invalid predefined constant formal description: missing macro value
Vector
int Vector.length
Boolean Vector.isEmpty
int Vector.lowerBound
int Vector.upperBound
new Vector()
new Vector( int length )
new Vector( Number value, int length )
new Vector( Vector v[, int startIndex=0[, int endIndex=v.length]] )
new Vector( Array a[, int startIndex=0[, int endIndex=a.length]] )
new Vector( TypedArray a[, int startIndex=0[, int endIndex=a.length]] )
void Vector.assign( Number value )
void Vector.assign( Number value, int length )
void Vector.assign( Vector v[, int startIndex=0[, int endIndex=v.length]] )
void Vector.assign( Array a[, int startIndex=0[, int endIndex=a.length]] )
void Vector.assign( TypedArray a[, int startIndex=0[, int endIndex=a.length]] )
void Vector.swap( Vector v )
Boolean Vector.isEqualTo( Vector v )
Boolean Vector.isLessThan( Vector v )
Number Vector.at( int index )
void Vector.at( int index, Number value )
void Vector.add( Number s )
void Vector.add( Vector v )
void Vector.sub( Number s )
void Vector.sub( Vector v )
void Vector.mul( Number s )
void Vector.mul( Vector v )
Number Vector.dot( Vector v )
dotProduct
Number Vector.dotProduct( Vector v )
cross
Vector Vector.cross( Vector v )
crossProduct
Vector Vector.crossProduct( Vector v )
void Vector.div( Number s )
void Vector.div( Vector v )
void Vector.pow( Number s )
Vector Vector.abs()
Vector Vector.sqr()
Vector Vector.sqrt()
void Vector.setAbs()
void Vector.setSqr()
void Vector.setSqrt()
Number Vector.norm( [Number p=2] )
l1norm
Number Vector.l1norm()
l2norm
Number Vector.l2norm()
unit
Vector Vector.unit()
setUnit
void Vector.setUnit()
void Vector.reverse()
void Vector.sort()
int Vector.linearSearch( Number value[, int startIndex=0[, int endIndex=length]] )
int Vector.binarySearch( Number value[, int startIndex=0[, int endIndex=length]] )
minComponent
Number Vector.minComponent()
maxComponent
Number Vector.maxComponent()
orderStatistic
Number Vector.orderStatistic( int k )
Number Vector.sum()
Number Vector.modulus()
Number Vector.sumOfSquares()
Number Vector.mean()
Number Vector.stableSum()
Number Vector.stableModulus()
Number Vector.stableSumOfSquares()
Number Vector.stableMean()
Number Vector.trimmedMean( [int l=1[, int h=1]] )
Number Vector.trimmedMeanOfSquares( [int l=1[, int h=1]] )
Number Vector.median()
Number Vector.stdDev()
Number Vector.variance()
Number Vector.avgDev( [Number center=median()] )
Number Vector.stableAvgDev( [Number center=median()] )
Array Vector.twoSidedAvgDev( [Number center=median()] )
Number Vector.MAD( [Number center=median()] )
Array Vector.twoSidedMAD( [Number center=median()] )
Number Vector.biweightMidvariance( [Number center=median()[, Number sigma=MAD()[, int k=9[, Boolean reducedLength=false]]]] )
Number Vector.BWMV( [Number center=median()[, Number sigma=MAD()[, int k=9[, Boolean reducedLength=false]]]] )
Array Vector.twoSidedBiweightMidvariance( [Number center=median()[, Array|Number sigma=twoSidedMAD()[, int k=9[, Boolean reducedLength=false]]]] )
Array Vector.twoSidedBWMV( [Number center=median()[, Array|Number sigma=twoSidedMAD()[, int k=9[, Boolean reducedLength=false]]]] )
Number Vector.bendMidvariance( [Number center=median()[, Number beta=0.2]] )
Number Vector.PBMV( [Number center=median()[, Number beta=0.2]] )
Number Vector.Sn()
Number Vector.Qn()
void Vector.setRandom()
toSpherical
Array Vector.toSpherical()
toSpherical2Pi
Array Vector.toSpherical2Pi()
fromSpherical
Vector Vector.fromSpherical( Number longitude, Number latitude )
Vector Vector.fromSpherical( Number slon, Number clon, Number slat, Number clat )
Array Vector.toArray( [int startIndex=0[, int endIndex=length]] )
Float32Array Vector.toFloat32Array( [int startIndex=0[, int endIndex=length]] )
Float64Array Vector.toFloat64Array( [int startIndex=0[, int endIndex=length]] )
instantiating Vector: internal error
Vector.Finalize
Vector.Vector
expected a Vector, Array, or typed array object
Vector.Get
Vector.assign
Vector.swap
Vector.isEqualTo
Vector.isLessThan
Vector.at
Vector.add
Vector.sub
Invalid vector subtraction.
Vector.mul
Invalid vector multiplication.
Vector.dot
Vector.cross
invalid vector dimensions in cross product
Vector.div
Invalid vector division.
Vector.pow
Vector.abs
Vector.sqr
Vector.sqrt
Vector.setAbs
Vector.setSqr
Vector.setSqrt
Vector.norm
Vector.l1norm
Vector.l2norm
Vector.unit
Vector.setUnit
Vector.reverse
Vector.sort
Vector.linearSearch
Vector.binarySearch
Vector.minComponent
Vector.maxComponent
Vector.orderStatistic
Vector.sum
Vector.modulus
Vector.sumOfSquares
Vector.mean
Vector.stableSum
Vector.stableModulus
Vector.stableSumOfSquares
Vector.stableMean
Vector.trimmedMean
Vector.trimmedMeanOfSquares
Vector.median
Vector.stdDev
Vector.variance
Vector.avgDev
Vector.stableAvgDev
Vector.twoSidedAvgDev
Vector.MAD
Vector.twoSidedMAD
Vector.biweightMidvariance
Vector.twoSidedBiweightMidvariance
Vector.bendMidvariance
Vector.Sn
Vector.Qn
Vector.setRandom
Vector.toSpherical
Vector.toSpherical2Pi
Vector.toArray
Vector.toFloat32Array
Vector.toFloat64Array
Vector.fromSpherical
VectorGraphics
Pen VectorGraphics.pen
Brush VectorGraphics.brush
Point VectorGraphics.brushOrigin
Font VectorGraphics.font
Brush VectorGraphics.backgroundBrush
Boolean VectorGraphics.transparentBackground
int VectorGraphics.compositionOperator
Number VectorGraphics.opacity
Boolean VectorGraphics.antialiasing
Boolean VectorGraphics.textAntialiasing
Boolean VectorGraphics.smoothInterpolation
Boolean VectorGraphics.clipping
Rect VectorGraphics.clipRect
Boolean VectorGraphics.transformationEnabled
Matrix VectorGraphics.transformationMatrix
Boolean VectorGraphics.isPainting
new VectorGraphics()
new VectorGraphics( Bitmap bmp )
new VectorGraphics( SVG svg )
new VectorGraphics( PDF pdf )
new VectorGraphics( Control ctr )
void VectorGraphics.multiplyTransformation( Matrix T )
void VectorGraphics.rotateTransformation( Number angleRadians )
void VectorGraphics.scaleTransformation( Number sx[, Number sy] )
void VectorGraphics.translateTransformation( Point d )
void VectorGraphics.translateTransformation( Number dx, Number dy )
void VectorGraphics.shearTransformation( Number sx[, Number sy] )
void VectorGraphics.resetTransformation()
Point VectorGraphics.transformed( Point p )
Point VectorGraphics.transformed( Number x, Number y )
void VectorGraphics.begin( Bitmap bmp )
void VectorGraphics.begin( SVG svg )
void VectorGraphics.begin( PDF pdf )
void VectorGraphics.begin( Control ctr )
void VectorGraphics.end()
void VectorGraphics.pushState()
void VectorGraphics.popState()
void VectorGraphics.drawPoint( Point p )
void VectorGraphics.drawPoint( Number x, Number y )
void VectorGraphics.drawLine( Point p0, Point p1 )
void VectorGraphics.drawLine( Number x0, Number y0, Number x1, Number y1 )
void VectorGraphics.drawRect( Rect r )
void VectorGraphics.drawRect( Number x0, Number y0, Number x1, Number y1 )
void VectorGraphics.strokeRect( Rect r[, Pen pen] )
void VectorGraphics.strokeRect( Number x0, Number y0, Number x1, Number y1[, Pen pen] )
void VectorGraphics.fillRect( Rect r[, Brush brush] )
void VectorGraphics.fillRect( Number x0, Number y0, Number x1, Number y1[, Brush brush] )
void VectorGraphics.eraseRect( Rect r )
void VectorGraphics.eraseRect( Number x0, Number y0, Number x1, Number y1 )
void VectorGraphics.drawRoundedRect( Rect r[, Number rx=25[, Number ry=25]] )
void VectorGraphics.drawRoundedRect( Number x0, Number y0, Number x1, Number y1[, Number rx=25[, Number ry=25]] )
void VectorGraphics.strokeRoundedRect( Rect r[, Number rx=25[, Number ry=25[, Pen pen]]] )
void VectorGraphics.strokeRoundedRect( Number x0, Number y0, Number x1, Number y1[, Number rx=25[, Number ry=25[, Pen pen]]] )
void VectorGraphics.fillRoundedRect( Rect r[, Number rx=25[, Number ry=25[, Brush brush]]] )
void VectorGraphics.fillRoundedRect( Number x0, Number y0, Number x1, Number y1[, Number rx=25[, Number ry=25[, Brush brush]]] )
void VectorGraphics.eraseRoundedRect( Rect r[, Number rx=25[, Number ry=25]] )
void VectorGraphics.eraseRoundedRect( Number x0, Number y0, Number x1, Number y1[, Number rx=25[, Number ry=25]] )
void VectorGraphics.drawEllipse( Rect r )
void VectorGraphics.drawEllipse( Number x0, Number y0, Number x1, Number y1 )
void VectorGraphics.strokeEllipse( Rect r[, Pen pen] )
void VectorGraphics.strokeEllipse( Number x0, Number y0, Number x1, Number y1[, Pen pen] )
void VectorGraphics.fillEllipse( Rect r[, Brush brush] )
void VectorGraphics.fillEllipse( Number x0, Number y0, Number x1, Number y1[, Brush brush] )
void VectorGraphics.eraseEllipse( Rect r )
void VectorGraphics.eraseEllipse( Number x0, Number y0, Number x1, Number y1 )
void VectorGraphics.drawCircle( Point center, Number radius )
void VectorGraphics.drawCircle( Number xc, Number yc, Number radius )
void VectorGraphics.strokeCircle( Point center, Number radius[, Pen pen] )
void VectorGraphics.strokeCircle( Number xc, Number yc, Number radius[, Pen pen] )
void VectorGraphics.fillCircle( Point center, Number radius[, Brush brush] )
void VectorGraphics.fillCircle( Number xc, Number yc, Number radius[, Brush brush] )
void VectorGraphics.eraseCircle( Point center, Number radius )
void VectorGraphics.eraseCircle( Number xc, Number yc, Number radius )
void VectorGraphics.drawPolygon( Array points[, int fillRule] )
void VectorGraphics.strokePolygon( Array points[, int fillRule[, Pen pen]] )
void VectorGraphics.fillPolygon( Array points[, int fillRule[, Brush brush]] )
void VectorGraphics.erasePolygon( Array points[, int fillRule] )
void VectorGraphics.drawPolyline( Array points )
void VectorGraphics.drawEllipticArc( Rect r, Number startRadians, Number spanRadians )
void VectorGraphics.drawEllipticArc( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians )
void VectorGraphics.drawArc( Point center, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.drawArc( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.drawEllipticChord( Rect r, Number startRadians, Number spanRadians )
void VectorGraphics.drawEllipticChord( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians )
void VectorGraphics.strokeEllipticChord( Rect r, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.strokeEllipticChord( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.fillEllipticChord( Rect r, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.fillEllipticChord( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.eraseEllipticChord( Rect r, Number startRadians, Number spanRadians )
void VectorGraphics.eraseEllipticChord( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians )
void VectorGraphics.drawChord( Point center, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.drawChord( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.strokeChord( Point center, Number radius, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.strokeChord( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.fillChord( Point center, Number radius, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.fillChord( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.eraseChord( Point center, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.eraseChord( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.drawEllipticPie( Rect r, Number startRadians, Number spanRadians )
void VectorGraphics.drawEllipticPie( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians )
void VectorGraphics.strokeEllipticPie( Rect r, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.strokeEllipticPie( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.fillEllipticPie( Rect r, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.fillEllipticPie( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.eraseEllipticPie( Rect r, Number startRadians, Number spanRadians )
void VectorGraphics.eraseEllipticPie( Number x0, Number y0, Number x1, Number y1, Number startRadians, Number spanRadians )
void VectorGraphics.drawPie( Point center, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.drawPie( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.strokePie( Point center, Number radius, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.strokePie( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians[, Pen pen] )
void VectorGraphics.fillPie( Point center, Number radius, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.fillPie( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians[, Brush brush] )
void VectorGraphics.erasePie( Point center, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.erasePie( Number cx, Number cy, Number radius, Number startRadians, Number spanRadians )
void VectorGraphics.drawBitmap( Point p, Bitmap bmp )
void VectorGraphics.drawBitmap( Number x, Number y, Bitmap bmp )
void VectorGraphics.drawBitmapRect( Point p, Bitmap bmp, Rect r )
void VectorGraphics.drawBitmapRect( Number x, Number y, Bitmap bmp, Number x0, Number y0, Number x1, Number y1 )
void VectorGraphics.drawScaledBitmap( Rect r, Bitmap bmp )
void VectorGraphics.drawScaledBitmap( Number x0, Number y0, Number x1, Number y1, Bitmap bmp )
void VectorGraphics.drawScaledBitmapRect( Rect rdst, Bitmap bmp, Rect rsrc )
void VectorGraphics.drawScaledBitmapRect( Number dx0, Number dy0, Number dx1, Number dy1, Bitmap bmp, Number sx0, Number sy0, Number sx1, Number sy1 )
void VectorGraphics.drawTiledBitmap( Rect r, Bitmap bmp[, Point origin=0] )
void VectorGraphics.drawTiledBitmap( Number x0, Number y0, Number x1, Number y1, Bitmap bmp[, Number ox=0, Number oy=0] )
void VectorGraphics.drawText( Point p, String text )
void VectorGraphics.drawText( Number x, Number y, String text )
void VectorGraphics.drawTextRect( Rect r, String text[, int align] )
void VectorGraphics.drawTextRect( Number x0, Number y0, Number x1, Number y1, String text[, int align] )
Rect VectorGraphics.textRect( Rect r, String text[, int align] )
Rect VectorGraphics.textRect( Number x0, Number y0, Number x1, Number y1, String text[, int align] )
VectorGraphics.Finalize
VectorGraphics.VectorGraphics
VectorGraphics.Get
VectorGraphics.Set
VectorGraphics.multiplyTransformation
VectorGraphics.rotateTransformation
VectorGraphics.scaleTransformation
VectorGraphics.translateTransformation
VectorGraphics.shearTransformation
VectorGraphics.resetTransformation
VectorGraphics.transformed
VectorGraphics.begin
VectorGraphics.end
VectorGraphics.pushState
VectorGraphics.popState
VectorGraphics.drawPoint
VectorGraphics.drawLine
VectorGraphics.drawRect
VectorGraphics.strokeRect
VectorGraphics.fillRect
VectorGraphics.eraseRect
VectorGraphics.drawRoundedRect
VectorGraphics.strokeRoundedRect
VectorGraphics.fillRoundedRect
VectorGraphics.eraseRoundedRect
VectorGraphics.drawEllipse
VectorGraphics.strokeEllipse
VectorGraphics.fillEllipse
VectorGraphics.eraseEllipse
VectorGraphics.drawCircle
VectorGraphics.strokeCircle
VectorGraphics.fillCircle
VectorGraphics.eraseCircle
VectorGraphics.drawPolygon
VectorGraphics.strokePolygon
VectorGraphics.fillPolygon
VectorGraphics.erasePolygon
VectorGraphics.drawPolyline
VectorGraphics.drawEllipticArc
VectorGraphics.drawArc
VectorGraphics.drawEllipticChord
VectorGraphics.strokeEllipticChord
VectorGraphics.fillEllipticChord
VectorGraphics.eraseEllipticChord
VectorGraphics.drawChord
VectorGraphics.strokeChord
VectorGraphics.fillChord
VectorGraphics.eraseChord
VectorGraphics.drawEllipticPie
VectorGraphics.strokeEllipticPie
VectorGraphics.fillEllipticPie
VectorGraphics.eraseEllipticPie
VectorGraphics.drawPie
VectorGraphics.strokePie
VectorGraphics.fillPie
VectorGraphics.erasePie
VectorGraphics.drawBitmap
VectorGraphics.drawBitmapRect
VectorGraphics.drawScaledBitmap
VectorGraphics.drawScaledBitmapRect
VectorGraphics.drawTiledBitmap
VectorGraphics.drawText
VectorGraphics.drawTextRect
VectorGraphics.textRect
String View.id
fullId
String View.fullId
String View.uniqueId
ImageWindow View.window
Image View.image
isView
Boolean View.isView
Boolean View.isNull
isMainView
Boolean View.isMainView
isPreview
Boolean View.isPreview
isVirtual
Boolean View.isVirtual
Array View.stf
Array View.properties
ProcessContainer View.processing
ProcessContainer View.initialProcessing
uint View.historyIndex
canGoForward
Boolean View.canGoForward
canGoBackward
Boolean View.canGoBackward
new View()
new View( View )
new View( String viewId )

beginProcess
void View.beginProcess( [uint undoFlags] )
endProcess
void View.endProcess()
cancelProcess
void View.cancelProcess()
propertyValue
Object|null View.propertyValue( String id )
setPropertyValue
Boolean View.setPropertyValue( String id, Object value[, uint type[, uint attributes]] )
computeProperty
Object|null View.computeProperty( String id )
computeOrFetchProperty
Object|null View.computeOrFetchProperty( String id )
propertyType
uint|null View.propertyType( String id )
propertyAttributes
uint|null View.propertyAttributes( String id )
setPropertyAttributes
Boolean View.setPropertyAttributes( String id, uint attributes )
hasProperty
Boolean View.hasProperty( String id )
deleteProperty
Boolean View.deleteProperty( String id )
importProperties
String View.importProperties( FileFormatInstance )
exportProperties
int View.exportProperties( FileFormatInstance )
viewById
View View.viewById( String id )
PropertyType_Invalid
#define PropertyType_Invalid 0
PropertyType_Auto
#define PropertyType_Auto 0
PropertyType_Boolean
#define PropertyType_Boolean 1
PropertyType_Int8
#define PropertyType_Int8 2
PropertyType_Int16
#define PropertyType_Int16 3
PropertyType_Short
#define PropertyType_Short PropertyType_Int16
PropertyType_Int32
#define PropertyType_Int32 4
PropertyType_Int
#define PropertyType_Int PropertyType_Int32
PropertyType_Int64
#define PropertyType_Int64 5
PropertyType_UInt8
#define PropertyType_UInt8 6
PropertyType_Byte
#define PropertyType_Byte PropertyType_UInt8
PropertyType_UInt16
#define PropertyType_UInt16 7
PropertyType_UShort
#define PropertyType_UShort PropertyType_UInt16
PropertyType_UInt32
#define PropertyType_UInt32 8
PropertyType_UInt
#define PropertyType_UInt PropertyType_UInt32
PropertyType_UInt64
#define PropertyType_UInt64 9
PropertyType_Float32
#define PropertyType_Float32 10
PropertyType_Real32
#define PropertyType_Real32 PropertyType_Float32
PropertyType_Float64
#define PropertyType_Float64 11
PropertyType_Real64
#define PropertyType_Real64 PropertyType_Float64
PropertyType_Complex32
#define PropertyType_Complex32 12
PropertyType_Complex64
#define PropertyType_Complex64 13
PropertyType_TimePoint
#define PropertyType_TimePoint 14
PropertyType_I8Vector
#define PropertyType_I8Vector 20
PropertyType_UI8Vector
#define PropertyType_UI8Vector 21
PropertyType_ByteVector
#define PropertyType_ByteVector PropertyType_UI8Vector
PropertyType_I16Vector
#define PropertyType_I16Vector 22
PropertyType_ShortVector
#define PropertyType_ShortVector PropertyType_I16Vector
PropertyType_UI16Vector
#define PropertyType_UI16Vector 23
PropertyType_UShortVector
#define PropertyType_UShortVector PropertyType_UI16Vector
PropertyType_I32Vector
#define PropertyType_I32Vector 24
PropertyType_IVector
#define PropertyType_IVector PropertyType_I32Vector
PropertyType_UI32Vector
#define PropertyType_UI32Vector 25
PropertyType_UIVector
#define PropertyType_UIVector PropertyType_UI32Vector
PropertyType_I64Vector
#define PropertyType_I64Vector 26
PropertyType_UI64Vector
#define PropertyType_UI64Vector 27
PropertyType_F32Vector
#define PropertyType_F32Vector 28
PropertyType_F64Vector
#define PropertyType_F64Vector 29
PropertyType_C32Vector
#define PropertyType_C32Vector 30
PropertyType_C64Vector
#define PropertyType_C64Vector 31
PropertyType_I8Matrix
#define PropertyType_I8Matrix 32
PropertyType_UI8Matrix
#define PropertyType_UI8Matrix 33
PropertyType_ByteMatrix
#define PropertyType_ByteMatrix PropertyType_UI8Matrix
PropertyType_I16Matrix
#define PropertyType_I16Matrix 34
PropertyType_ShortMatrix
#define PropertyType_ShortMatrix PropertyType_I16Matrix
PropertyType_UI16Matrix
#define PropertyType_UI16Matrix 35
PropertyType_UShortMatrix
#define PropertyType_UShortMatrix PropertyType_UI16Matrix
PropertyType_I32Matrix
#define PropertyType_I32Matrix 36
PropertyType_IMatrix
#define PropertyType_IMatrix PropertyType_I32Matrix
PropertyType_UI32Matrix
#define PropertyType_UI32Matrix 37
PropertyType_UIMatrix
#define PropertyType_UIMatrix PropertyType_UI32Matrix
PropertyType_I64Matrix
#define PropertyType_I64Matrix 38
PropertyType_UI64Matrix
#define PropertyType_UI64Matrix 39
PropertyType_F32Matrix
#define PropertyType_F32Matrix 40
PropertyType_F64Matrix
#define PropertyType_F64Matrix 41
PropertyType_C32Matrix
#define PropertyType_C32Matrix 42
PropertyType_C64Matrix
#define PropertyType_C64Matrix 43
PropertyType_ByteArray
#define PropertyType_ByteArray 44
PropertyType_String16
#define PropertyType_String16 45
PropertyType_String
#define PropertyType_String PropertyType_String16
PropertyType_UCString
#define PropertyType_UCString PropertyType_String16
PropertyType_String8
#define PropertyType_String8 46
PropertyType_IsoString
#define PropertyType_IsoString PropertyType_String8
PropertyType_UTF8String
#define PropertyType_UTF8String PropertyType_String8
PropertyAttribute_WriteProtected
#define PropertyAttribute_WriteProtected 0x00000001
PropertyAttribute_ReadProtected
#define PropertyAttribute_ReadProtected 0x00000002
PropertyAttribute_Volatile
#define PropertyAttribute_Volatile 0x00000010
PropertyAttribute_Permanent
#define PropertyAttribute_Permanent 0x00000020
PropertyAttribute_NotSerializable
#define PropertyAttribute_NotSerializable 0x00000040
PropertyAttribute_Storable
#define PropertyAttribute_Storable 0x00000080
PropertyAttribute_Reserved
#define PropertyAttribute_Reserved 0x10000000
PropertyAttribute_NoChange
#define PropertyAttribute_NoChange 0x80000000
View.Finalize
View.View
View.Get
View.Set
insufficient array length
null view
View.beginProcess
the view is already being processed
View.endProcess
the view is not being processed
View.cancelProcess
View.propertyValue
View.setPropertyValue
View.computeProperty
' is not a reserved property identifier
View.computeOrFetchProperty
View.propertyType
View.propertyAttributes
View.setPropertyAttributes
View.hasProperty
View.deleteProperty
View.importProperties
The file format cannot store image properties: 
View.exportProperties
Unable to initiate image property embedding
Failed to embed image property '
View.viewById
ViewList.Get
ViewList.Set
ViewList
View ViewList.currentView
excludedView
View ViewList.excludedView
includesMainViews
Boolean ViewList.includesMainViews
includesPreviews
Boolean ViewList.includesPreviews
excludeIdentifiersPattern
String ViewList.excludeIdentifiersPattern
onCurrentViewUpdated
void ViewList.onCurrentViewUpdated( View view )
onViewSelected
void ViewList.onViewSelected( View view )
new ViewList( [Control parent] )
getAll
void getAll()
getMainViews
void getMainViews()
getPreviews
void getPreviews()
reload
void reload()
void remove( View view )
ViewList.Finalize
ViewList.ViewList
1viewSelectedEvent( View* )
1currentViewUpdatedEvent()
ViewList.getAll
ViewList.getMainViews
ViewList.getPreviews
ViewList.reload
ViewList.remove
WebView.Get
WebView.Set
WebView
Boolean hasSelection
String selectedText
Number zoomFactor
uint backgroundColor
onLoadStarted
void WebView.onLoadStarted()
onLoadProgress
void WebView.onLoadProgress( int progress )
onLoadFinished
void WebView.onLoadFinished( Boolean ok )
void WebView.onSelectionUpdated()
onPlainTextAvailable
void WebView.onPlainTextAvailable( String text )
onHTMLAvailable
void WebView.onHTMLAvailable( String html )
onScriptResultAvailable
void WebView.onScriptResultAvailable( Object value )
new WebView( [Control parent] )
setContent
void WebView.setContent( ByteArray data[, String mimeType] )
setHTML
void WebView.setHTML( String html )
setPlainText
void WebView.setPlainText( String text )
loadContent
void WebView.loadContent( String url )
requestPlainText
void WebView.requestPlainText()
requestHTML
void WebView.requestHTML()
saveAsPDF
void WebView.saveAsPDF( String filePath[, Number pageWidth = 210[, Number pageHeight = 297[, Number marginLeft = 10[, Number marginTop = 10[, Number marginRight = 10[, Number marginBottom = 10[, Boolean landscape = false]]]]]]] )
void WebView.reload()
void WebView.stop()
evaluateScript
void WebView.evaluateScript( String sourceCode[, String language = "JavaScript"] )
WebView.Finalize
WebView.WebView
WebView.setContent
WebView.setHTML
text/html;charset=UTF-8
WebView.setPlainText
text/plain;charset=UTF-8
WebView.loadContent
invalid URL
WebView.requestPlainText
WebView.requestHTML
WebView.saveAsPDF
WebView.reload
WebView.stop
WebView.evaluateScript
%4d%02d%02d%02d%02d%02d
%4d/%02d/%02d %02d:%02d:%02d
Invalid or corrupted license data.
PixInsight - Wrong License
<p>You are running a commercial version of the PixInsight core application. However, a trial license is still being used on this machine.</p><p style="white-space:pre;">To activate your commercial license, the existing trial license file must be removed first.</p><p style="white-space:pre;">You can delete your trial license file manually, or we can delete it for you (recommended).</p><p style="white-space:pre;"><b>Do you want to delete your trial license file now?</b></p>
PixInsight - Trial License File Removed
<p style="white-space:pre;">Your trial PixInsight license file has been deleted.</p><p style="white-space:pre;">Please run the PixInsight core application again to activate your commercial license.</p>
User password:
<h2><b>Request License Activation Codes</b></h2><p>To use PixInsight on a machine where you don't have a valid license file (for example, on a new computer, after a system reinstall, or because your license file has been erased or damaged), you have to reactivate your license. You can also use a license reactivation to move a trial license to a different machine.</p><p>In these cases you need new license activation codes. To request them, please enter your user credentials below, then click the OK button. If you have a valid PixInsight license, our system will send you an email with a verification link.</p><p>The email will be sent to the address that you have currently associated with your license, so please make sure our emails are not being blocked or rejected as spam by you or your email provider. Read the email and click the verification link if you want to reactivate your license, then you will receive a second email with new activation codes.</p>
User name:
Wrong User Credentials
<p>You have entered an empty user name or password.</p>
Unable to initialize network subsystem.
licenseType=c&userName=
https://pixinsight.com/cgi-bin/1.8.8/activation-codes-request.php
Network error: 
<p><b>Request operation failed.</b></p><p>Server information:</p>
License Activation Codes Requested
<p>We have sent a secure request to generate new license activation codes with the user credentials you have provided. If the data you entered are correct, you should receive a verification email shortly.</p><p>If you don't receive a verification email, then either you entered an incorrect user name or password, or our notification messages are being blocked or rejected by your email client application or your email provider. It may also happen that your license is associated with an invalid email address, or an email account that no longer exists or is no longer operative. Please contact us in such case.</p>
Activation code:
:/splash/activation-platform-logo-v.png
* { background: black; }
<h2><b>PixInsight Software Activation</b></h2><p style="white-space:pre;"><b>This copy of the PixInsight core application requires an online license activation.</b></p><p>If you have purchased or obtained a new software license (either a commercial or a trial license), you should have received an email message with your user identifier and a set of initial activation codes.</p><p>If you are upgrading from a version of PixInsight older than 1.8.6, or have installed the application on a different or reformatted machine, then you need new activation codes for your license. If you already haven't done so, you can request new license activation codes with our licensing system. For your convenience, you can also click the <i>Request Activation Codes</i> button below to perform the same action.</p><p>Please enter your user identifier and a valid activation code for macOS on the corresponding fields below, being careful to include just the identifier and code without any white space or control characters. Then make sure your computer is connected to the Internet, and click OK to activate this copy of PixInsight with our licensing server.</p>
User identifier:
<p><hr/><small>Copyright &copy; 2003-2020 Pleiades Astrophoto</small></p>
Request Activation Codes
 LE
You have manually canceled the software activation procedure.
</p><p>Please run the PixInsight core application again when you are ready to activate your license.</p>
https://pixinsight.com/cgi-bin/1.8.8/auth.php
<p>Invalid user identifier: '
'</p><p>A valid user identifier is a sequence of 16 decimal digits.</p>
<p>Invalid activation code: '
'</p><p>A valid activation code is a sequence of 40 decimal digits or letters.</p>
Invalid or corrupted server response.
Authentication error. Server response: '
%16u
PIABTContainer
:/splash/splash-about.png
QWidget#PIABTContainer {   background-image: url(
);}QWidget#PIABTContainer QLabel {   font-family: DejaVu Sans, Verdana, Arial, Helvetica, sans-serif;   font-size: 
%1
px;   color: #c0c0c0;   background: transparent;   border: none;   padding: 0;   margin: 0;}
<p><b>PixInsight %s Edition</b><br/>
Limited
Standard
Core version %d.%d.%d
 %s%d
RC
beta 
<br/>Copyright &copy; 2003-2020 Pleiades Astrophoto<br/><a href="https://pixinsight.com/" style="text-decoration: none; color: #c0c0c0;">https://pixinsight.com/</a></p>
PIACKContainer
:/splash/splash-ack.png
a { text-decoration: none; color: #d0d0d0; font-weight: bold; } 
QWidget#PIACKContainer {   background-image: url(
);}QTextEdit {   font-family: DejaVu Sans, Verdana, Arial, Helvetica, sans-serif;   font-size: 
px;   color: #d0d0d0;   background: transparent;   border: none;   padding: 0;   margin: 0;}QScrollBar {   border: none;   background: #303030;}QScrollBar::handle {   border: 
px solid #404040;   background: #505050;}QScrollBar::handle:hover, QScrollBar::handle:pressed {   border-color: #606060;   background: #808080;}QScrollBar::add-line, QScrollBar::sub-line {   background: #303030;}QScrollBar::left-arrow {   background-image: url(
:/qss/scrollbar-left-arrow-light.png
);   background-repeat: no-repeat;   background-position: center;}QScrollBar::right-arrow {   background-image: url(
:/qss/scrollbar-right-arrow-light.png
);   background-repeat: no-repeat;   background-position: center;}QScrollBar::up-arrow {   background-image: url(
:/qss/scrollbar-up-arrow-light.png
);   background-repeat: no-repeat;   background-position: center;}QScrollBar::down-arrow {   background-image: url(
:/qss/scrollbar-down-arrow-light.png
);   background-repeat: no-repeat;   background-position: center;}QScrollBar::left-arrow:hover,QScrollBar::left-arrow:pressed,QScrollBar::right-arrow:hover,QScrollBar::right-arrow:pressed,QScrollBar::up-arrow:hover,QScrollBar::up-arrow:pressed,QScrollBar::down-arrow:hover,QScrollBar::down-arrow:pressed {   border-color: #606060;   background-color: #909090;}
Version %d.%d.%d
<br/>Copyright &copy; 2003-2020 Pleiades Astrophoto<br/>All Rights Reserved.<br/><a href="https://pixinsight.com/" style="text-decoration: none; color: #c0c0c0;">https://pixinsight.com/</a></p>
<p>The PixInsight platform uses the <a href="http://www.qt.io/">Qt Library</a> by The Qt Company Ltd.</p><p>The PixInsight JavaScript Runtime (PJSR) uses the <a href="https://developer.mozilla.org/en/docs/SpiderMonkey">SpiderMonkey JavaScript engine</a> by Mozilla Corporation.</p><p>The digital camera RAW format support module uses the <a href="https://www.libraw.org/">LibRaw library</a> by LibRaw LLC.</p><p>The FITS format support module uses a custom adaptation of the <a href="http://heasarc.gsfc.nasa.gov/fitsio/">CFITSIO library</a> by NASA/HEASARC.</p><p>The TIFF format support module uses the <a href="http://simplesystems.org/libtiff/">LibTIFF library</a>, originally authored and maintained by Sam Leffler.</p><p>The JPEG format support module uses the <a href="http://www.ijg.org/">Independent JPEG Group's (IJG) library</a>, written by Thomas G. Lane and Guido Vollbeding.</p><p>The JPEG2000 format support module uses a custom adaptation of the <a href="http://www.ece.uvic.ca/~frodo/jasper/">JasPer library</a>, written by Michael Adams.</p><p>The GREYCstoration process module uses a custom adaptation of the <a href="http://cimg.sourceforge.net/">CImg library</a>, by David Tschumperl&eacute;.</p><p>The PixInsight core application uses the <a href="http://devernay.free.fr/hacks/cminpack/">C/C++ Minpack library</a> by Fr&eacute;d&eacute;ric Devernay, based on the original FORTRAN Minpack version written by Jorge Mor&eacute;, Burt Garbow and Ken Hillstrom from Argonne National Laboratory.</p><p>The PixInsight core application uses the <a href="https://github.com/mborgerding/kissfft">Kiss FFT library</a>, written by Mark Borgerding.</p><p>The PixInsight core application uses the <a href="http://www.littlecms.com/">Little Color Management System</a> (LittleCMS) by Marti Maria.</p><p>The PixInsight core application uses the <a href="http://curl.haxx.se/libcurl/">libcurl library</a>, written by Daniel Stenberg.</p><p>The PixInsight Class Library includes the <a href="http://www.zlib.net/">zlib library</a>, written by Jean-loup Gailly and Mark Adler.</p><p>The PixInsight Class Library includes the reference implementation of the <a href="https://lz4.github.io/lz4/">LZ4 compression algorithm</a>, created and written by Yann Collet.</p><p>The PixInsight Update System uses <a href="https://www.7-zip.org/">7-Zip software</a> by Igor Pavlov.</p><p>PixInsight integrates the <a href="http://www.gnuplot.info/">gnuplot graphing utility</a>, written by Thomas Williams, Colin Kelley, Russell Lang, Dave Kotz, John Campbell, Gershon Elber, Alexander Woo and many others.</p><p>All the artwork, icons and images included in the PixInsight core application and all standard modules have been created with the following software applications<br/><a href="http://inkscape.org/">Inkscape</a><br/><a href="http://www.gimp.org/">GNU Image Manipulation Program (GIMP)</a><br/><a href="http://www.scribus.net/">Scribus</a><br/><a href="http://www.axialis.com/iconworkshop/">Axialis IconWorkshop</a><br/><a href="http://pixinsight.com/">PixInsight</a></p><p>The PCL reference documentation has been created with the <a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a> utility, written by Dimitri van Heesch.</p><p>The PixInsight core application and all standard PixInsight modules have been written in the C++ programming language, and have been built with the following development tools:<br/><a href="http://gcc.gnu.org/">GNU Compiler Collection (GCC) C/C++ compiler version 9.3</a><br/><a href="http://clang.llvm.org/">CLang/LLVM C/C++ compiler version 11.0</a><br/><a href="http://www.visualstudio.com/">Microsoft Visual Studio 2019 Professional</a><br/><p>Most of the icons used in the PixInsight core application are based on the <a href="https://www.axialis.com/stock-icons/pure-flat-2013-toolbar.html">Pure Flat 2013 Toolbar</a> and <a href="https://www.axialis.com/icongenerator/stock-icons/flat-pro/">Flat Pro 2017</a> icon sets, by <a href="http://www.axialis.com/">Axialis Software</a></p><p>Fonts provided by <a href="http://www.myfonts.com/">MyFonts Inc.</a></p><p>The PixInsight core application uses the following typefaces:<br/><a href="https://myfonts.com/fonts/linotype/helvetica/">Helvetica Light</a> by Linotype<br/><a href="https://myfonts.com/fonts/efscangraphic/futura-sh/">FuturaSH-XLight</a> by Scangraphic Digital Type Collection<br/><a href="https://myfonts.com/fonts/insigne/steagal/">Steagal Thin</a> by Insigne Design<br/><a href="https://dejavu-fonts.github.io/">DejaVu Sans</a> by Bitstream<br/><a href="https://sourcefoundry.org/hack/">Hack</a> by Source Foundry</p><p>Virtualization software provided by <a href="http://www.vmware.com/">VMware Inc.</a></p><p>Hardware provided by:<br/><a href="http://www.amd.com/">Advanced Micro Devices, Inc.</a><br/><a href="http://www.intel.com/">Intel Corporation</a><br/><a href="http://www.asus.com/">ASUSTeK Computer Inc.</a><br/><a href="http://www.dell.com/">Dell Inc.</a><br/><a href="http://www.apple.com/">Apple Inc.</a><br/><a href="http://www.nvidia.com/">NVIDIA Corporation</a><br/><a href="http://www.samsung.com/">Samsung Semiconductor Corporation</a><br/><a href="http://www.westerndigital.com/">Western Digital Corporation</a></p><p>The PixInsight core application has been written on rural locations in Valencia, Spain, and Ourense (Galicia), Spain.</p><p><b>Thanks to:</b> All our good friends and families, who have supported us for many years; all the good music, movies, stories and books that have inspired us; all the good wine, bourbon and coffee that also have outstandingly inspired us; all the wild places where we have found rest and creativity; all the people who love and understand us; all PixInsight users, PixInsight developers, and PixInsight Forum members.</p><p><b>Also thanks to:</b> All of the arrogant people who constantly show us how we do not want to be, and where we do not want to go.</p>
AHWTitleBar
AHWTitle
AHWIcon
:/auto-hide/placement.png
Placement
1PlacementMenuAtTitleBarIcon()
:/auto-hide/expand.png
:/auto-hide/expand-active.png
Expand
1ToggleExpand()
:/auto-hide/stick.png
:/auto-hide/stick-active.png
Stick
1ToggleStick()
:/auto-hide/hide.png
Hide
1Hide()
:/auto-hide/close.png
1Close()
AHWResizer%d%d
border
topBorder
bottomBorder
leftBorder
rightBorder
AHWContainer
1AnimateGraphicsEffect()
1Show()
:/auto-hide/left-top.png
Left-Top
1LeftTop()
:/auto-hide/left-bottom.png
Left-Bottom
1LeftBottom()
:/auto-hide/right-top.png
Right-Top
1RightTop()
:/auto-hide/right-bottom.png
Right-Bottom
1RightBottom()
:/auto-hide/floating.png
Floating
1Float()
Translucent
1SetTranslucency( bool )
IWBrowseDocumentationButton
1AutoHide()
AHWSelector
1DelayedUnblockHide()
AHWSelectorTray
MWContainer
1CurrentWorkspaceChanged( int )
2Resized()
1UpdateGeometry()
/CentralWidgetClients/
2WidgetAdded( QWidget* )
1Added( QWidget* )
2WidgetRemoved( QWidget* )
1Removed( QWidget* )
2WidgetPositionChanged( QWidget*, AutoHideWidget::position_type, AutoHideWidget::position_type )
1PositionChanged( QWidget*, AutoHideWidget::position_type, AutoHideWidget::position_type )
2WidgetFlagsChanged( QWidget*, AutoHideOptions, AutoHideOptions )
1FlagsChanged( QWidget*, AutoHideOptions, AutoHideOptions )
2FloatingWidgetMoved( QWidget*, QPoint )
1FloatingPositionChanged( QWidget*, QPoint )
2FloatingWidgetResized( QWidget*, QSize )
1FloatingSizeChanged( QWidget*, QSize )
2WidgetResized( QWidget*, QSize )
1SizeChanged( QWidget*, QSize )
2WidgetTranslucencyChanged( QWidget*, bool )
1TranslucencyChanged( QWidget*, bool )
OnCentralWidget
AutoHidePosition
AutoHideFlags
FloatingPosX
FloatingPosY
FloatingWidth
FloatingHeight
AutoHideWidth
AutoHideHeight
<p>The clipboard does not contain image data, or it contains an image in an unsupported format.</p>
1show()
<p>The clipboard does not contain image data.</p><p><b>Do you want to empty it anyway?</b></p>
The clipboard is empty now.
:/process-interface/expand.png
EWExtendButton
1ToggleExtension()
2AboutToAddWidget( QWidget* )
1AboutToAddWidget( QWidget* )
2WidgetPositionAboutToChange( QWidget*, AutoHideWidget::position_type, AutoHideWidget::position_type )
1WidgetPositionAboutToChange( QWidget*, AutoHideWidget::position_type, AutoHideWidget::position_type )
:/process-interface/contract.png
Hide extension
Show extension
/ExtensibleWidgets/
ExtendedState
DockedExtendedState
FloatingExtendedState
LeftPanelWidth
RightPanelWidth
PanelHeight
/Global/FileDialogs/LoadProject/
/Global/FileDialogs/SaveProject/
1FileOpen_GetFilePaths()
1FileOpen_OpenScheduledFiles()
1FileOpenACopy_GetFilePaths()
<end><cbr><br><b>Reading %u image(s):</b>
Multiple files were selected. Continue loading them?
1FileSaveAs_GetFilePath()
1FileSave_SaveScheduledImageWindow()
1FileSaveAs_SaveScheduledImageWindow()
1FileLoadProject_GetFilePath()
PixInsight projects (*.pxiproject *.xosm)
Bundled PixInsight projects (*.pxiproject)
XML PixInsight project files (*.xosm)
Load PixInsight Project
1FileLoadProject_OpenScheduledFile()
1FileSaveProject_GetFilePathAndOptions()
1FileSaveProject_SaveScheduledFileAndOptions()
<p>All images, icons, scripts and open tools will be closed. The state of the whole PixInsight platform will be reset to default values.</p><p style="white-space:pre;"><b>This action is irreversible. Are you sure?</b></p>
<p>All images, icons, scripts and open tools will be closed, and the current set of workspaces will be replaced with a default set. The state of the whole PixInsight platform will be reset to default values.</p><p style="white-space:pre;"><b>This action is irreversible. Are you sure?</b></p>
