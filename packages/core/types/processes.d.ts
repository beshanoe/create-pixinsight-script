declare class ProcessInstance {
  constructor();
  assign: any;
  canExecuteGlobal: any;
  canExecuteOn: any;
  canLaunchInterface: any;
  canProcessGlobal: any;
  canProcessImages: any;
  canProcessViews: any;
  description: any;
  executeGlobal: any;
  executeOn: any;
  executionTime: any;
  isAssignable: any;
  isHistoryUpdater: any;
  isMaskable: any;
  launch: any;
  launchInterface: any;
  processCategory: any;
  processId: any;
  readIcon: any;
  setDescription: any;
  startJD: any;
  toSource: any;
  validate: any;
  writeIcon: any;
  writeInstanceAddr: any;
}

declare class ACDNR extends ProcessInstance {
  Median3x3: any;
  Median5x5: any;
  Multiscale: any;
  None: any;
  Recursive: any;
  UnweightedAverage3x3: any;
  WeightedAverage3x3: any;
  WeightedAverage5x5: any;
  amountC: any;
  amountL: any;
  applyToChrominance: any;
  applyToLightness: any;
  applyToLuminance: any;
  brightSidesOverdriveC: any;
  brightSidesOverdriveL: any;
  brightSidesThresholdC: any;
  brightSidesThresholdL: any;
  darkSidesOverdriveC: any;
  darkSidesOverdriveL: any;
  darkSidesThresholdC: any;
  darkSidesThresholdL: any;
  iterationsC: any;
  iterationsL: any;
  maskHighlightsClipping: any;
  maskMTF: any;
  maskRemovedWaveletLayers: any;
  maskShadowsClipping: any;
  minStructSizeC: any;
  minStructSizeL: any;
  prefilterMethodC: any;
  prefilterMethodL: any;
  previewMask: any;
  protectBrightSidesC: any;
  protectBrightSidesL: any;
  protectDarkSidesC: any;
  protectDarkSidesL: any;
  protectionMethodC: any;
  protectionMethodL: any;
  shapeC: any;
  shapeL: any;
  sigmaC: any;
  sigmaL: any;
  starProtectionC: any;
  starProtectionL: any;
  starThresholdC: any;
  starThresholdL: any;
  useMaskC: any;
  useMaskL: any;
}
declare class ATrousWaveletTransform extends ProcessInstance {
  AllPixelChanges: any;
  DecreasingPixels: any;
  Disabled: any;
  Hyperbolic: any;
  IncreasingPixels: any;
  Ln: any;
  Log10: any;
  NoFunction: any;
  curveBreakPoint: any;
  deringing: any;
  deringingBright: any;
  deringingDark: any;
  highRange: any;
  largeScaleFunction: any;
  layers: any;
  linear: any;
  lowRange: any;
  noiseThreshold: any;
  noiseThresholding: any;
  noiseThresholdingAmount: any;
  outputDeringingMaps: any;
  previewLayer: any;
  previewMode: any;
  scaleDelta: any;
  scalingFunctionColFilter: any;
  scalingFunctionData: any;
  scalingFunctionName: any;
  scalingFunctionNoiseSigma: any;
  scalingFunctionRowFilter: any;
  softThresholding: any;
  toChrominance: any;
  toLuminance: any;
  useMultiresolutionSupport: any;
}
declare class ATrousWaveletTransformV1 extends ProcessInstance {
  AllPixelChanges: any;
  DecreasingPixels: any;
  DirectionalMultiway: any;
  Disabled: any;
  Hyperbolic: any;
  IncreasingPixels: any;
  Ln: any;
  Log10: any;
  Morphological: any;
  NoFunction: any;
  Recursive: any;
  SignificantStructures: any;
  curveBreakPoint: any;
  highRange: any;
  largeScaleFunction: any;
  layers: any;
  linear: any;
  lowRange: any;
  noiseThreshold: any;
  noiseThresholdingAmount: any;
  previewLayer: any;
  previewMode: any;
  scaleDelta: any;
  scalingFunctionData: any;
  scalingFunctionKernelSize: any;
  scalingFunctionName: any;
  scalingFunctionNoiseLayers: any;
  scalingFunctionNoiseSigma: any;
  toChrominance: any;
  toLuminance: any;
  version: any;
}
declare class AdaptiveStretch extends ProcessInstance {
  maxCurvePoints: any;
  noiseThreshold: any;
  protection: any;
  roiX0: any;
  roiX1: any;
  roiY0: any;
  roiY1: any;
  useProtection: any;
  useROI: any;
}
declare class Annotation extends ProcessInstance {
  annotationColor: any;
  annotationFont: any;
  annotationFontBold: any;
  annotationFontItalic: any;
  annotationFontShadow: any;
  annotationFontSize: any;
  annotationFontUnderline: any;
  annotationLeaderPositionX: any;
  annotationLeaderPositionY: any;
  annotationOpacity: any;
  annotationPositionX: any;
  annotationPositionY: any;
  annotationShowLeader: any;
  annotationText: any;
}
declare class ArcsinhStretch extends ProcessInstance {
  blackPoint: any;
  previewClipped: any;
  protectHighlights: any;
  stretch: any;
  useRGBWS: any;
}
declare class AssignICCProfile extends ProcessInstance {
  AssignDefaultProfile: any;
  AssignNewProfile: any;
  LeaveUntagged: any;
  mode: any;
  targetProfile: any;
}
declare class AssistedColorCalibration extends ProcessInstance {
  BlueCorrectionFactor: any;
  GreenCorrectionFactor: any;
  HistogramHighlights: any;
  HistogramMidtones: any;
  HistogramShadows: any;
  SaturationBoost: any;
  backgroundRef: any;
  redCorrectionFactor: any;
}
declare class AutoHistogram extends ProcessInstance {
  Gamma: any;
  Logarithm: any;
  MTF: any;
  clip: any;
  clipHighB: any;
  clipHighG: any;
  clipHighR: any;
  clipLowB: any;
  clipLowG: any;
  clipLowR: any;
  clipTogether: any;
  isGammaEnabled: any;
  isGlobalGamma: any;
  isGlobalHistogramClip: any;
  isHistogramClipEnabled: any;
  medianB: any;
  medianG: any;
  medianR: any;
  stretch: any;
  stretchMethod: any;
  stretchTogether: any;
  targetMedianB: any;
  targetMedianG: any;
  targetMedianR: any;
}
declare class AutomaticBackgroundExtractor extends ProcessInstance {
  Divide: any;
  None: any;
  SameAsTarget: any;
  Subtract: any;
  abeDownsample: any;
  boxSeparation: any;
  boxSize: any;
  compareFactor: any;
  compareModel: any;
  correctedImageId: any;
  correctedImageSampleFormat: any;
  deviation: any;
  discardModel: any;
  f32: any;
  f64: any;
  i16: any;
  i32: any;
  i8: any;
  justTrySamples: any;
  maxBackground: any;
  minBackground: any;
  minBoxFraction: any;
  modelImageSampleFormat: any;
  normalize: any;
  polyDegree: any;
  replaceTarget: any;
  targetCorrection: any;
  tolerance: any;
  unbalance: any;
  useBrightnessLimits: any;
  useLuminanceLimits: any;
  verboseCoefficients: any;
  writeSampleBoxes: any;
}
declare class B3Estimator extends ProcessInstance {
  IntensityUnits_EnergyFrequency: any;
  IntensityUnits_EnergyWavelength: any;
  IntensityUnits_PhotonsFrequency: any;
  IntensityUnits_PhotonsWavelength: any;
  backgroundHigh1: any;
  backgroundHigh2: any;
  backgroundLow1: any;
  backgroundLow2: any;
  backgroundROIX01: any;
  backgroundROIX02: any;
  backgroundROIX11: any;
  backgroundROIX12: any;
  backgroundROIY01: any;
  backgroundROIY02: any;
  backgroundROIY11: any;
  backgroundROIY12: any;
  backgroundReferenceViewId1: any;
  backgroundReferenceViewId2: any;
  backgroundUseROI1: any;
  backgroundUseROI2: any;
  inputCenter1: any;
  inputCenter2: any;
  inputViewId1: any;
  inputViewId2: any;
  intensityUnits: any;
  outOfRangeMask: any;
  outOfRangeMaskViewId: any;
  outputBackgroundReferenceMask1: any;
  outputBackgroundReferenceMask2: any;
  outputCenter: any;
  substractBackground1: any;
  substractBackground2: any;
  syntheticImage: any;
  syntheticImageViewId: any;
  thermalMap: any;
  thermalMapViewId: any;
}
declare class BackgroundNeutralization extends ProcessInstance {
  Rescale: any;
  RescaleAsNeeded: any;
  TargetBackground: any;
  Truncate: any;
  backgroundHigh: any;
  backgroundLow: any;
  backgroundReferenceViewId: any;
  mode: any;
  roiX0: any;
  roiX1: any;
  roiY0: any;
  roiY1: any;
  targetBackground: any;
  useROI: any;
}
declare class Binarize extends ProcessInstance {
  isGlobal: any;
  thresholdB: any;
  thresholdG: any;
  thresholdRK: any;
}
declare class Blink extends ProcessInstance {}
declare class ChannelCombination extends ProcessInstance {
  CIELab: any;
  CIELch: any;
  CIEXYZ: any;
  HSI: any;
  HSV: any;
  RGB: any;
  channels: any;
  colorSpace: any;
}
declare class ChannelExtraction extends ProcessInstance {
  CIELab: any;
  CIELch: any;
  CIEXYZ: any;
  HSI: any;
  HSV: any;
  RGB: any;
  SameAsSource: any;
  channels: any;
  colorSpace: any;
  f32: any;
  f64: any;
  i16: any;
  i32: any;
  i8: any;
  sampleFormat: any;
}
declare class ChannelMatch extends ProcessInstance {
  channels: any;
}
declare class CloneStamp extends ProcessInstance {
  actions: any;
  boundsColor: any;
  cloner: any;
  clonerColor: any;
  height: any;
  width: any;
}
declare class ColorCalibration extends ProcessInstance {
  backgroundHigh: any;
  backgroundLow: any;
  backgroundROIX0: any;
  backgroundROIX1: any;
  backgroundROIY0: any;
  backgroundROIY1: any;
  backgroundReferenceViewId: any;
  backgroundUseROI: any;
  manualBlueFactor: any;
  manualGreenFactor: any;
  manualRedFactor: any;
  manualWhiteBalance: any;
  noiseLayers: any;
  outputBackgroundReferenceMask: any;
  outputWhiteReferenceMask: any;
  structureDetection: any;
  structureLayers: any;
  whiteHigh: any;
  whiteLow: any;
  whiteROIX0: any;
  whiteROIX1: any;
  whiteROIY0: any;
  whiteROIY1: any;
  whiteReferenceViewId: any;
  whiteUseROI: any;
}
declare class ColorManagementSetup extends ProcessInstance {
  AbsoluteColorimetric: any;
  AskUser: any;
  AssignDefault: any;
  ConvertToDefault: any;
  DisableCM: any;
  DiscardEmbedded: any;
  KeepEmbedded: any;
  LeaveUntagged: any;
  Perceptual: any;
  RelativeColorimetric: any;
  Saturation: any;
  defaultEmbedProfilesInGrayscaleImages: any;
  defaultEmbedProfilesInRGBImages: any;
  defaultGamutCheckEnabled: any;
  defaultGrayscaleProfile: any;
  defaultProofingEnabled: any;
  defaultRGBProfile: any;
  defaultRenderingIntent: any;
  enabled: any;
  gamutWarningColor: any;
  onMissingProfile: any;
  onProfileMismatch: any;
  proofingIntent: any;
  proofingProfile: any;
  updateMonitorProfile: any;
  useLowResolutionCLUTs: any;
  useProofingBPC: any;
}
declare class ColorSaturation extends ProcessInstance {
  AkimaSubsplines: any;
  CubicSpline: any;
  HS: any;
  HSt: any;
  Linear: any;
  hueShift: any;
}
declare class CometAlignment extends ProcessInstance {
  Auto: any;
  BicubicBSpline: any;
  BicubicSpline: any;
  Bilinear: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Lanczos3: any;
  Lanczos4: any;
  Lanczos5: any;
  MitchellNetravaliFilter: any;
  NearestNeighbor: any;
  drzSaveCometAligned: any;
  drzSaveStarsAligned: any;
  enableLinearFit: any;
  inputHints: any;
  linearClampingThreshold: any;
  normalize: any;
  operandIsDI: any;
  outputDir: any;
  outputExtension: any;
  outputHints: any;
  overwrite: any;
  pixelInterpolation: any;
  postfix: any;
  prefix: any;
  reference: any;
  rejectHigh: any;
  rejectLow: any;
  subtractFile: any;
  subtractMode: any;
  targetFrames: any;
}
declare class ConvertToGrayscale extends ProcessInstance {}
declare class ConvertToRGBColor extends ProcessInstance {}
declare class Convolution extends ProcessInstance {
  Gaussian: any;
  Image: any;
  Library: any;
  Parametric: any;
  aspectRatio: any;
  filterSource: any;
  mode: any;
  rescaleHighPass: any;
  rotationAngle: any;
  shape: any;
  sigma: any;
  viewId: any;
}
declare class CosmeticCorrection extends ProcessInstance {
  amount: any;
  cfa: any;
  coldAutoCheck: any;
  coldAutoValue: any;
  coldDarkCheck: any;
  coldDarkLevel: any;
  defects: any;
  hotAutoCheck: any;
  hotAutoValue: any;
  hotDarkCheck: any;
  hotDarkLevel: any;
  masterDarkPath: any;
  outputDir: any;
  outputExtension: any;
  overwrite: any;
  postfix: any;
  prefix: any;
  targetFrames: any;
  transferFn: any;
  useAutoDetect: any;
  useDefectList: any;
  useMasterDark: any;
}
declare class CreateAlphaChannels extends ProcessInstance {
  closeSource: any;
  count: any;
  fromImage: any;
  invertSource: any;
  replace: any;
  sourceId: any;
  transparency: any;
}
declare class Crop extends ProcessInstance {
  AbsoluteCentimeters: any;
  AbsoluteInches: any;
  AbsolutePixels: any;
  RelativeMargins: any;
  alpha: any;
  blue: any;
  bottomMargin: any;
  forceResolution: any;
  green: any;
  leftMargin: any;
  metric: any;
  mode: any;
  noGUIMessages: any;
  red: any;
  rightMargin: any;
  topMargin: any;
  xResolution: any;
  yResolution: any;
}
declare class CurvesTransformation extends ProcessInstance {
  A: any;
  AkimaSubsplines: any;
  At: any;
  B: any;
  Bt: any;
  CubicSpline: any;
  G: any;
  Gt: any;
  H: any;
  Ht: any;
  K: any;
  Kt: any;
  L: any;
  Linear: any;
  Lt: any;
  R: any;
  Rt: any;
  S: any;
  St: any;
  a: any;
  at: any;
  b: any;
  bt: any;
  c: any;
  ct: any;
}
declare class Debayer extends ProcessInstance {
  Auto: any;
  BGGR: any;
  BGRG: any;
  BayerPattern: any;
  Bilinear: any;
  DebayerMethod: any;
  GBGR: any;
  GBRG: any;
  GRBG: any;
  GRGB: any;
  NoiseEvaluation_KSigma: any;
  NoiseEvaluation_MRS: any;
  OnError_Abort: any;
  OnError_AskUser: any;
  OnError_Continue: any;
  RGBG: any;
  RGGB: any;
  SuperPixel: any;
  VNG: any;
  bayerPattern: any;
  cfaPattern: any;
  cfaSourceFilePath: any;
  debayerMethod: any;
  evaluateNoise: any;
  fbddNoiseReduction: any;
  fileThreadOverload: any;
  inputHints: any;
  maxFileReadThreads: any;
  maxFileWriteThreads: any;
  noGUIMessages: any;
  noiseAlgorithmB: any;
  noiseAlgorithmG: any;
  noiseAlgorithmR: any;
  noiseEstimateB: any;
  noiseEstimateG: any;
  noiseEstimateR: any;
  noiseEvaluationAlgorithm: any;
  noiseFractionB: any;
  noiseFractionG: any;
  noiseFractionR: any;
  onError: any;
  outputDirectory: any;
  outputExtension: any;
  outputFileData: any;
  outputHints: any;
  outputImage: any;
  outputPostfix: any;
  outputPrefix: any;
  overwriteExistingFiles: any;
  showImages: any;
  targetItems: any;
  useFileThreads: any;
}
declare class Deconvolution extends ProcessInstance {
  B3Spline5x5: any;
  External: any;
  Gaussian: any;
  LinearInterpolation3x3: any;
  MotionBlur: any;
  Parametric: any;
  Poisson: any;
  RichardsonLucy: any;
  SmallScale3x3: any;
  VanCittert: any;
  algorithm: any;
  convergence: any;
  deringing: any;
  deringingBright: any;
  deringingDark: any;
  deringingSupport: any;
  deringingSupportAmount: any;
  deringingSupportViewId: any;
  iterations: any;
  noiseModel: any;
  numberOfIterations: any;
  numberOfWaveletLayers: any;
  psfAspectRatio: any;
  psfFFTSizeLimit: any;
  psfGaussianAspectRatio: any;
  psfGaussianRotationAngle: any;
  psfGaussianShape: any;
  psfGaussianSigma: any;
  psfMode: any;
  psfMotionLength: any;
  psfMotionRotationAngle: any;
  psfRotationAngle: any;
  psfShape: any;
  psfSigma: any;
  psfViewId: any;
  rangeHigh: any;
  rangeLow: any;
  scalingFunction: any;
  toLuminance: any;
  useLuminance: any;
  useRegularization: any;
  waveletLayers: any;
}
declare class DefectMap extends ProcessInstance {
  Circular: any;
  Gaussian: any;
  Horizontal: any;
  Maximum: any;
  Mean: any;
  Median: any;
  Minimum: any;
  Square: any;
  Vertical: any;
  isCFA: any;
  mapId: any;
  operation: any;
  structure: any;
}
declare class DigitalDevelopment extends ProcessInstance {
  Blue: any;
  Green: any;
  Luminance: any;
  Red: any;
  a: any;
  b: any;
  m0: any;
  m1: any;
  m2: any;
  sigma: any;
}
declare class Divide extends ProcessInstance {
  Custom: any;
  FixedValueZone: any;
  ImageLinearization: any;
  Maximum: any;
  Mean: any;
  Median: any;
  Minimum: any;
  PlainDivision: any;
  StatisticalValueZone: any;
  customNormalization: any;
  flatId: any;
  highlightsAmount: any;
  highlightsContinuity: any;
  highlightsLimit: any;
  linearization: any;
  method: any;
  normalization: any;
  shadowsAmount: any;
  shadowsContinuity: any;
  shadowsLimit: any;
  statisticalDownLimit: any;
  statisticalUpLimit: any;
}
declare class DrizzleIntegration extends ProcessInstance {
  Abort: any;
  AskUser: any;
  Continue: any;
  Kernel_Circular: any;
  Kernel_Gaussian: any;
  Kernel_Square: any;
  Kernel_Variable10: any;
  Kernel_Variable15: any;
  Kernel_Variable30: any;
  Kernel_Variable40: any;
  Kernel_Variable50: any;
  Kernel_Variable60: any;
  cfaPattern: any;
  closePreviousImages: any;
  dropShrink: any;
  enableAdaptiveNormalization: any;
  enableCFA: any;
  enableImageWeighting: any;
  enableLocalDistortion: any;
  enableLocalNormalization: any;
  enableRejection: any;
  enableSurfaceSplines: any;
  imageData: any;
  inputData: any;
  inputDirectory: any;
  inputHints: any;
  integratedPixels: any;
  integrationImageId: any;
  kernelFunction: any;
  kernelGridSize: any;
  noGUIMessages: any;
  numberOfChannels: any;
  onError: any;
  originX: any;
  originY: any;
  outputPixels: any;
  outputRangeHigh: any;
  outputRangeLow: any;
  roiX0: any;
  roiX1: any;
  roiY0: any;
  roiY1: any;
  scale: any;
  totalData: any;
  totalRejectedHighB: any;
  totalRejectedHighG: any;
  totalRejectedHighRK: any;
  totalRejectedLowB: any;
  totalRejectedLowG: any;
  totalRejectedLowRK: any;
  truncateOnOutOfRange: any;
  useROI: any;
  weightImageId: any;
}
declare class DynamicAlignment extends ProcessInstance {
  SameAsTarget: any;
  badSampleColor: any;
  badSampleFillColor: any;
  data: any;
  f32: any;
  f64: any;
  i16: any;
  i32: any;
  i8: any;
  points: any;
  registeredImageId: any;
  registeredImageSampleFormat: any;
  removedLayers: any;
  sampleColor: any;
  searchFeatures: any;
  selectedSampleColor: any;
  selectedSampleFillColor: any;
  sourceImageHeight: any;
  sourceImageId: any;
  sourceImageWidth: any;
  sourceSearchRadius: any;
  targetImageHeight: any;
  targetImageWidth: any;
  targetSearchRadius: any;
  threshold: any;
}
declare class DynamicBackgroundExtraction extends ProcessInstance {
  Divide: any;
  None: any;
  SameAsTarget: any;
  Subtract: any;
  axisColor: any;
  badSampleColor: any;
  badSampleFillColor: any;
  correctedImageId: any;
  correctedImageSampleFormat: any;
  data: any;
  defaultSampleRadius: any;
  derivativeOrder: any;
  discardModel: any;
  downsample: any;
  f32: any;
  f64: any;
  i16: any;
  i32: any;
  i8: any;
  ignoreWeights: any;
  imageHeight: any;
  imageWidth: any;
  minSampleFraction: any;
  minWeight: any;
  modelHeight: any;
  modelId: any;
  modelSampleFormat: any;
  modelWidth: any;
  normalize: any;
  numberOfChannels: any;
  replaceTarget: any;
  sampleColor: any;
  samples: any;
  samplesPerRow: any;
  selectedSampleColor: any;
  selectedSampleFillColor: any;
  shadowsRelaxation: any;
  smoothing: any;
  symmetryCenterX: any;
  symmetryCenterY: any;
  targetCorrection: any;
  tolerance: any;
}
declare class DynamicCrop extends ProcessInstance {
  Auto: any;
  BicubicBSpline: any;
  BicubicSpline: any;
  Bilinear: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Lanczos3: any;
  Lanczos4: any;
  MitchellNetravaliFilter: any;
  NearestNeighbor: any;
  alpha: any;
  angle: any;
  blue: any;
  centerX: any;
  centerY: any;
  clampingThreshold: any;
  forceResolution: any;
  green: any;
  height: any;
  interpolation: any;
  metric: any;
  noGUIMessages: any;
  optimizeFast: any;
  red: any;
  scaleX: any;
  scaleY: any;
  smoothness: any;
  width: any;
  xResolution: any;
  yResolution: any;
}
declare class DynamicPSF extends ProcessInstance {
  Function_Gaussian: any;
  Function_Lorentzian: any;
  Function_Moffat: any;
  Function_Moffat10: any;
  Function_Moffat15: any;
  Function_Moffat25: any;
  Function_Moffat4: any;
  Function_Moffat6: any;
  Function_Moffat8: any;
  Function_VariableShape: any;
  PSF_BadParameters: any;
  PSF_FittedOk: any;
  PSF_InaccurateSolution: any;
  PSF_NoConvergence: any;
  PSF_NoSolution: any;
  PSF_NotFitted: any;
  PSF_UnknownError: any;
  Scale_CustomKeyword: any;
  Scale_LiteralValue: any;
  Scale_Pixels: any;
  Scale_StandardKeywords: any;
  Scale_StandardMetadata: any;
  Star_CrossingEdges: any;
  Star_DetectedOk: any;
  Star_NoConvergence: any;
  Star_NoSignificantData: any;
  Star_NotDetected: any;
  Star_OutsideImage: any;
  Star_UnknownError: any;
  astrometry: any;
  autoAperture: any;
  autoPSF: any;
  autoVariableShapePSF: any;
  badStarColor: any;
  badStarFillColor: any;
  betaMax: any;
  betaMin: any;
  circularPSF: any;
  gaussianPSF: any;
  lorentzianPSF: any;
  moffat10PSF: any;
  moffat15PSF: any;
  moffat25PSF: any;
  moffat4PSF: any;
  moffat6PSF: any;
  moffat8PSF: any;
  moffatPSF: any;
  psf: any;
  regenerate: any;
  scaleKeyword: any;
  scaleMode: any;
  scaleValue: any;
  searchRadius: any;
  selectedStarColor: any;
  selectedStarFillColor: any;
  signedAngles: any;
  starColor: any;
  stars: any;
  threshold: any;
  variableShapePSF: any;
  views: any;
}
declare class ExponentialTransformation extends ProcessInstance {
  PIP: any;
  SMI: any;
  functionType: any;
  luminanceMask: any;
  order: any;
  sigma: any;
  useLightnessMask: any;
}
declare class ExtractAlphaChannels extends ProcessInstance {
  ActiveAlphaChannel: any;
  AllAlphaChannels: any;
  ChannelList: any;
  channelList: any;
  channels: any;
  delete: any;
  extract: any;
}
declare class FITSHeader extends ProcessInstance {
  keywords: any;
}
declare class FastRotation extends ProcessInstance {
  HorizontalMirror: any;
  Rotate180: any;
  Rotate90CCW: any;
  Rotate90CW: any;
  VerticalMirror: any;
  mode: any;
  noGUIMessages: any;
}
declare class FluxCalibration extends ProcessInstance {
  CustomKeyword: any;
  Literal: any;
  StandardKeyword: any;
  aperture: any;
  apertureKeyword: any;
  apertureMode: any;
  atmosphericExtinction: any;
  atmosphericExtinctionKeyword: any;
  atmosphericExtinctionMode: any;
  centralObstruction: any;
  centralObstructionKeyword: any;
  centralObstructionMode: any;
  exposureTime: any;
  exposureTimeKeyword: any;
  exposureTimeMode: any;
  filterWidth: any;
  filterWidthKeyword: any;
  filterWidthMode: any;
  quantumEfficiency: any;
  quantumEfficiencyKeyword: any;
  quantumEfficiencyMode: any;
  sensorGain: any;
  sensorGainKeyword: any;
  sensorGainMode: any;
  transmissivity: any;
  transmissivityKeyword: any;
  transmissivityMode: any;
  wavelength: any;
  wavelengthKeyword: any;
  wavelengthMode: any;
}
declare class FourierTransform extends ProcessInstance {
  centered: any;
  radialCoordinates: any;
}
declare class GREYCstoration extends ProcessInstance {
  Bilinear: any;
  Nearest: any;
  RungeKutta: any;
  amplitude: any;
  angularIntegrationStep: any;
  anisotropy: any;
  contourPreservation: any;
  coupledChannels: any;
  fastApproximation: any;
  geometryRegularity: any;
  interpolation: any;
  noiseScale: any;
  numberOfIterations: any;
  precision: any;
  spatialIntegrationStep: any;
}
declare class GaiaDR2 extends ProcessInstance {
  SortBy_Dec: any;
  SortBy_DontSort: any;
  SortBy_G: any;
  SortBy_G_BP: any;
  SortBy_G_RP: any;
  SortBy_Parallax: any;
  SortBy_RA: any;
  TextFormat_CSV: any;
  TextFormat_Tabular: any;
  TextFormat_TabularCompound: any;
  TextHeaders_None: any;
  TextHeaders_SearchParameters: any;
  TextHeaders_SearchParametersAndTableColumns: any;
  TextHeaders_TableColumns: any;
  centerDec: any;
  centerRA: any;
  command: any;
  countIO: any;
  databaseFilePaths: any;
  databaseMagnitudeHigh: any;
  databaseMagnitudeLow: any;
  excessCount: any;
  exclusionFlags: any;
  generateTextOutput: any;
  inclusionFlags: any;
  magnitudeHigh: any;
  magnitudeLow: any;
  outputFilePath: any;
  radius: any;
  rejectCount: any;
  sortBy: any;
  sourceLimit: any;
  sources: any;
  textFormat: any;
  textHeaders: any;
  timeDecode: any;
  timeIO: any;
  timeTotal: any;
  timeUncompress: any;
  verbosity: any;
}
declare class GradientHDRComposition extends ProcessInstance {
  bKeepLog: any;
  bNegativeBias: any;
  dLogBias: any;
  generateMask: any;
  targetFrames: any;
}
declare class GradientHDRCompression extends ProcessInstance {
  bPreserveColor: any;
  bRescale01: any;
  expGradient: any;
  logMaxGradient: any;
  logMinGradient: any;
}
declare class GradientMergeMosaic extends ProcessInstance {
  Average: any;
  Overlay: any;
  blackPoint: any;
  generateMask: any;
  nFeatherRadius: any;
  nShrinkCount: any;
  targetFrames: any;
  type: any;
}
declare class HDRComposition extends ProcessInstance {
  autoExposures: any;
  closePreviousImages: any;
  fittingRectX0: any;
  fittingRectX1: any;
  fittingRectY0: any;
  fittingRectY1: any;
  generate64BitResult: any;
  images: any;
  inputHints: any;
  maskBinarizingThreshold: any;
  maskGrowth: any;
  maskSmoothness: any;
  outputMasks: any;
  rejectBlack: any;
  replaceLargeScales: any;
  useFittingRegion: any;
}
declare class HDRMultiscaleTransform extends ProcessInstance {
  Automatic: any;
  Manual: any;
  NoMidtonesBalance: any;
  deringing: any;
  invertedIterations: any;
  largeScaleDeringing: any;
  luminanceMask: any;
  medianTransform: any;
  midtonesBalance: any;
  midtonesBalanceMode: any;
  numberOfIterations: any;
  numberOfLayers: any;
  outputDeringingMaps: any;
  overdrive: any;
  preserveHue: any;
  scalingFunctionColFilter: any;
  scalingFunctionData: any;
  scalingFunctionName: any;
  scalingFunctionRowFilter: any;
  smallScaleDeringing: any;
  toLightness: any;
  toLuminanceOnly: any;
}
declare class HistogramTransformation extends ProcessInstance {
  H: any;
}
declare class ICCProfileTransformation extends ProcessInstance {
  AbsoluteColorimetric: any;
  Perceptual: any;
  RelativeColorimetric: any;
  Saturation: any;
  renderingIntent: any;
  targetProfile: any;
  toDefaultProfile: any;
  useBlackPointCompensation: any;
  useFloatingPointTransformation: any;
}
declare class ImageCalibration extends ProcessInstance {
  Abort: any;
  AskUser: any;
  Auto: any;
  BGGR: any;
  BGRG: any;
  Continue: any;
  CustomKeyword: any;
  DetectCFA: any;
  ForceCFA: any;
  GBGR: any;
  GBRG: any;
  GRBG: any;
  GRGB: any;
  IgnoreCFA: any;
  Keyword: any;
  Literal: any;
  NoiseEvaluation_KSigma: any;
  NoiseEvaluation_MRS: any;
  RGBG: any;
  RGGB: any;
  calibrateBias: any;
  calibrateDark: any;
  calibrateFlat: any;
  cfaPattern: any;
  darkCFADetectionMode: any;
  darkOptimizationLow: any;
  darkOptimizationThreshold: any;
  darkOptimizationWindow: any;
  enableCFA: any;
  evaluateNoise: any;
  f32: any;
  f64: any;
  flatScaleClippingFactor: any;
  i16: any;
  i32: any;
  inputHints: any;
  masterBiasEnabled: any;
  masterBiasPath: any;
  masterDarkEnabled: any;
  masterDarkPath: any;
  masterFlatEnabled: any;
  masterFlatPath: any;
  noGUIMessages: any;
  noiseEvaluationAlgorithm: any;
  onError: any;
  optimizeDarks: any;
  outputData: any;
  outputDirectory: any;
  outputExtension: any;
  outputHints: any;
  outputPedestal: any;
  outputPostfix: any;
  outputPrefix: any;
  outputSampleFormat: any;
  overscanEnabled: any;
  overscanImageX0: any;
  overscanImageX1: any;
  overscanImageY0: any;
  overscanImageY1: any;
  overscanRegions: any;
  overwriteExistingFiles: any;
  pedestal: any;
  pedestalKeyword: any;
  pedestalMode: any;
  separateCFAFlatScalingFactors: any;
  targetFrames: any;
}
declare class ImageIdentifier extends ProcessInstance {
  id: any;
}
declare class ImageIntegration extends ProcessInstance {
  AdaptiveNormalization: any;
  AdaptiveRejectionNormalization: any;
  Additive: any;
  AdditiveWithScaling: any;
  Average: any;
  AverageWeight: any;
  AveragedSigmaClip: any;
  CCDClip: any;
  DontCare: any;
  EqualizeFluxes: any;
  ExposureTime: any;
  KeywordWeight: any;
  LinearFit: any;
  LocalNormalization: any;
  LocalRejectionNormalization: any;
  Maximum: any;
  Median: any;
  MedianWeight: any;
  MinMax: any;
  Minimum: any;
  Multiplicative: any;
  MultiplicativeWithScaling: any;
  NoNormalization: any;
  NoRejection: any;
  NoRejectionNormalization: any;
  NoiseEvaluation: any;
  PercentileClip: any;
  Rejection_ESD: any;
  Scale: any;
  SigmaClip: any;
  SignalWeight: any;
  WeightScale_AvgDev: any;
  WeightScale_BWMV: any;
  WeightScale_IKSS: any;
  WeightScale_MAD: any;
  WeightScale_PBMV: any;
  WeightScale_Qn: any;
  WeightScale_Sn: any;
  WinsorizedSigmaClip: any;
  adaptiveGridSize: any;
  adaptiveNoScale: any;
  autoMemoryLimit: any;
  autoMemorySize: any;
  averageSNRIncrementB: any;
  averageSNRIncrementG: any;
  averageSNRIncrementRK: any;
  bufferSizeMB: any;
  ccdGain: any;
  ccdReadNoise: any;
  ccdScaleNoise: any;
  clipHigh: any;
  clipLow: any;
  closePreviousImages: any;
  combination: any;
  esdAlpha: any;
  esdLowRelaxation: any;
  esdOutliersFraction: any;
  evaluateNoise: any;
  fileThreadOverload: any;
  finalLocationEstimateB: any;
  finalLocationEstimateG: any;
  finalLocationEstimateRK: any;
  finalNoiseEstimateB: any;
  finalNoiseEstimateG: any;
  finalNoiseEstimateRK: any;
  finalScaleEstimateB: any;
  finalScaleEstimateG: any;
  finalScaleEstimateRK: any;
  generate64BitResult: any;
  generateDrizzleData: any;
  generateIntegratedImage: any;
  generateRejectionMaps: any;
  highRejectionMapImageId: any;
  ignoreNoiseKeywords: any;
  imageData: any;
  images: any;
  inputHints: any;
  integrationImageId: any;
  largeScaleClipHigh: any;
  largeScaleClipHighGrowth: any;
  largeScaleClipHighProtectedLayers: any;
  largeScaleClipLow: any;
  largeScaleClipLowGrowth: any;
  largeScaleClipLowProtectedLayers: any;
  linearFitHigh: any;
  linearFitLow: any;
  lowRejectionMapImageId: any;
  mapRangeRejection: any;
  maxBufferThreads: any;
  medianNoiseReductionB: any;
  medianNoiseReductionG: any;
  medianNoiseReductionRK: any;
  minMaxHigh: any;
  minMaxLow: any;
  mrsMinDataFraction: any;
  noGUIMessages: any;
  normalization: any;
  numberOfChannels: any;
  numberOfPixels: any;
  outputRangeHigh: any;
  outputRangeLow: any;
  pcClipHigh: any;
  pcClipLow: any;
  rangeClipHigh: any;
  rangeClipLow: any;
  rangeHigh: any;
  rangeLow: any;
  referenceNoiseReductionB: any;
  referenceNoiseReductionG: any;
  referenceNoiseReductionRK: any;
  referenceSNRIncrementB: any;
  referenceSNRIncrementG: any;
  referenceSNRIncrementRK: any;
  rejection: any;
  rejectionNormalization: any;
  reportRangeRejection: any;
  roiX0: any;
  roiX1: any;
  roiY0: any;
  roiY1: any;
  showImages: any;
  sigmaHigh: any;
  sigmaLow: any;
  slopeMapImageId: any;
  stackSizeMB: any;
  subtractPedestals: any;
  totalPixels: any;
  totalRejectedHighB: any;
  totalRejectedHighG: any;
  totalRejectedHighRK: any;
  totalRejectedLowB: any;
  totalRejectedLowG: any;
  totalRejectedLowRK: any;
  truncateOnOutOfRange: any;
  useBufferThreads: any;
  useCache: any;
  useFileThreads: any;
  useROI: any;
  weightKeyword: any;
  weightMode: any;
  weightScale: any;
  winsorizationCutoff: any;
}
declare class IndigoCCDFrame extends ProcessInstance {
  FrameType_Bias: any;
  FrameType_Dark: any;
  FrameType_Flat: any;
  FrameType_Light: any;
  TelescopeSelection_ActiveOrMountController: any;
  TelescopeSelection_ActiveTelescope: any;
  TelescopeSelection_DeviceName: any;
  TelescopeSelection_MountController: any;
  TelescopeSelection_NoTelescope: any;
  UploadMode_Client: any;
  UploadMode_Server: any;
  UploadMode_ServerAndClient: any;
  alignmentModelFile: any;
  autoStretch: any;
  binningX: any;
  binningY: any;
  clientDownloadDirectory: any;
  clientFileNameTemplate: any;
  clientFrames: any;
  clientOutputFormatHints: any;
  deviceName: any;
  enableAlignmentCorrection: any;
  exposureCount: any;
  exposureDelay: any;
  exposureTime: any;
  externalFilterWheelDeviceName: any;
  filterSlot: any;
  frameType: any;
  linkedAutoStretch: any;
  newImageIdTemplate: any;
  objectName: any;
  openClientImages: any;
  overwriteClientImages: any;
  requireSelectedTelescope: any;
  reuseImageWindow: any;
  saveClientImages: any;
  serverFileNameTemplate: any;
  serverFrames: any;
  serverUploadDirectory: any;
  telescopeAperture: any;
  telescopeDeviceName: any;
  telescopeSelection: any;
  uploadMode: any;
}
declare class IndigoDeviceController extends ProcessInstance {
  abort: any;
  devices: any;
  getCommandParameters: any;
  getCommandResult: any;
  newProperties: any;
  properties: any;
  serverCommand: any;
  serverConnect: any;
  serverHostName: any;
  serverPort: any;
  verbosity: any;
}
declare class IndigoMount extends ProcessInstance {
  AlignmentMethod: any;
  AlignmentMethod_AnalyticalModel: any;
  AlignmentMethod_None: any;
  AlignmentMethod_ServerModel: any;
  Command: any;
  Command_FitPointingModel: any;
  Command_GoTo: any;
  Command_MoveEastStart: any;
  Command_MoveEastStop: any;
  Command_MoveNorthStart: any;
  Command_MoveNorthStop: any;
  Command_MoveSouthStart: any;
  Command_MoveSouthStop: any;
  Command_MoveWestStart: any;
  Command_MoveWestStop: any;
  Command_Park: any;
  Command_ParkDefault: any;
  Command_Sync: any;
  Command_TestSync: any;
  Command_Unpark: any;
  PierSide: any;
  PierSide_East: any;
  PierSide_None: any;
  PierSide_West: any;
  SlewRate: any;
  SlewRate_Centering: any;
  SlewRate_Find: any;
  SlewRate_Guide: any;
  SlewRate_Max: any;
  alignmentConfig: any;
  alignmentModelFile: any;
  apparentTargetDec: any;
  apparentTargetRA: any;
  currentDec: any;
  currentLST: any;
  currentRA: any;
  deviceName: any;
  enableAlignmentCorrection: any;
  geographicLatitude: any;
  syncCelestialDec: any;
  syncCelestialRA: any;
  syncLST: any;
  syncTelescopeDec: any;
  syncTelescopeRA: any;
  targetDec: any;
  targetRA: any;
}
declare class IntegerResample extends ProcessInstance {
  Average: any;
  Maximum: any;
  Median: any;
  Minimum: any;
  downsamplingMode: any;
  forceResolution: any;
  metric: any;
  noGUIMessages: any;
  subsampleMode: any;
  xResolution: any;
  yResolution: any;
  zoomFactor: any;
}
declare class InverseFourierTransform extends ProcessInstance {
  DontCare: any;
  Rescale: any;
  Truncate: any;
  idOfFirstComponent: any;
  idOfSecondComponent: any;
  onOutOfRangeResult: any;
}
declare class Invert extends ProcessInstance {}
declare class LRGBCombination extends ProcessInstance {
  channels: any;
  clipHighlights: any;
  layersProtected: any;
  layersRemoved: any;
  mL: any;
  mc: any;
  noiseReduction: any;
}
declare class LarsonSekanina extends ProcessInstance {
  Bicubic: any;
  BicubicBSpline: any;
  BicubicSpline: any;
  Bilinear: any;
  amount: any;
  angleIncrement: any;
  centerX: any;
  centerY: any;
  deringing: any;
  disableExtension: any;
  highPass: any;
  interpolation: any;
  radiusIncrement: any;
  rangeHigh: any;
  rangeLow: any;
  threshold: any;
  useLuminance: any;
}
declare class LinearFit extends ProcessInstance {
  referenceViewId: any;
  rejectHigh: any;
  rejectLow: any;
}
declare class LocalHistogramEqualization extends ProcessInstance {
  Bit10: any;
  Bit12: any;
  Bit8: any;
  amount: any;
  circularKernel: any;
  histogramBins: any;
  radius: any;
  slopeLimit: any;
}
declare class LocalNormalization extends ProcessInstance {
  GenerateNormalizedImages_Always: any;
  GenerateNormalizedImages_GlobalExecutionOnly: any;
  GenerateNormalizedImages_Never: any;
  GenerateNormalizedImages_ViewExecutionOnly: any;
  OnError_Abort: any;
  OnError_AskUser: any;
  OnError_Continue: any;
  PlotNormalizationFunctions_DontPlot: any;
  PlotNormalizationFunctions_Line3D: any;
  PlotNormalizationFunctions_Map3D: any;
  PlotNormalizationFunctions_Palette3D: any;
  backgroundRejectionLimit: any;
  fileThreadOverload: any;
  generateNormalizationData: any;
  generateNormalizedImages: any;
  graphOutputDirectory: any;
  graphSize: any;
  graphTextSize: any;
  graphTitleSize: any;
  graphTransparent: any;
  hotPixelFilterRadius: any;
  inputHints: any;
  maxFileReadThreads: any;
  maxFileWriteThreads: any;
  noGUIMessages: any;
  noScale: any;
  noiseReductionFilterRadius: any;
  onError: any;
  outputDirectory: any;
  outputExtension: any;
  outputHints: any;
  outputPostfix: any;
  outputPrefix: any;
  overwriteExistingFiles: any;
  plotNormalizationFunctions: any;
  referenceIsView: any;
  referencePathOrViewId: any;
  referenceRejectionThreshold: any;
  rejection: any;
  scale: any;
  showBackgroundModels: any;
  showRejectionMaps: any;
  targetItems: any;
  targetRejectionThreshold: any;
  useFileThreads: any;
}
declare class MaskedStretch extends ProcessInstance {
  MaskType_Intensity: any;
  MaskType_Value: any;
  backgroundHigh: any;
  backgroundLow: any;
  backgroundReferenceViewId: any;
  clippingFraction: any;
  maskType: any;
  numberOfIterations: any;
  roiX0: any;
  roiX1: any;
  roiY0: any;
  roiY1: any;
  targetBackground: any;
  useROI: any;
}
declare class MergeCFA extends ProcessInstance {
  outputViewId: any;
  sourceCFAImage0: any;
  sourceCFAImage1: any;
  sourceCFAImage2: any;
  sourceCFAImage3: any;
}
declare class MorphologicalTransformation extends ProcessInstance {
  Closing: any;
  Dilation: any;
  Erosion: any;
  Median: any;
  Midpoint: any;
  Opening: any;
  Selection: any;
  amount: any;
  highThreshold: any;
  interlacingDistance: any;
  lowThreshold: any;
  numberOfIterations: any;
  operator: any;
  selectionPoint: any;
  structureName: any;
  structureSize: any;
  structureWayTable: any;
}
declare class MultiscaleLinearTransform extends ProcessInstance {
  AllPixelChanges: any;
  DecreasingPixels: any;
  Disabled: any;
  Hyperbolic: any;
  IncreasingPixels: any;
  Ln: any;
  Log10: any;
  MultiscaleLinearTransform: any;
  NoFunction: any;
  StarletTransform: any;
  curveBreakPoint: any;
  deringing: any;
  deringingBright: any;
  deringingDark: any;
  highRange: any;
  largeScaleFunction: any;
  layers: any;
  linear: any;
  linearMask: any;
  linearMaskAmpFactor: any;
  linearMaskInverted: any;
  linearMaskPreview: any;
  linearMaskSmoothness: any;
  lowRange: any;
  noiseThreshold: any;
  noiseThresholding: any;
  noiseThresholdingAmount: any;
  outputDeringingMaps: any;
  previewLayer: any;
  previewMode: any;
  scaleDelta: any;
  scalingFunctionColFilter: any;
  scalingFunctionData: any;
  scalingFunctionName: any;
  scalingFunctionNoiseSigma: any;
  scalingFunctionRowFilter: any;
  softThresholding: any;
  toChrominance: any;
  toLuminance: any;
  transform: any;
  useMultiresolutionSupport: any;
}
declare class MultiscaleMedianTransform extends ProcessInstance {
  AllPixelChanges: any;
  DecreasingPixels: any;
  Disabled: any;
  IncreasingPixels: any;
  MedianWaveletTransform: any;
  MultiscaleMedianTransform: any;
  highRange: any;
  layers: any;
  linear: any;
  linearMask: any;
  linearMaskAmpFactor: any;
  linearMaskInverted: any;
  linearMaskPreview: any;
  linearMaskSmoothness: any;
  lowRange: any;
  medianWaveletThreshold: any;
  previewLayer: any;
  previewMode: any;
  scaleDelta: any;
  toChrominance: any;
  toLuminance: any;
  transform: any;
}
declare class NewImage extends ProcessInstance {
  Grayscale: any;
  RGB: any;
  colorSpace: any;
  f32: any;
  f64: any;
  height: any;
  i16: any;
  i32: any;
  i8: any;
  id: any;
  numberOfChannels: any;
  sampleFormat: any;
  v0: any;
  v1: any;
  v2: any;
  va: any;
  width: any;
}
declare class NoOperation extends ProcessInstance {}
declare class NoiseGenerator extends ProcessInstance {
  Impulsional: any;
  None: any;
  Normal: any;
  Poisson: any;
  PreserveMean: any;
  PreserveMedian: any;
  Uniform: any;
  amount: any;
  distribution: any;
  impulsionalNoiseProbability: any;
  preserveBrightness: any;
}
declare class PhotometricColorCalibration extends ProcessInstance {
  AlignmentDevice_PolygonMatching: any;
  AlignmentDevice_TriangleSimilarity: any;
  Projection_Gnomonic: any;
  Projection_HammerAitoff: any;
  Projection_Mercator: any;
  Projection_Orthographic: any;
  Projection_PlateCarree: any;
  Projection_Stereographic: any;
  Projection_ZenithalEqualArea: any;
  WorkingMode_Broadband: any;
  WorkingMode_Narrowband: any;
  applyCalibration: any;
  backgroundHigh: any;
  backgroundLow: any;
  backgroundROIX0: any;
  backgroundROIX1: any;
  backgroundROIY0: any;
  backgroundROIY1: any;
  backgroundReferenceViewId: any;
  backgroundUseROI: any;
  blueFilterBandwidth: any;
  blueFilterWavelength: any;
  centerDec: any;
  centerRA: any;
  epochJD: any;
  focalLength: any;
  forcePlateSolve: any;
  greenFilterBandwidth: any;
  greenFilterWavelength: any;
  ignoreImagePositionAndScale: any;
  neutralizeBackground: any;
  photAperture: any;
  photAutoAperture: any;
  photAutoLimitMagnitude: any;
  photAutoLimitMagnitudeFactor: any;
  photCatalogName: any;
  photGenerateGraphs: any;
  photLimitMagnitude: any;
  photSaturationThreshold: any;
  photShowBackgroundModels: any;
  photShowDetectedStars: any;
  photUsePSF: any;
  pixelSize: any;
  redFilterBandwidth: any;
  redFilterWavelength: any;
  serverURL: any;
  solverAlignmentDevice: any;
  solverAutoCatalog: any;
  solverAutoLimitMagnitude: any;
  solverAutoLimitMagnitudeFactor: any;
  solverCatalogName: any;
  solverDistortionCorrection: any;
  solverLimitMagnitude: any;
  solverNoiseLayers: any;
  solverProjection: any;
  solverSplineSmoothing: any;
  solverStarSensitivity: any;
  whiteReferenceId: any;
  whiteReferenceJB_JV: any;
  whiteReferenceName: any;
  whiteReferenceSr_JV: any;
  workingMode: any;
  zeroPointJB_JV: any;
  zeroPointSr_JV: any;
}
declare class PixelMath extends ProcessInstance {
  Gray: any;
  RGB: any;
  SameAsTarget: any;
  createNewImage: any;
  expression: any;
  expression0: any;
  expression1: any;
  expression2: any;
  expression3: any;
  f32: any;
  f64: any;
  generateOutput: any;
  i16: any;
  i32: any;
  i8: any;
  newImageAlpha: any;
  newImageColorSpace: any;
  newImageHeight: any;
  newImageId: any;
  newImageSampleFormat: any;
  newImageWidth: any;
  optimization: any;
  outputData: any;
  rescale: any;
  rescaleLower: any;
  rescaleUpper: any;
  showNewImage: any;
  singleThreaded: any;
  symbols: any;
  truncate: any;
  truncateLower: any;
  truncateUpper: any;
  use64BitWorkingImage: any;
  useSingleExpression: any;
  variables: any;
}
declare class Preferences extends ProcessInstance {
  Application_asteroidEphemeridesFile: any;
  Application_autoUIScaling: any;
  Application_cipITRSDataFile: any;
  Application_deltaATDataFile: any;
  Application_deltaTDataFile: any;
  Application_fontResolution: any;
  Application_fundamentalEphemeridesFile: any;
  Application_highResFont: any;
  Application_highResMonoFont: any;
  Application_lowResFont: any;
  Application_lowResMonoFont: any;
  Application_nutationModelFile: any;
  Application_resourceFile01: any;
  Application_resourceFile02: any;
  Application_resourceFile03: any;
  Application_resourceFile04: any;
  Application_resourceFile05: any;
  Application_resourceFile06: any;
  Application_resourceFile07: any;
  Application_resourceFile08: any;
  Application_resourceFile09: any;
  Application_resourceFile10: any;
  Application_shortTermAsteroidEphemeridesFile: any;
  Application_shortTermFundamentalEphemeridesFile: any;
  Application_shortTermNutationModelFile: any;
  Application_styleSheetFile: any;
  Application_uiScalingFactor: any;
  Identifiers_brokenLinkText: any;
  Identifiers_clonePostfix: any;
  Identifiers_imageContainerIconPrefix: any;
  Identifiers_imagePrefix: any;
  Identifiers_newImageCaption: any;
  Identifiers_noPreviewSelectedText: any;
  Identifiers_noPreviewsAvailableText: any;
  Identifiers_noViewSelectedText: any;
  Identifiers_noViewsAvailableText: any;
  Identifiers_previewPrefix: any;
  Identifiers_processIconPrefix: any;
  Identifiers_workspacePrefix: any;
  ImageWindow_backupFiles: any;
  ImageWindow_createPreviewsFromCoreProperties: any;
  ImageWindow_cursorTolerance: any;
  ImageWindow_default24BitScreenLUT: any;
  ImageWindow_defaultEmbedProperties: any;
  ImageWindow_defaultEmbedThumbnails: any;
  ImageWindow_defaultFileExtension: any;
  ImageWindow_defaultHorizontalResolution: any;
  ImageWindow_defaultMaskMode: any;
  ImageWindow_defaultMasksShown: any;
  ImageWindow_defaultMetricResolution: any;
  ImageWindow_defaultTransparencyColor: any;
  ImageWindow_defaultTransparencyMode: any;
  ImageWindow_defaultVerticalResolution: any;
  ImageWindow_downloadsDirectory: any;
  ImageWindow_fastScreenRenditionThreshold: any;
  ImageWindow_fastScreenRenditions: any;
  ImageWindow_fileFormatWarnings: any;
  ImageWindow_followDownloadLocations: any;
  ImageWindow_highDPIRenditions: any;
  ImageWindow_loadAstrometricSolutions: any;
  ImageWindow_nativeFileDialogs: any;
  ImageWindow_pinchSensitivity: any;
  ImageWindow_proxyURL: any;
  ImageWindow_rememberFileOpenType: any;
  ImageWindow_rememberFileSaveType: any;
  ImageWindow_showActiveSTFIndicators: any;
  ImageWindow_showCaptionCurrentChannels: any;
  ImageWindow_showCaptionFullPaths: any;
  ImageWindow_showCaptionIdentifiers: any;
  ImageWindow_showCaptionZoomRatios: any;
  ImageWindow_strictFileSaveMode: any;
  ImageWindow_swapCompression: any;
  ImageWindow_swapDirectories: any;
  ImageWindow_touchEvents: any;
  ImageWindow_transparencyBrush: any;
  ImageWindow_transparencyBrushBackgroundColor: any;
  ImageWindow_transparencyBrushForegroundColor: any;
  ImageWindow_useFileNamesAsImageIdentifiers: any;
  ImageWindow_verboseNetworkOperations: any;
  ImageWindow_wheelDirection: any;
  ImageWindow_wheelStepAngle: any;
  MainWindow_acceptDroppedFiles: any;
  MainWindow_animateCombo: any;
  MainWindow_animateMenu: any;
  MainWindow_animateToolBox: any;
  MainWindow_animateToolTip: any;
  MainWindow_animateWindows: any;
  MainWindow_capitalizedMenuBars: any;
  MainWindow_checkForUpdatesAtStartup: any;
  MainWindow_confirmProgramTermination: any;
  MainWindow_desktopSettingsAware: any;
  MainWindow_doubleClickLaunchesOpenDialog: any;
  MainWindow_expandFavoritesAtStartup: any;
  MainWindow_expandMostUsedAtStartup: any;
  MainWindow_expandRecentlyUsedAtStartup: any;
  MainWindow_explodeIcons: any;
  MainWindow_fadeAutoHideWindows: any;
  MainWindow_fadeMenu: any;
  MainWindow_fadeToolTip: any;
  MainWindow_fadeWindows: any;
  MainWindow_fadeWorkspaces: any;
  MainWindow_fullScreenAtStartup: any;
  MainWindow_hoverableAutoHideWindows: any;
  MainWindow_iconGridSpacing: any;
  MainWindow_implodeIcons: any;
  MainWindow_maxRecentFiles: any;
  MainWindow_maxUsageListLength: any;
  MainWindow_maximizeAtStartup: any;
  MainWindow_nativeMenuBar: any;
  MainWindow_openResourcesOnNewWebBrowserWindows: any;
  MainWindow_openURLsWithInternalBrowser: any;
  MainWindow_privateWebBrowsingMode: any;
  MainWindow_showFavorites: any;
  MainWindow_showMostUsed: any;
  MainWindow_showRecentlyUsed: any;
  MainWindow_showSplashAtStartup: any;
  MainWindow_translucentAutoHideWindows: any;
  MainWindow_translucentChildWindows: any;
  MainWindow_translucentWindows: any;
  MainWindow_useWallpapers: any;
  MainWindow_wallpaperFile01: any;
  MainWindow_wallpaperFile02: any;
  MainWindow_wallpaperFile03: any;
  MainWindow_wallpaperFile04: any;
  MainWindow_wallpaperFile05: any;
  MainWindow_wallpaperFile06: any;
  MainWindow_wallpaperFile07: any;
  MainWindow_wallpaperFile08: any;
  MainWindow_wallpaperFile09: any;
  MainWindow_wallpaperFile10: any;
  MainWindow_windowButtonsOnTheLeft: any;
  Process_alertOnProcessCompleted: any;
  Process_autoSavePSMPeriod: any;
  Process_backupFiles: any;
  Process_consoleDelay: any;
  Process_enableExecutionStatistics: any;
  Process_enableLaunchStatistics: any;
  Process_enableParallelCoreColorManagement: any;
  Process_enableParallelCoreRendering: any;
  Process_enableParallelModuleProcessing: any;
  Process_enableParallelProcessing: any;
  Process_enableThreadCPUAffinity: any;
  Process_generateScriptComments: any;
  Process_maxConsoleLines: any;
  Process_maxModuleThreadPriority: any;
  Process_maxProcessors: any;
}
declare class ProcessContainer extends ProcessInstance {
  add: any;
  at: any;
  clear: any;
  delete: any;
  disable: any;
  disabled: any;
  enable: any;
  enabled: any;
  insert: any;
  invertMask: any;
  isEmpty: any;
  length: any;
  maskId: any;
  maskInverted: any;
  setMask: any;
}
declare class RGBWorkingSpace extends ProcessInstance {
  applyGlobalRGBWS: any;
  channels: any;
  gamma: any;
  sRGBGamma: any;
}
declare class RangeSelection extends ProcessInstance {
  fuzziness: any;
  highRange: any;
  invert: any;
  lowRange: any;
  screening: any;
  smoothness: any;
  toLightness: any;
}
declare class ReadoutOptions extends ProcessInstance {
  CIELab: any;
  CIELch: any;
  CIEXYZ: any;
  HSI: any;
  HSV: any;
  RGBK: any;
  RGBL: any;
  RGBY: any;
  broadcast: any;
  coordinateItems: any;
  coordinatePrecision: any;
  data: any;
  integerRange: any;
  maximum: any;
  mean: any;
  median: any;
  minimum: any;
  mode: any;
  precision: any;
  previewCenter: any;
  previewSize: any;
  previewZoomFactor: any;
  probeSize: any;
  real: any;
  showAlpha: any;
  showEclipticCoordinates: any;
  showEquatorialCoordinates: any;
  showGalacticCoordinates: any;
  showMask: any;
  showPreview: any;
}
declare class Resample extends ProcessInstance {
  AbsoluteCentimeters: any;
  AbsoluteInches: any;
  AbsolutePixels: any;
  Auto: any;
  BicubicBSpline: any;
  BicubicSpline: any;
  Bilinear: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  ForceArea: any;
  ForceHeight: any;
  ForceWidth: any;
  ForceWidthAndHeight: any;
  Lanczos3: any;
  Lanczos4: any;
  MitchellNetravaliFilter: any;
  NearestNeighbor: any;
  RelativeDimensions: any;
  absoluteMode: any;
  clampingThreshold: any;
  forceResolution: any;
  interpolation: any;
  metric: any;
  mode: any;
  noGUIMessages: any;
  smoothness: any;
  xResolution: any;
  xSize: any;
  yResolution: any;
  ySize: any;
}
declare class Rescale extends ProcessInstance {
  CIEL: any;
  CIEY: any;
  RGBK: any;
  RGBK_Individual: any;
  mode: any;
}
declare class RestorationFilter extends ProcessInstance {
  ConstrainedLeastSquares: any;
  External: any;
  Gaussian: any;
  K: any;
  MotionBlur: any;
  Parametric: any;
  Wiener: any;
  algorithm: any;
  amount: any;
  deringing: any;
  deringingBright: any;
  deringingDark: any;
  gamma: any;
  linear: any;
  outputDeringingMaps: any;
  psfAspectRatio: any;
  psfGaussianAspectRatio: any;
  psfGaussianRotationAngle: any;
  psfGaussianShape: any;
  psfGaussianSigma: any;
  psfMode: any;
  psfMotionLength: any;
  psfMotionRotationAngle: any;
  psfRotationAngle: any;
  psfShape: any;
  psfSigma: any;
  psfViewId: any;
  rangeHigh: any;
  rangeLow: any;
  toLuminance: any;
  useLuminance: any;
}
declare class Rotation extends ProcessInstance {
  Auto: any;
  BicubicBSpline: any;
  BicubicSpline: any;
  Bilinear: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Lanczos3: any;
  Lanczos4: any;
  MitchellNetravaliFilter: any;
  NearestNeighbor: any;
  alpha: any;
  angle: any;
  blue: any;
  clampingThreshold: any;
  green: any;
  interpolation: any;
  noGUIMessages: any;
  optimizeFast: any;
  red: any;
  smoothness: any;
}
declare class SCNR extends ProcessInstance {
  AdditiveMask: any;
  AverageNeutral: any;
  Blue: any;
  Green: any;
  MaximumMask: any;
  MaximumNeutral: any;
  MinimumNeutral: any;
  Red: any;
  amount: any;
  colorToRemove: any;
  preserveLightness: any;
  preserveLuminance: any;
  protectionMethod: any;
}
declare class SampleFormatConversion extends ProcessInstance {
  To16Bit: any;
  To32Bit: any;
  To8Bit: any;
  ToDouble: any;
  ToFloat: any;
  format: any;
}
declare class Sandbox extends ProcessInstance {
  FirstItem: any;
  SecondItem: any;
  ThirdItem: any;
  sampleFive: any;
  sampleFour: any;
  sampleOne: any;
  sampleThree: any;
  sampleTwo: any;
}
declare class ScreenTransferFunction extends ProcessInstance {
  Grayscale: any;
  STF: any;
  SeparateChannels: any;
  interaction: any;
}
declare class Script extends ProcessInstance {
  filePath: any;
  md5sum: any;
  parameters: any;
}
declare class SimplexNoise extends ProcessInstance {
  Add: any;
  And: any;
  Copy: any;
  Dif: any;
  Div: any;
  Mul: any;
  Nand: any;
  Nor: any;
  Or: any;
  Pow: any;
  Screen: any;
  Sub: any;
  Xnor: any;
  Xor: any;
  amount: any;
  offsetX: any;
  offsetY: any;
  operator: any;
  scale: any;
}
declare class SplitCFA extends ProcessInstance {
  outputDir: any;
  outputSubDirCFA: any;
  outputTree: any;
  outputViewId0: any;
  outputViewId1: any;
  outputViewId2: any;
  outputViewId3: any;
  overwrite: any;
  postfix: any;
  prefix: any;
  targetFrames: any;
}
declare class StarAlignment extends ProcessInstance {
  Abort: any;
  Always: any;
  AskUser: any;
  Auto: any;
  BicubicBSpline: any;
  BicubicSpline: any;
  Bilinear: any;
  CatmullRomSplineFilter: any;
  Continue: any;
  CubicBSplineFilter: any;
  DrawMatchedStars: any;
  DrawPutativeStarMatches: any;
  DrawStars: any;
  FitPSF_Always: any;
  FitPSF_DistortionOnly: any;
  FitPSF_Never: any;
  Lanczos3: any;
  Lanczos4: any;
  Lanczos5: any;
  MitchellNetravaliFilter: any;
  MosaicOnly: any;
  NearestNeighbor: any;
  NoIntersection: any;
  OutputMatrix: any;
  RegisterMatch: any;
  RegisterUnion: any;
  RegisterUnionSeparate: any;
  SameAsTarget: any;
  StructureMap: any;
  Structures: any;
  clampingThreshold: any;
  descriptorsPerStar: any;
  distortionAmplitude: any;
  distortionCorrection: any;
  distortionMapPostfix: any;
  distortionMaxIterations: any;
  distortionModel: any;
  distortionTolerance: any;
  extrapolateLocalDistortion: any;
  f32: any;
  f64: any;
  fileThreadOverload: any;
  fitPSF: any;
  frameAdaptation: any;
  generateDistortionMaps: any;
  generateDrizzleData: any;
  generateMasks: any;
  hotPixelFilterRadius: any;
  i16: any;
  i32: any;
  i8: any;
  inputHints: any;
  intersection: any;
  invert: any;
  linearClampingThreshold: any;
  localDistortion: any;
  localDistortionRegularization: any;
  localDistortionRejection: any;
  localDistortionRejectionWindow: any;
  localDistortionScale: any;
  localDistortionTolerance: any;
  maskPostfix: any;
  matcherTolerance: any;
  maxFileReadThreads: any;
  maxFileWriteThreads: any;
  maxStarDistortion: any;
  maxStars: any;
  mode: any;
  noGUIMessages: any;
  noiseLayers: any;
  noiseReductionFilterRadius: any;
  onError: any;
  outputData: any;
  outputDirectory: any;
  outputExtension: any;
  outputHints: any;
  outputPostfix: any;
  outputPrefix: any;
  outputSampleFormat: any;
  overwriteExistingFiles: any;
  peakResponse: any;
  pixelInterpolation: any;
  polygonSides: any;
  psfTolerance: any;
  randomizeMosaic: any;
  ransacMaxIterations: any;
  ransacMaximizeInliers: any;
  ransacMaximizeOverlapping: any;
  ransacMaximizeRegularity: any;
  ransacMinimizeError: any;
  ransacTolerance: any;
  referenceImage: any;
  referenceIsFile: any;
  restrictToPreviews: any;
  scaleTolerance: any;
  sensitivity: any;
  splineSmoothness: any;
  structureLayers: any;
  targets: any;
  trianglesPerStar: any;
  undistortedReference: any;
  upperLimit: any;
  useBrightnessRelations: any;
  useFileThreads: any;
  useScaleDifferences: any;
  useSurfaceSplines: any;
  useTriangles: any;
  writeKeywords: any;
}
declare class StarGenerator extends ProcessInstance {
  Conformal: any;
  Gnomonic: any;
  Output_CSVFile: any;
  Output_Image: any;
  centerDec: any;
  centerRA: any;
  epoch: any;
  focalLength: any;
  limitMagnitude: any;
  nonlinear: any;
  outputFilePath: any;
  outputMode: any;
  pixelSize: any;
  projectionSystem: any;
  sensorHeight: any;
  sensorWidth: any;
  starDatabasePath: any;
  starFWHM: any;
  targetMinimumValue: any;
}
declare class StarMask extends ProcessInstance {
  StarMask: any;
  StarMaskOverlay: any;
  StructureMap: any;
  StructureMapOverlay: any;
  aggregateStructures: any;
  binarizeStructures: any;
  growthCompensation: any;
  highlightsClipping: any;
  invert: any;
  largeScaleGrowth: any;
  limit: any;
  midtonesBalance: any;
  mode: any;
  noiseThreshold: any;
  shadowsClipping: any;
  smallScaleGrowth: any;
  smoothness: any;
  structureContours: any;
  truncation: any;
  waveletLayers: any;
}
declare class StarNet extends ProcessInstance {
  Stride_128: any;
  Stride_16: any;
  Stride_32: any;
  Stride_64: any;
  Stride_8: any;
  mask: any;
  stride: any;
}
declare class Statistics extends ProcessInstance {}
declare class SubframeSelector extends ProcessInstance {
  Abort: any;
  ArcSeconds: any;
  AskUser: any;
  Bits10: any;
  Bits12: any;
  Bits14: any;
  Bits16: any;
  Bits8: any;
  Continue: any;
  DataNumber: any;
  Eccentricity: any;
  EccentricityMeanDev: any;
  Electron: any;
  FWHM: any;
  FWHMMeanDev: any;
  Gaussian: any;
  Index: any;
  Lorentzian: any;
  MeasureSubframes: any;
  Median: any;
  MedianMeanDev: any;
  Moffat10: any;
  Moffat15: any;
  Moffat25: any;
  Moffat4: any;
  Moffat6: any;
  Moffat8: any;
  Noise: any;
  NoiseRatio: any;
  OutputSubframes: any;
  Pixel: any;
  SNRWeight: any;
  StarDetectionPreview: any;
  StarResidual: any;
  StarResidualMeanDev: any;
  Stars: any;
  Weight: any;
  applyHotPixelFilter: any;
  approvalExpression: any;
  backgroundExpansion: any;
  cameraGain: any;
  cameraResolution: any;
  dataUnit: any;
  fileCache: any;
  graphProperty: any;
  hotPixelFilterRadius: any;
  inputHints: any;
  maxDistortion: any;
  measurements: any;
  noiseLayers: any;
  noiseReductionFilterRadius: any;
  onError: any;
  outputDirectory: any;
  outputExtension: any;
  outputHints: any;
  outputKeyword: any;
  outputPostfix: any;
  outputPrefix: any;
  overwriteExistingFiles: any;
  peakResponse: any;
  pedestal: any;
  psfFit: any;
  psfFitCircular: any;
  roiX0: any;
  roiX1: any;
  roiY0: any;
  roiY1: any;
  routine: any;
  scaleUnit: any;
  sensitivity: any;
  siteLocalMidnight: any;
  sortProperty: any;
  structureLayers: any;
  subframeScale: any;
  subframes: any;
  trimmingFactor: any;
  upperLimit: any;
  weightingExpression: any;
  xyStretch: any;
}
declare class Superbias extends ProcessInstance {
  columns: any;
  excludeLargeScale: any;
  medianTransform: any;
  multiscaleLayers: any;
  rows: any;
  superbiasViewId: any;
  superbiasViewId1: any;
  trimmingFactor: any;
}
declare class TGVDenoise extends ProcessInstance {
  convergenceEnabledC: any;
  convergenceEnabledL: any;
  convergenceLimitC: any;
  convergenceLimitL: any;
  edgeProtectionC: any;
  edgeProtectionL: any;
  filterEnabledC: any;
  filterEnabledL: any;
  maxIterationsC: any;
  maxIterationsL: any;
  rgbkMode: any;
  smoothnessC: any;
  smoothnessL: any;
  strengthC: any;
  strengthL: any;
  supportEnabled: any;
  supportHighlightsClip: any;
  supportMidtonesBalance: any;
  supportPreview: any;
  supportRemovedWaveletLayers: any;
  supportShadowsClip: any;
  supportViewId: any;
}
declare class UnsharpMask extends ProcessInstance {
  amount: any;
  deringing: any;
  deringingBright: any;
  deringingDark: any;
  linear: any;
  outputDeringingMaps: any;
  rangeHigh: any;
  rangeLow: any;
  sigma: any;
  useLuminance: any;
}
