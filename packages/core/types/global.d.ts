declare class ACDNR {
  applyToLightness: any;
  applyToLuminance: any;
  applyToChrominance: any;
  useMaskL: any;
  useMaskC: any;
  sigmaL: any;
  sigmaC: any;
  shapeL: any;
  shapeC: any;
  amountL: any;
  amountC: any;
  iterationsL: any;
  iterationsC: any;
  prefilterMethodL: any;
  prefilterMethodC: any;
  protectionMethodL: any;
  protectionMethodC: any;
  minStructSizeL: any;
  minStructSizeC: any;
  protectDarkSidesL: any;
  protectDarkSidesC: any;
  darkSidesThresholdL: any;
  darkSidesThresholdC: any;
  darkSidesOverdriveL: any;
  darkSidesOverdriveC: any;
  protectBrightSidesL: any;
  protectBrightSidesC: any;
  brightSidesThresholdL: any;
  brightSidesThresholdC: any;
  brightSidesOverdriveL: any;
  brightSidesOverdriveC: any;
  starProtectionL: any;
  starProtectionC: any;
  starThresholdL: any;
  starThresholdC: any;
  previewMask: any;
  maskRemovedWaveletLayers: any;
  maskShadowsClipping: any;
  maskHighlightsClipping: any;
  maskMTF: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  None: any;
  Multiscale: any;
  Recursive: any;
  WeightedAverage3x3: any;
  UnweightedAverage3x3: any;
  Median3x3: any;
  WeightedAverage5x5: any;
  Median5x5: any;
}
declare class ATrousWaveletTransform {
  layers: any;
  scaleDelta: any;
  scalingFunctionData: any;
  scalingFunctionRowFilter: any;
  scalingFunctionColFilter: any;
  scalingFunctionNoiseSigma: any;
  scalingFunctionName: any;
  largeScaleFunction: any;
  curveBreakPoint: any;
  noiseThresholding: any;
  noiseThresholdingAmount: any;
  noiseThreshold: any;
  softThresholding: any;
  useMultiresolutionSupport: any;
  deringing: any;
  deringingDark: any;
  deringingBright: any;
  outputDeringingMaps: any;
  lowRange: any;
  highRange: any;
  previewMode: any;
  previewLayer: any;
  toLuminance: any;
  toChrominance: any;
  linear: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  NoFunction: any;
  Hyperbolic: any;
  Log10: any;
  Ln: any;
  Disabled: any;
  AllPixelChanges: any;
  IncreasingPixels: any;
  DecreasingPixels: any;
}
declare class ATrousWaveletTransformV1 {
  version: any;
  layers: any;
  scaleDelta: any;
  scalingFunctionData: any;
  scalingFunctionKernelSize: any;
  scalingFunctionNoiseSigma: any;
  scalingFunctionNoiseLayers: any;
  scalingFunctionName: any;
  largeScaleFunction: any;
  curveBreakPoint: any;
  noiseThresholdingAmount: any;
  noiseThreshold: any;
  lowRange: any;
  highRange: any;
  previewMode: any;
  previewLayer: any;
  toLuminance: any;
  toChrominance: any;
  linear: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Recursive: any;
  Morphological: any;
  DirectionalMultiway: any;
  NoFunction: any;
  Hyperbolic: any;
  Log10: any;
  Ln: any;
  Disabled: any;
  AllPixelChanges: any;
  IncreasingPixels: any;
  DecreasingPixels: any;
  SignificantStructures: any;
}
declare class AdaptiveStretch {
  noiseThreshold: any;
  protection: any;
  useProtection: any;
  maxCurvePoints: any;
  useROI: any;
  roiX0: any;
  roiY0: any;
  roiX1: any;
  roiY1: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Annotation {
  annotationText: any;
  annotationFont: any;
  annotationFontSize: any;
  annotationFontBold: any;
  annotationFontItalic: any;
  annotationFontUnderline: any;
  annotationFontShadow: any;
  annotationColor: any;
  annotationPositionX: any;
  annotationPositionY: any;
  annotationShowLeader: any;
  annotationLeaderPositionX: any;
  annotationLeaderPositionY: any;
  annotationOpacity: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ArcsinhStretch {
  stretch: any;
  blackPoint: any;
  protectHighlights: any;
  useRGBWS: any;
  previewClipped: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}

declare class ArrayBuffer {
  byteLength: any;
  slice: any;
}
declare class AssignICCProfile {
  targetProfile: any;
  mode: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  AssignNewProfile: any;
  AssignDefaultProfile: any;
  LeaveUntagged: any;
}
declare class AssistedColorCalibration {
  redCorrectionFactor: any;
  GreenCorrectionFactor: any;
  BlueCorrectionFactor: any;
  backgroundRef: any;
  HistogramShadows: any;
  HistogramHighlights: any;
  HistogramMidtones: any;
  SaturationBoost: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class AutoHistogram {
  clip: any;
  isHistogramClipEnabled: any;
  clipTogether: any;
  isGlobalHistogramClip: any;
  clipLowR: any;
  clipLowG: any;
  clipLowB: any;
  clipHighR: any;
  clipHighG: any;
  clipHighB: any;
  stretch: any;
  isGammaEnabled: any;
  stretchTogether: any;
  isGlobalGamma: any;
  stretchMethod: any;
  targetMedianR: any;
  medianR: any;
  targetMedianG: any;
  medianG: any;
  targetMedianB: any;
  medianB: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Gamma: any;
  Logarithm: any;
  MTF: any;
}
declare class AutomaticBackgroundExtractor {
  tolerance: any;
  deviation: any;
  unbalance: any;
  minBoxFraction: any;
  maxBackground: any;
  minBackground: any;
  useBrightnessLimits: any;
  useLuminanceLimits: any;
  polyDegree: any;
  boxSize: any;
  boxSeparation: any;
  modelImageSampleFormat: any;
  abeDownsample: any;
  writeSampleBoxes: any;
  justTrySamples: any;
  targetCorrection: any;
  normalize: any;
  discardModel: any;
  replaceTarget: any;
  correctedImageId: any;
  correctedImageSampleFormat: any;
  verboseCoefficients: any;
  compareModel: any;
  compareFactor: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  i8: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
  None: any;
  Subtract: any;
  Divide: any;
  SameAsTarget: any;
}
declare class B3Estimator {
  inputViewId1: any;
  inputViewId2: any;
  inputCenter1: any;
  inputCenter2: any;
  outputCenter: any;
  intensityUnits: any;
  syntheticImage: any;
  thermalMap: any;
  outOfRangeMask: any;
  syntheticImageViewId: any;
  thermalMapViewId: any;
  outOfRangeMaskViewId: any;
  substractBackground1: any;
  backgroundReferenceViewId1: any;
  backgroundLow1: any;
  backgroundHigh1: any;
  backgroundUseROI1: any;
  backgroundROIX01: any;
  backgroundROIY01: any;
  backgroundROIX11: any;
  backgroundROIY11: any;
  outputBackgroundReferenceMask1: any;
  substractBackground2: any;
  backgroundReferenceViewId2: any;
  backgroundLow2: any;
  backgroundHigh2: any;
  backgroundUseROI2: any;
  backgroundROIX02: any;
  backgroundROIY02: any;
  backgroundROIX12: any;
  backgroundROIY12: any;
  outputBackgroundReferenceMask2: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  IntensityUnits_PhotonsFrequency: any;
  IntensityUnits_EnergyFrequency: any;
  IntensityUnits_PhotonsWavelength: any;
  IntensityUnits_EnergyWavelength: any;
}
declare class BackgroundNeutralization {
  backgroundReferenceViewId: any;
  backgroundLow: any;
  backgroundHigh: any;
  useROI: any;
  roiX0: any;
  roiY0: any;
  roiX1: any;
  roiY1: any;
  mode: any;
  targetBackground: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  TargetBackground: any;
  Rescale: any;
  RescaleAsNeeded: any;
  Truncate: any;
}
declare class Binarize {
  thresholdRK: any;
  thresholdG: any;
  thresholdB: any;
  isGlobal: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Bitmap {
  width: any;
  height: any;
  bounds: any;
  pixelFormat: any;
  physicalPixelRatio: any;
  assign: any;
  clear: any;
  isEmpty: any;
  pixel: any;
  setPixel: any;
  mirrored: any;
  mirroredHorizontally: any;
  mirroredVertically: any;
  scaled: any;
  scaledTo: any;
  rotated: any;
  load: any;
  save: any;
  subimage: any;
  copy: any;
  fill: any;
  or: any;
  and: any;
  xor: any;
  xorRect: any;
  invert: any;
  invertRect: any;
  replaceColor: any;
  setAlpha: any;
  setTransparency: any;
}
declare class Blink {
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Boolean {
  toSource: any;
  toString: any;
  valueOf: any;
}
declare class Brush {
  color: any;
  style: any;
  stipple: any;
  isSolid: any;
  isEmpty: any;
  isStippled: any;
  assign: any;
}
declare class ByteArray {
  length: any;
  capacity: any;
  available: any;
  isEmpty: any;
  lowerBound: any;
  upperBound: any;
  assign: any;
  swap: any;
  at: any;
  reserve: any;
  squeeze: any;
  grow: any;
  add: any;
  insert: any;
  remove: any;
  clear: any;
  replace: any;
  reverse: any;
  sort: any;
  linearSearch: any;
  binarySearch: any;
  toString: any;
  utf8ToString: any;
  toFloat32Array: any;
  toFloat64Array: any;
  toUint32Array: any;
  toUint16Array: any;
  toUint8Array: any;
  toUint8ClampedArray: any;
  toInt32Array: any;
  toInt16Array: any;
  toInt8Array: any;
  toHex: any;
  toBase64: any;
  hash: any;
  hash32: any;
  hash64: any;
}
declare class ChannelCombination {
  colorSpace: any;
  channels: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RGB: any;
  CIEXYZ: any;
  CIELab: any;
  CIELch: any;
  HSV: any;
  HSI: any;
}
declare class ChannelExtraction {
  colorSpace: any;
  channels: any;
  sampleFormat: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RGB: any;
  CIEXYZ: any;
  CIELab: any;
  CIELch: any;
  HSV: any;
  HSI: any;
  SameAsSource: any;
  i8: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
}
declare class ChannelMatch {
  channels: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class CheckBox {
  text: any;
  checked: any;
  state: any;
  onCheck: any;
  onClick: any;
  onPress: any;
  onRelease: any;
  tristate: any;
}
declare class Cipher {
  algorithmName: any;
  algorithm: any;
  keyLength: any;
  encrypt: any;
  decrypt: any;
}
declare class CloneStamp {
  cloner: any;
  actions: any;
  width: any;
  height: any;
  clonerColor: any;
  boundsColor: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ColorCalibration {
  whiteReferenceViewId: any;
  whiteLow: any;
  whiteHigh: any;
  whiteUseROI: any;
  whiteROIX0: any;
  whiteROIY0: any;
  whiteROIX1: any;
  whiteROIY1: any;
  structureDetection: any;
  structureLayers: any;
  noiseLayers: any;
  manualWhiteBalance: any;
  manualRedFactor: any;
  manualGreenFactor: any;
  manualBlueFactor: any;
  backgroundReferenceViewId: any;
  backgroundLow: any;
  backgroundHigh: any;
  backgroundUseROI: any;
  backgroundROIX0: any;
  backgroundROIY0: any;
  backgroundROIX1: any;
  backgroundROIY1: any;
  outputWhiteReferenceMask: any;
  outputBackgroundReferenceMask: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ColorManagementSetup {
  enabled: any;
  updateMonitorProfile: any;
  defaultRGBProfile: any;
  defaultGrayscaleProfile: any;
  defaultRenderingIntent: any;
  onProfileMismatch: any;
  onMissingProfile: any;
  defaultEmbedProfilesInRGBImages: any;
  defaultEmbedProfilesInGrayscaleImages: any;
  useLowResolutionCLUTs: any;
  proofingProfile: any;
  proofingIntent: any;
  useProofingBPC: any;
  defaultProofingEnabled: any;
  defaultGamutCheckEnabled: any;
  gamutWarningColor: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Perceptual: any;
  Saturation: any;
  RelativeColorimetric: any;
  AbsoluteColorimetric: any;
  AskUser: any;
  KeepEmbedded: any;
  ConvertToDefault: any;
  DiscardEmbedded: any;
  DisableCM: any;
  AssignDefault: any;
  LeaveUntagged: any;
}
declare class ColorSaturation {
  HS: any;
  HSt: any;
  hueShift: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  CubicSpline: any;
  Linear: any;
  AkimaSubsplines: any;
}
declare class ComboBox {
  currentItem: any;
  autoCompletion: any;
  editEnabled: any;
  editText: any;
  iconHeight: any;
  iconWidth: any;
  maxVisibleItemCount: any;
  minItemCharWidth: any;
  popupToolTip: any;
  numberOfItems: any;
  onEditTextUpdated: any;
  onItemHighlighted: any;
  onItemSelected: any;
  addItem: any;
  clear: any;
  clearEditText: any;
  clearItemIcon: any;
  clearItemText: any;
  findItem: any;
  hideList: any;
  insertItem: any;
  itemIcon: any;
  itemText: any;
  removeItem: any;
  setItemIcon: any;
  setItemText: any;
  showList: any;
}
declare class CometAlignment {
  targetFrames: any;
  inputHints: any;
  outputHints: any;
  outputDir: any;
  outputExtension: any;
  prefix: any;
  postfix: any;
  overwrite: any;
  reference: any;
  subtractFile: any;
  subtractMode: any;
  enableLinearFit: any;
  rejectLow: any;
  rejectHigh: any;
  normalize: any;
  drzSaveStarsAligned: any;
  drzSaveCometAligned: any;
  operandIsDI: any;
  pixelInterpolation: any;
  linearClampingThreshold: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  NearestNeighbor: any;
  Bilinear: any;
  BicubicSpline: any;
  BicubicBSpline: any;
  Lanczos3: any;
  Lanczos4: any;
  Lanczos5: any;
  MitchellNetravaliFilter: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Auto: any;
}
declare class Complex {
  r: any;
  re: any;
  real: any;
  i: any;
  im: any;
  imag: any;
  assign: any;
  add: any;
  sub: any;
  mul: any;
  div: any;
  pow: any;
  conj: any;
  setConj: any;
  sqrt: any;
  setSqrt: any;
  exp: any;
  setExp: any;
  ln: any;
  setLn: any;
  log: any;
  setLog: any;
  sin: any;
  setSin: any;
  cos: any;
  setCos: any;
  tan: any;
  setTan: any;
  sinh: any;
  setSinh: any;
  cosh: any;
  setCosh: any;
  tanh: any;
  setTanh: any;
  mag: any;
  abs: any;
  norm: any;
  arg: any;
  toString: any;
  toArray: any;
}
declare class Compression {
  algorithmName: any;
  maxCompressionLevel: any;
  defaultCompressionLevel: any;
  compressionLevel: any;
  byteShuffling: any;
  itemSize: any;
  subblockSize: any;
  checksums: any;
  compress: any;
  uncompress: any;
}
declare class ConicalGradientBrush {
  center: any;
  angle: any;
}
declare class Control {
  objectId: any;
  uniqueId: any;
  frameRect: any;
  clientRect: any;
  width: any;
  height: any;
  boundsRect: any;
  minWidth: any;
  minHeight: any;
  maxWidth: any;
  maxHeight: any;
  scaledMinWidth: any;
  scaledMinHeight: any;
  scaledMaxWidth: any;
  scaledMaxHeight: any;
  isFixedWidth: any;
  isFixedHeight: any;
  smartMinWidth: any;
  smartMinHeight: any;
  position: any;
  isUnderMouse: any;
  sizer: any;
  childrenRect: any;
  parent: any;
  window: any;
  dialog: any;
  displayPixelRatio: any;
  resourcePixelRatio: any;
  enabled: any;
  mouseTracking: any;
  visible: any;
  visibleRect: any;
  isMaximized: any;
  isMinimized: any;
  isModal: any;
  isWindow: any;
  isDialog: any;
  isActiveWindow: any;
  hasFocus: any;
  focusStyle: any;
  focusedChild: any;
  childToFocus: any;
  nextSiblingToFocus: any;
  canUpdate: any;
  cursor: any;
  styleSheet: any;
  backgroundColor: any;
  foregroundColor: any;
  canvasColor: any;
  alternateCanvasColor: any;
  textColor: any;
  buttonColor: any;
  buttonTextColor: any;
  highlightColor: any;
  highlightedTextColor: any;
  font: any;
  windowOpacity: any;
  windowTitle: any;
  toolTip: any;
  onDestroy: any;
  onShow: any;
  onHide: any;
  onClose: any;
  onGetFocus: any;
  onLoseFocus: any;
  onEnter: any;
  onLeave: any;
  onMove: any;
  onResize: any;
  onPaint: any;
  onKeyPress: any;
  onKeyRelease: any;
  onMouseMove: any;
  onMouseDoubleClick: any;
  onMousePress: any;
  onMouseRelease: any;
  onMouseWheel: any;
  onChildCreate: any;
  onChildDestroy: any;
  resize: any;
  adjustToContents: any;
  setMinWidth: any;
  setMinHeight: any;
  setMinSize: any;
  setMaxWidth: any;
  setMaxHeight: any;
  setMaxSize: any;
  setFixedWidth: any;
  setFixedHeight: any;
  setFixedSize: any;
  setScaledMinWidth: any;
  setScaledMinHeight: any;
  setScaledMinSize: any;
  setScaledMaxWidth: any;
  setScaledMaxHeight: any;
  setScaledMaxSize: any;
  setScaledFixedWidth: any;
  setScaledFixedHeight: any;
  setScaledFixedSize: any;
  setVariableWidth: any;
  setVariableHeight: any;
  setVariableSize: any;
  move: any;
  bringToFront: any;
  sendToBack: any;
  stackUnder: any;
  showAlias: any;
  hideAlias: any;
  globalToLocal: any;
  localToGlobal: any;
  parentToLocal: any;
  localToParent: any;
  controlToLocal: any;
  localToControl: any;
  childByPos: any;
  isAncestorOf: any;
  show: any;
  hide: any;
  activateWindow: any;
  update: any;
  repaint: any;
  restyle: any;
  ensureLayoutUpdated: any;
  scroll: any;
  setCursorToParent: any;
  render: any;
  logicalPixelsToPhysical: any;
  physicalPixelsToLogical: any;
  scaledResource: any;
  scaledStyleSheet: any;
}
declare class ConvertToGrayscale {
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ConvertToRGBColor {
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Convolution {
  mode: any;
  sigma: any;
  shape: any;
  aspectRatio: any;
  rotationAngle: any;
  filterSource: any;
  rescaleHighPass: any;
  viewId: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Parametric: any;
  Library: any;
  Image: any;
  Gaussian: any;
}
declare class CoreApplication {}
declare class CosmeticCorrection {
  targetFrames: any;
  masterDarkPath: any;
  outputDir: any;
  outputExtension: any;
  prefix: any;
  postfix: any;
  overwrite: any;
  amount: any;
  transferFn: any;
  cfa: any;
  useMasterDark: any;
  hotDarkCheck: any;
  hotDarkLevel: any;
  coldDarkCheck: any;
  coldDarkLevel: any;
  useAutoDetect: any;
  hotAutoCheck: any;
  hotAutoValue: any;
  coldAutoCheck: any;
  coldAutoValue: any;
  useDefectList: any;
  defects: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class CreateAlphaChannels {
  fromImage: any;
  sourceId: any;
  invertSource: any;
  closeSource: any;
  transparency: any;
  replace: any;
  count: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Crop {
  leftMargin: any;
  topMargin: any;
  rightMargin: any;
  bottomMargin: any;
  mode: any;
  xResolution: any;
  yResolution: any;
  metric: any;
  forceResolution: any;
  red: any;
  green: any;
  blue: any;
  alpha: any;
  noGUIMessages: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RelativeMargins: any;
  AbsolutePixels: any;
  AbsoluteCentimeters: any;
  AbsoluteInches: any;
}
declare class CryptographicHash {
  algorithmName: any;
  algorithm: any;
  hashLength: any;
  initialize: any;
  update: any;
  finalize: any;
  hash: any;
}
declare class Cursor {
  hotSpot: any;
  hotX: any;
  hotY: any;
  bitmap: any;
  assign: any;
}
declare class CurvesTransformation {
  R: any;
  Rt: any;
  G: any;
  Gt: any;
  B: any;
  Bt: any;
  K: any;
  Kt: any;
  A: any;
  At: any;
  L: any;
  Lt: any;
  a: any;
  at: any;
  b: any;
  bt: any;
  c: any;
  ct: any;
  H: any;
  Ht: any;
  S: any;
  St: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  CubicSpline: any;
  Linear: any;
  AkimaSubsplines: any;
}
declare class DataView {
  buffer: any;
  byteLength: any;
  byteOffset: any;
  getInt8: any;
  getUint8: any;
  getInt16: any;
  getUint16: any;
  getInt32: any;
  getUint32: any;
  getFloat32: any;
  getFloat64: any;
  setInt8: any;
  setUint8: any;
  setInt16: any;
  setUint16: any;
  setInt32: any;
  setUint32: any;
  setFloat32: any;
  setFloat64: any;
}
declare class Date {
  getTime: any;
  getTimezoneOffset: any;
  getYear: any;
  getFullYear: any;
  getUTCFullYear: any;
  getMonth: any;
  getUTCMonth: any;
  getDate: any;
  getUTCDate: any;
  getDay: any;
  getUTCDay: any;
  getHours: any;
  getUTCHours: any;
  getMinutes: any;
  getUTCMinutes: any;
  getSeconds: any;
  getUTCSeconds: any;
  getMilliseconds: any;
  getUTCMilliseconds: any;
  setTime: any;
  setYear: any;
  setFullYear: any;
  setUTCFullYear: any;
  setMonth: any;
  setUTCMonth: any;
  setDate: any;
  setUTCDate: any;
  setHours: any;
  setUTCHours: any;
  setMinutes: any;
  setUTCMinutes: any;
  setSeconds: any;
  setUTCSeconds: any;
  setMilliseconds: any;
  setUTCMilliseconds: any;
  toUTCString: any;
  toLocaleFormat: any;
  toLocaleString: any;
  toLocaleDateString: any;
  toLocaleTimeString: any;
  toDateString: any;
  toTimeString: any;
  toISOString: any;
  toJSON: any;
  toSource: any;
  toString: any;
  valueOf: any;
  toGMTString: any;
}
declare class Debayer {
  cfaPattern: any;
  BayerPattern: any;
  bayerPattern: any;
  debayerMethod: any;
  DebayerMethod: any;
  fbddNoiseReduction: any;
  evaluateNoise: any;
  noiseEvaluationAlgorithm: any;
  showImages: any;
  cfaSourceFilePath: any;
  targetItems: any;
  noGUIMessages: any;
  inputHints: any;
  outputHints: any;
  outputDirectory: any;
  outputExtension: any;
  outputPrefix: any;
  outputPostfix: any;
  overwriteExistingFiles: any;
  onError: any;
  useFileThreads: any;
  fileThreadOverload: any;
  maxFileReadThreads: any;
  maxFileWriteThreads: any;
  outputImage: any;
  noiseEstimateR: any;
  noiseEstimateG: any;
  noiseEstimateB: any;
  noiseFractionR: any;
  noiseFractionG: any;
  noiseFractionB: any;
  noiseAlgorithmR: any;
  noiseAlgorithmG: any;
  noiseAlgorithmB: any;
  outputFileData: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Auto: any;
  RGGB: any;
  BGGR: any;
  GBRG: any;
  GRBG: any;
  GRGB: any;
  GBGR: any;
  RGBG: any;
  BGRG: any;
  SuperPixel: any;
  Bilinear: any;
  VNG: any;
  NoiseEvaluation_KSigma: any;
  NoiseEvaluation_MRS: any;
  OnError_Continue: any;
  OnError_Abort: any;
  OnError_AskUser: any;
}
declare class Deconvolution {
  algorithm: any;
  numberOfIterations: any;
  deringing: any;
  deringingDark: any;
  deringingBright: any;
  deringingSupport: any;
  deringingSupportAmount: any;
  deringingSupportViewId: any;
  toLuminance: any;
  useLuminance: any;
  psfMode: any;
  psfSigma: any;
  psfGaussianSigma: any;
  psfShape: any;
  psfGaussianShape: any;
  psfAspectRatio: any;
  psfGaussianAspectRatio: any;
  psfRotationAngle: any;
  psfGaussianRotationAngle: any;
  psfMotionLength: any;
  psfMotionRotationAngle: any;
  psfViewId: any;
  psfFFTSizeLimit: any;
  useRegularization: any;
  waveletLayers: any;
  noiseModel: any;
  numberOfWaveletLayers: any;
  scalingFunction: any;
  convergence: any;
  rangeLow: any;
  rangeHigh: any;
  iterations: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RichardsonLucy: any;
  VanCittert: any;
  Parametric: any;
  MotionBlur: any;
  External: any;
  Gaussian: any;
  Poisson: any;
  B3Spline5x5: any;
  LinearInterpolation3x3: any;
  SmallScale3x3: any;
}
declare class DefectMap {
  mapId: any;
  operation: any;
  structure: any;
  isCFA: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Mean: any;
  Gaussian: any;
  Minimum: any;
  Maximum: any;
  Median: any;
  Square: any;
  Circular: any;
  Horizontal: any;
  Vertical: any;
}
declare class Dialog extends Control {
  userResizable: any;
  result: any;
  onExecute: any;
  onReturn: any;
  execute: any;
  open: any;
  done: any;
  ok: any;
  cancel: any;
  newInstance: any;
}
declare class DigitalDevelopment {
  a: any;
  b: any;
  sigma: any;
  m0: any;
  m1: any;
  m2: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Red: any;
  Green: any;
  Blue: any;
  Luminance: any;
}
declare class Divide {
  flatId: any;
  linearization: any;
  shadowsLimit: any;
  highlightsLimit: any;
  shadowsContinuity: any;
  highlightsContinuity: any;
  shadowsAmount: any;
  highlightsAmount: any;
  statisticalDownLimit: any;
  statisticalUpLimit: any;
  method: any;
  normalization: any;
  customNormalization: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  PlainDivision: any;
  ImageLinearization: any;
  FixedValueZone: any;
  StatisticalValueZone: any;
  Minimum: any;
  Median: any;
  Mean: any;
  Maximum: any;
  Custom: any;
}
declare class DrizzleIntegration {
  inputData: any;
  inputHints: any;
  inputDirectory: any;
  scale: any;
  dropShrink: any;
  kernelFunction: any;
  kernelGridSize: any;
  originX: any;
  originY: any;
  enableCFA: any;
  cfaPattern: any;
  enableRejection: any;
  enableImageWeighting: any;
  enableSurfaceSplines: any;
  enableLocalDistortion: any;
  enableLocalNormalization: any;
  enableAdaptiveNormalization: any;
  useROI: any;
  roiX0: any;
  roiY0: any;
  roiX1: any;
  roiY1: any;
  closePreviousImages: any;
  truncateOnOutOfRange: any;
  noGUIMessages: any;
  onError: any;
  integrationImageId: any;
  weightImageId: any;
  numberOfChannels: any;
  outputPixels: any;
  integratedPixels: any;
  outputRangeLow: any;
  outputRangeHigh: any;
  totalRejectedLowRK: any;
  totalRejectedLowG: any;
  totalRejectedLowB: any;
  totalRejectedHighRK: any;
  totalRejectedHighG: any;
  totalRejectedHighB: any;
  totalData: any;
  imageData: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Kernel_Square: any;
  Kernel_Circular: any;
  Kernel_Gaussian: any;
  Kernel_Variable10: any;
  Kernel_Variable15: any;
  Kernel_Variable30: any;
  Kernel_Variable40: any;
  Kernel_Variable50: any;
  Kernel_Variable60: any;
  Continue: any;
  Abort: any;
  AskUser: any;
}
declare class DynamicAlignment {
  data: any;
  sourceImageId: any;
  registeredImageId: any;
  registeredImageSampleFormat: any;
  points: any;
  sourceImageWidth: any;
  sourceImageHeight: any;
  targetImageWidth: any;
  targetImageHeight: any;
  searchFeatures: any;
  sourceSearchRadius: any;
  targetSearchRadius: any;
  threshold: any;
  removedLayers: any;
  sampleColor: any;
  selectedSampleColor: any;
  selectedSampleFillColor: any;
  badSampleColor: any;
  badSampleFillColor: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  SameAsTarget: any;
  i8: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
}
declare class DynamicBackgroundExtraction {
  data: any;
  numberOfChannels: any;
  derivativeOrder: any;
  smoothing: any;
  ignoreWeights: any;
  modelId: any;
  modelWidth: any;
  modelHeight: any;
  downsample: any;
  modelSampleFormat: any;
  targetCorrection: any;
  normalize: any;
  discardModel: any;
  replaceTarget: any;
  correctedImageId: any;
  correctedImageSampleFormat: any;
  samples: any;
  imageWidth: any;
  imageHeight: any;
  symmetryCenterX: any;
  symmetryCenterY: any;
  tolerance: any;
  shadowsRelaxation: any;
  minSampleFraction: any;
  defaultSampleRadius: any;
  samplesPerRow: any;
  minWeight: any;
  sampleColor: any;
  selectedSampleColor: any;
  selectedSampleFillColor: any;
  badSampleColor: any;
  badSampleFillColor: any;
  axisColor: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  SameAsTarget: any;
  i8: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
  None: any;
  Subtract: any;
  Divide: any;
}
declare class DynamicCrop {
  centerX: any;
  centerY: any;
  width: any;
  height: any;
  angle: any;
  scaleX: any;
  scaleY: any;
  optimizeFast: any;
  interpolation: any;
  clampingThreshold: any;
  smoothness: any;
  xResolution: any;
  yResolution: any;
  metric: any;
  forceResolution: any;
  red: any;
  green: any;
  blue: any;
  alpha: any;
  noGUIMessages: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  NearestNeighbor: any;
  Bilinear: any;
  BicubicSpline: any;
  BicubicBSpline: any;
  Lanczos3: any;
  Lanczos4: any;
  MitchellNetravaliFilter: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Auto: any;
}
declare class DynamicPSF {
  views: any;
  stars: any;
  psf: any;
  autoPSF: any;
  circularPSF: any;
  gaussianPSF: any;
  moffatPSF: any;
  moffat10PSF: any;
  moffat8PSF: any;
  moffat6PSF: any;
  moffat4PSF: any;
  moffat25PSF: any;
  moffat15PSF: any;
  lorentzianPSF: any;
  variableShapePSF: any;
  autoVariableShapePSF: any;
  betaMin: any;
  betaMax: any;
  signedAngles: any;
  regenerate: any;
  astrometry: any;
  searchRadius: any;
  threshold: any;
  autoAperture: any;
  scaleMode: any;
  scaleValue: any;
  scaleKeyword: any;
  starColor: any;
  selectedStarColor: any;
  selectedStarFillColor: any;
  badStarColor: any;
  badStarFillColor: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Star_NotDetected: any;
  Star_DetectedOk: any;
  Star_NoSignificantData: any;
  Star_CrossingEdges: any;
  Star_OutsideImage: any;
  Star_NoConvergence: any;
  Star_UnknownError: any;
  Function_Gaussian: any;
  Function_Moffat: any;
  Function_Moffat10: any;
  Function_Moffat8: any;
  Function_Moffat6: any;
  Function_Moffat4: any;
  Function_Moffat25: any;
  Function_Moffat15: any;
  Function_Lorentzian: any;
  Function_VariableShape: any;
  PSF_NotFitted: any;
  PSF_FittedOk: any;
  PSF_BadParameters: any;
  PSF_NoSolution: any;
  PSF_NoConvergence: any;
  PSF_InaccurateSolution: any;
  PSF_UnknownError: any;
  Scale_Pixels: any;
  Scale_StandardMetadata: any;
  Scale_LiteralValue: any;
  Scale_CustomKeyword: any;
  Scale_StandardKeywords: any;
}
declare class Edit {
  text: any;
  caretPosition: any;
  selectionStart: any;
  selectionEnd: any;
  selectedText: any;
  hasSelection: any;
  rightAlignment: any;
  modified: any;
  passwordMode: any;
  readOnly: any;
  maxLength: any;
  onCaretPositionUpdated: any;
  onEditCompleted: any;
  onReturnPressed: any;
  onSelectionUpdated: any;
  onTextUpdated: any;
  clear: any;
  end: any;
  home: any;
  selectAll: any;
  unselect: any;
}
declare class ElapsedTime {
  value: any;
  text: any;
  reset: any;
  since: any;
}
declare class EphemerisFile {
  filePath: any;
  startTime: any;
  endTime: any;
  constants: any;
  objects: any;
  creationTime: any;
  creatorOS: any;
  creatorApplication: any;
  title: any;
  briefDescription: any;
  description: any;
  organizationName: any;
  authors: any;
  copyright: any;
  open: any;
  close: any;
  isConstantAvailable: any;
  constantValue: any;
  isObjectAvailable: any;
  objectName: any;
}
declare class EphemerisHandle {
  objectId: any;
  originId: any;
  objectName: any;
  startTime: any;
  endTime: any;
  hasDerivative: any;
  H: any;
  G: any;
  B_V: any;
  D: any;
  stateVector: any;
  stateVectors: any;
}
declare class Error {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
  toSource: any;
  toString: any;
}
declare class EvalError {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
}
declare class ExponentialTransformation {
  functionType: any;
  order: any;
  sigma: any;
  useLightnessMask: any;
  luminanceMask: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  PIP: any;
  SMI: any;
}
declare class ExternalProcess {
  environment: any;
  error: any;
  exitCode: any;
  exitStatus: any;
  pid: any;
  workingDirectory: any;
  bytesAvailable: any;
  bytesToWrite: any;
  isRunning: any;
  isStarting: any;
  standardOutput: any;
  stdout: any;
  standardError: any;
  stderr: any;
  outputData: any;
  standardInput: any;
  stdin: any;
  onError: any;
  onFinished: any;
  onStandardErrorDataAvailable: any;
  onStandardOutputDataAvailable: any;
  onStarted: any;
  onStateChanged: any;
  start: any;
  waitForStarted: any;
  waitForFinished: any;
  waitForDataAvailable: any;
  waitForDataWritten: any;
  redirectStandardOutput: any;
  redirectStandardError: any;
  redirectStandardInput: any;
  closeStandardOutput: any;
  closeStandardError: any;
  closeStandardInput: any;
  kill: any;
  terminate: any;
}
declare class ExtractAlphaChannels {
  channels: any;
  channelList: any;
  extract: any;
  delete: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  AllAlphaChannels: any;
  ActiveAlphaChannel: any;
  ChannelList: any;
}
declare class FITSHeader {
  keywords: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class FITSKeyword {
  name: any;
  value: any;
  comment: any;
  isNull: any;
  isString: any;
  isBoolean: any;
  isNumeric: any;
  numericValue: any;
  strippedValue: any;
  assign: any;
  trim: any;
  toString: any;
  toArray: any;
}
declare class FastRotation {
  mode: any;
  noGUIMessages: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Rotate180: any;
  Rotate90CW: any;
  Rotate90CCW: any;
  HorizontalMirror: any;
  VerticalMirror: any;
}
declare class File {
  isOpen: any;
  path: any;
  mode: any;
  canRead: any;
  canWrite: any;
  position: any;
  isEOF: any;
  size: any;
  seek: any;
  seekEnd: any;
  rewind: any;
  read: any;
  write: any;
  outText: any;
  outTextLn: any;
  flush: any;
  open: any;
  openForReading: any;
  openForReadWrite: any;
  create: any;
  createForWriting: any;
  openOrCreate: any;
  close: any;
}
declare class FileDialog {
  caption: any;
  filters: any;
  initialPath: any;
  selectedFileExtension: any;
  execute: any;
}
declare class FileDownload {
  contentType: any;
}
declare class FileFind {
  isValid: any;
  searchPath: any;
  name: any;
  attributes: any;
  isDirectory: any;
  isFile: any;
  isSymbolicLink: any;
  isHidden: any;
  size: any;
  numberOfLinks: any;
  userId: any;
  groupId: any;
  created: any;
  lastAccessed: any;
  lastModified: any;
  begin: any;
  next: any;
  end: any;
}
declare class FileFormat {
  name: any;
  fileExtensions: any;
  mimeTypes: any;
  version: any;
  description: any;
  implementation: any;
  icon: any;
  smallIcon: any;
  canRead: any;
  canWrite: any;
  canReadIncrementally: any;
  canWriteIncrementally: any;
  canStore8Bit: any;
  canStore16Bit: any;
  canStore32Bit: any;
  canStore64Bit: any;
  canStoreFloat: any;
  canStoreDouble: any;
  canStoreComplex: any;
  canStoreDComplex: any;
  canStoreGrayscale: any;
  canStoreRGBColor: any;
  canStoreAlphaChannels: any;
  canStoreResolution: any;
  canStoreKeywords: any;
  canStoreICCProfiles: any;
  canStoreThumbnails: any;
  canStoreProperties: any;
  canStoreImageProperties: any;
  canStoreRGBWS: any;
  canStoreDisplayFunctions: any;
  canStoreColorFilterArrays: any;
  supportsCompression: any;
  supportsMultipleImages: any;
  canEditPreferences: any;
  usesFormatSpecificData: any;
  supportsViewProperties: any;
  isDeprecated: any;
  validateFormatSpecificData: any;
  disposeFormatSpecificData: any;
  editPreferences: any;
  queryFormatStatus: any;
}
declare class FileFormatInstance {
  format: any;
  isOpen: any;
  filePath: any;
  selectedImageIndex: any;
  formatSpecificData: any;
  imageFormatInfo: any;
  keywords: any;
  iccProfile: any;
  thumbnail: any;
  properties: any;
  imageProperties: any;
  rgbws: any;
  displayFunction: any;
  colorFilterArray: any;
  wasInexactRead: any;
  wasLossyWrite: any;
  close: any;
  open: any;
  readImage: any;
  read: any;
  create: any;
  setOptions: any;
  setImageId: any;
  writeImage: any;
  createImage: any;
  write: any;
  readProperty: any;
  readImageProperty: any;
  writeProperty: any;
  writeImageProperty: any;
}
declare class FileInfo {
  attributes: any;
  completeSuffix: any;
  directory: any;
  drive: any;
  exists: any;
  extension: any;
  groupId: any;
  isDirectory: any;
  isExecutable: any;
  isFile: any;
  isHidden: any;
  isReadable: any;
  isSymbolicLink: any;
  isWritable: any;
  lastAccessed: any;
  lastModified: any;
  name: any;
  nameAndExtension: any;
  nameAndSuffix: any;
  numberOfHardLinks: any;
  path: any;
  size: any;
  suffix: any;
  symbolicLinkTarget: any;
  timeCreated: any;
  userId: any;
  assign: any;
  clear: any;
  refresh: any;
}
declare class FileTransfer {
  remoteURL: any;
  localFilePath: any;
  isDownload: any;
  isUpload: any;
  ok: any;
  responseCode: any;
  bytesTransferred: any;
  totalTime: any;
  totalSpeed: any;
  perform: any;
}
declare class FileUpload {}
declare class FileWatcher {
  files: any;
  directories: any;
  onFileChanged: any;
  onDirectoryChanged: any;
  addPath: any;
  addPaths: any;
  removePath: any;
  removePaths: any;
  clear: any;
}
declare class Float32Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class Float64Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class FluxCalibration {
  wavelength: any;
  wavelengthMode: any;
  wavelengthKeyword: any;
  transmissivity: any;
  transmissivityMode: any;
  transmissivityKeyword: any;
  filterWidth: any;
  filterWidthMode: any;
  filterWidthKeyword: any;
  aperture: any;
  apertureMode: any;
  apertureKeyword: any;
  centralObstruction: any;
  centralObstructionMode: any;
  centralObstructionKeyword: any;
  exposureTime: any;
  exposureTimeMode: any;
  exposureTimeKeyword: any;
  atmosphericExtinction: any;
  atmosphericExtinctionMode: any;
  atmosphericExtinctionKeyword: any;
  sensorGain: any;
  sensorGainMode: any;
  sensorGainKeyword: any;
  quantumEfficiency: any;
  quantumEfficiencyMode: any;
  quantumEfficiencyKeyword: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Literal: any;
  StandardKeyword: any;
  CustomKeyword: any;
}
declare class Font {
  family: any;
  face: any;
  isExactMatch: any;
  pixelSize: any;
  pointSize: any;
  unscaledPointSize: any;
  fixedPitch: any;
  kerning: any;
  stretchFactor: any;
  weight: any;
  bold: any;
  italic: any;
  underline: any;
  overline: any;
  strikeOut: any;
  ascent: any;
  descent: any;
  height: any;
  lineSpacing: any;
  maxWidth: any;
  assign: any;
  isCharDefined: any;
  width: any;
  boundingRect: any;
  tightBoundingRect: any;
}
declare class FourierTransform {
  radialCoordinates: any;
  centered: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Frame {
  borderWidth: any;
  lineWidth: any;
  frameStyle: any;
}
declare class Function {
  toSource: any;
  toString: any;
  apply: any;
  call: any;
  bind: any;
  isGenerator: any;
  length: any;
  name: any;
  arguments: any;
  caller: any;
}
declare class GREYCstoration {
  amplitude: any;
  numberOfIterations: any;
  contourPreservation: any;
  anisotropy: any;
  noiseScale: any;
  geometryRegularity: any;
  fastApproximation: any;
  precision: any;
  spatialIntegrationStep: any;
  angularIntegrationStep: any;
  interpolation: any;
  coupledChannels: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Nearest: any;
  Bilinear: any;
  RungeKutta: any;
}
declare class GaiaDR2 {
  command: any;
  centerRA: any;
  centerDec: any;
  radius: any;
  magnitudeLow: any;
  magnitudeHigh: any;
  sourceLimit: any;
  inclusionFlags: any;
  exclusionFlags: any;
  verbosity: any;
  sortBy: any;
  generateTextOutput: any;
  textFormat: any;
  textHeaders: any;
  outputFilePath: any;
  sources: any;
  excessCount: any;
  rejectCount: any;
  timeTotal: any;
  timeIO: any;
  countIO: any;
  timeUncompress: any;
  timeDecode: any;
  databaseFilePaths: any;
  databaseMagnitudeLow: any;
  databaseMagnitudeHigh: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  SortBy_DontSort: any;
  SortBy_RA: any;
  SortBy_Dec: any;
  SortBy_G: any;
  SortBy_G_BP: any;
  SortBy_G_RP: any;
  SortBy_Parallax: any;
  TextFormat_CSV: any;
  TextFormat_Tabular: any;
  TextFormat_TabularCompound: any;
  TextHeaders_None: any;
  TextHeaders_TableColumns: any;
  TextHeaders_SearchParameters: any;
  TextHeaders_SearchParametersAndTableColumns: any;
}
declare class GetDirectoryDialog {
  directory: any;
}
declare class GradientBrush {
  stops: any;
  spreadMode: any;
}
declare class GradientHDRComposition {
  targetFrames: any;
  dLogBias: any;
  bKeepLog: any;
  bNegativeBias: any;
  generateMask: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class GradientHDRCompression {
  logMaxGradient: any;
  logMinGradient: any;
  expGradient: any;
  bRescale01: any;
  bPreserveColor: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class GradientMergeMosaic {
  targetFrames: any;
  type: any;
  nShrinkCount: any;
  nFeatherRadius: any;
  blackPoint: any;
  generateMask: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Overlay: any;
  Average: any;
}
declare class Graphics {
  pen: any;
  brush: any;
  brushOrigin: any;
  font: any;
  backgroundBrush: any;
  transparentBackground: any;
  compositionOperator: any;
  opacity: any;
  antialiasing: any;
  textAntialiasing: any;
  smoothInterpolation: any;
  clipping: any;
  clipRect: any;
  transformationEnabled: any;
  transformationMatrix: any;
  isPainting: any;
  multiplyTransformation: any;
  rotateTransformation: any;
  scaleTransformation: any;
  translateTransformation: any;
  shearTransformation: any;
  resetTransformation: any;
  transformed: any;
  begin: any;
  end: any;
  pushState: any;
  popState: any;
  drawPoint: any;
  drawLine: any;
  drawRect: any;
  strokeRect: any;
  fillRect: any;
  eraseRect: any;
  drawRoundedRect: any;
  strokeRoundedRect: any;
  fillRoundedRect: any;
  eraseRoundedRect: any;
  drawEllipse: any;
  strokeEllipse: any;
  fillEllipse: any;
  eraseEllipse: any;
  drawCircle: any;
  strokeCircle: any;
  fillCircle: any;
  eraseCircle: any;
  drawPolygon: any;
  strokePolygon: any;
  fillPolygon: any;
  erasePolygon: any;
  drawPolyline: any;
  drawEllipticArc: any;
  drawArc: any;
  drawEllipticChord: any;
  strokeEllipticChord: any;
  fillEllipticChord: any;
  eraseEllipticChord: any;
  drawChord: any;
  strokeChord: any;
  fillChord: any;
  eraseChord: any;
  drawEllipticPie: any;
  strokeEllipticPie: any;
  fillEllipticPie: any;
  eraseEllipticPie: any;
  drawPie: any;
  strokePie: any;
  fillPie: any;
  erasePie: any;
  drawBitmap: any;
  drawBitmapRect: any;
  drawScaledBitmap: any;
  drawScaledBitmapRect: any;
  drawTiledBitmap: any;
  drawText: any;
  drawTextRect: any;
  textRect: any;
}
declare class GridInterpolation {
  isValid: any;
  referenceRect: any;
  delta: any;
  initialize: any;
  clear: any;
  assign: any;
  evaluate: any;
}
declare class GroupBox {
  title: any;
  titleCheckBox: any;
  checked: any;
  onCheck: any;
}
declare class HDRComposition {
  images: any;
  inputHints: any;
  maskBinarizingThreshold: any;
  maskSmoothness: any;
  maskGrowth: any;
  replaceLargeScales: any;
  autoExposures: any;
  rejectBlack: any;
  useFittingRegion: any;
  fittingRectX0: any;
  fittingRectY0: any;
  fittingRectX1: any;
  fittingRectY1: any;
  generate64BitResult: any;
  outputMasks: any;
  closePreviousImages: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class HDRMultiscaleTransform {
  numberOfLayers: any;
  numberOfIterations: any;
  invertedIterations: any;
  overdrive: any;
  medianTransform: any;
  scalingFunctionData: any;
  scalingFunctionRowFilter: any;
  scalingFunctionColFilter: any;
  scalingFunctionName: any;
  deringing: any;
  smallScaleDeringing: any;
  largeScaleDeringing: any;
  outputDeringingMaps: any;
  midtonesBalanceMode: any;
  midtonesBalance: any;
  toLightness: any;
  toLuminanceOnly: any;
  preserveHue: any;
  luminanceMask: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  NoMidtonesBalance: any;
  Automatic: any;
  Manual: any;
}
declare class Histogram {
  resolution: any;
  lastLevel: any;
  isEmpty: any;
  totalCount: any;
  peakLevel: any;
  normalizedPeakLevel: any;
  peakCount: any;
  entropy: any;
  generate: any;
  assign: any;
  histogramLevel: any;
  normalizedLevel: any;
  count: any;
  clipLow: any;
  normalizedClipLow: any;
  clipHigh: any;
  normalizedClipHigh: any;
  resample: any;
  toArray: any;
}
declare class HistogramTransformation {
  H: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ICCProfileTransformation {
  targetProfile: any;
  toDefaultProfile: any;
  renderingIntent: any;
  useBlackPointCompensation: any;
  useFloatingPointTransformation: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Perceptual: any;
  Saturation: any;
  RelativeColorimetric: any;
  AbsoluteColorimetric: any;
}
declare class Image {
  isEmpty: any;
  width: any;
  height: any;
  bounds: any;
  numberOfChannels: any;
  numberOfNominalChannels: any;
  numberOfNominalSamples: any;
  hasAlphaChannels: any;
  numberOfAlphaChannels: any;
  numberOfAlphaSamples: any;
  numberOfSelectedChannels: any;
  numberOfSelectedPixels: any;
  numberOfSelectedSamples: any;
  numberOfPixels: any;
  numberOfSamples: any;
  colorSpace: any;
  isColor: any;
  isGrayscale: any;
  sampleType: any;
  isInteger: any;
  isReal: any;
  isComplex: any;
  bitsPerSample: any;
  selectedChannel: any;
  firstSelectedChannel: any;
  lastSelectedChannel: any;
  selectedPoint: any;
  selectedRect: any;
  rangeClippingEnabled: any;
  lowRangeClippingEnabled: any;
  highRangeClippingEnabled: any;
  rangeClipLow: any;
  rangeClipHigh: any;
  interpolation: any;
  interpolationClamping: any;
  interpolationSmoothness: any;
  interpolationXRadius: any;
  interpolationYRadius: any;
  selectionPoint: any;
  statusEnabled: any;
  statusInitializationEnabled: any;
  statusTotal: any;
  statusCount: any;
  statusInfo: any;
  isStatusInitialized: any;
  isStatusCompleted: any;
  readRawFile: any;
  writeRawFile: any;
  createAlphaChannels: any;
  deleteAlphaChannels: any;
  deleteAlphaChannel: any;
  canPopSelections: any;
  pushSelections: any;
  popSelections: any;
  resetChannelSelection: any;
  resetRectSelection: any;
  resetSelections: any;
  clonePixelData: any;
  allocate: any;
  free: any;
  assign: any;
  swap: any;
  transfer: any;
  fill: any;
  invert: any;
  truncate: any;
  rescale: any;
  normalize: any;
  binarize: any;
  setAbs: any;
  apply: any;
  count: any;
  minimum: any;
  maximum: any;
  minimumPosition: any;
  maximumPosition: any;
  mean: any;
  median: any;
  variance: any;
  stdDev: any;
  avgDev: any;
  twoSidedAvgDev: any;
  MAD: any;
  twoSidedMAD: any;
  biweightMidvariance: any;
  BWMV: any;
  twoSidedBiweightMidvariance: any;
  twoSidedBWMV: any;
  bendMidvariance: any;
  PBMV: any;
  Sn: any;
  Qn: any;
  norm: any;
  modulus: any;
  sumOfSquares: any;
  meanOfSquares: any;
  cropBy: any;
  cropTo: any;
  crop: any;
  shiftBy: any;
  shiftTo: any;
  shift: any;
  interpolate: any;
  resample: any;
  rotate: any;
  translate: any;
  rotate180: any;
  rotate90ccw: any;
  rotate90cw: any;
  mirrorHorizontal: any;
  mirrorVertical: any;
  polarTransform: any;
  logPolarTransform: any;
  getLightness: any;
  getLuminance: any;
  extractLuminance: any;
  getIntensity: any;
  setLightness: any;
  setLuminance: any;
  sample: any;
  setSample: any;
  getSamples: any;
  setSamples: any;
  getPixels: any;
  setPixels: any;
  initSampleIterator: any;
  nextSample: any;
  previousSample: any;
  skipSamples: any;
  sampleValue: any;
  setSampleValue: any;
  initPixelIterator: any;
  nextPixel: any;
  previousPixel: any;
  skipPixels: any;
  pixelValue: any;
  getPixelValue: any;
  setPixelValue: any;
  forEachSample: any;
  forEachMutableSample: any;
  forEachPixel: any;
  forEachMutablePixel: any;
  convolve: any;
  convolveSeparable: any;
  convolveFFT: any;
  FFT: any;
  fastFourierTransform: any;
  inverseFFT: any;
  inverseFastFourierTransform: any;
  starletTransform: any;
  ATW: any;
  aTrousWaveletTransform: any;
  inverseStarletTransform: any;
  inverseATW: any;
  inverseATrousWaveletTransform: any;
  noiseKSigma: any;
  noiseMRS: any;
  multiscaleLinearTransform: any;
  MLT: any;
  inverseMultiscaleLinearTransform: any;
  inverseMLT: any;
  MMT: any;
  multiscaleMedianTransform: any;
  inverseMMT: any;
  inverseMultiscaleMedianTransform: any;
  medianWaveletTransform: any;
  MWT: any;
  inverseMedianWaveletTransform: any;
  inverseMWT: any;
  inverseMultiscaleTransform: any;
  morphologicalTransformation: any;
  render: any;
  blend: any;
  toMatrix: any;
  toFloat32Array: any;
  toFloat64Array: any;
  toUint32Array: any;
  toUint16Array: any;
  toUint8Array: any;
  assignStatus: any;
  initializeStatus: any;
  advanceStatus: any;
  completeStatus: any;
}
declare class ImageCalibration {
  targetFrames: any;
  enableCFA: any;
  cfaPattern: any;
  inputHints: any;
  outputHints: any;
  pedestal: any;
  pedestalMode: any;
  pedestalKeyword: any;
  overscanEnabled: any;
  overscanImageX0: any;
  overscanImageY0: any;
  overscanImageX1: any;
  overscanImageY1: any;
  overscanRegions: any;
  masterBiasEnabled: any;
  masterBiasPath: any;
  masterDarkEnabled: any;
  masterDarkPath: any;
  masterFlatEnabled: any;
  masterFlatPath: any;
  calibrateBias: any;
  calibrateDark: any;
  calibrateFlat: any;
  optimizeDarks: any;
  darkOptimizationThreshold: any;
  darkOptimizationLow: any;
  darkOptimizationWindow: any;
  darkCFADetectionMode: any;
  separateCFAFlatScalingFactors: any;
  flatScaleClippingFactor: any;
  evaluateNoise: any;
  noiseEvaluationAlgorithm: any;
  outputDirectory: any;
  outputExtension: any;
  outputPrefix: any;
  outputPostfix: any;
  outputSampleFormat: any;
  outputPedestal: any;
  overwriteExistingFiles: any;
  onError: any;
  noGUIMessages: any;
  outputData: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Auto: any;
  RGGB: any;
  BGGR: any;
  GBRG: any;
  GRBG: any;
  GRGB: any;
  GBGR: any;
  RGBG: any;
  BGRG: any;
  Literal: any;
  Keyword: any;
  CustomKeyword: any;
  DetectCFA: any;
  ForceCFA: any;
  IgnoreCFA: any;
  NoiseEvaluation_KSigma: any;
  NoiseEvaluation_MRS: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
  Continue: any;
  Abort: any;
  AskUser: any;
}
declare class ImageDescription {
  id: any;
  width: any;
  height: any;
  numberOfChannels: any;
  colorSpace: any;
  supported: any;
  bitsPerSample: any;
  ieeefpSampleFormat: any;
  complexSample: any;
  signedIntegers: any;
  metricResolution: any;
  embedICCProfile: any;
  embedThumbnail: any;
  embedProperties: any;
  embedRGBWS: any;
  embedDisplayFunction: any;
  embedColorFilterArray: any;
  embedPreviewRects: any;
  lowerRange: any;
  upperRange: any;
  xResolution: any;
  yResolution: any;
  isoSpeed: any;
  exposure: any;
  aperture: any;
  focalLength: any;
  cfaType: any;
  assign: any;
}
declare class ImageIdentifier {
  id: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ImageIntegration {
  images: any;
  inputHints: any;
  combination: any;
  weightMode: any;
  weightKeyword: any;
  weightScale: any;
  adaptiveGridSize: any;
  adaptiveNoScale: any;
  ignoreNoiseKeywords: any;
  normalization: any;
  rejection: any;
  rejectionNormalization: any;
  minMaxLow: any;
  minMaxHigh: any;
  pcClipLow: any;
  pcClipHigh: any;
  sigmaLow: any;
  sigmaHigh: any;
  winsorizationCutoff: any;
  linearFitLow: any;
  linearFitHigh: any;
  esdOutliersFraction: any;
  esdAlpha: any;
  esdLowRelaxation: any;
  ccdGain: any;
  ccdReadNoise: any;
  ccdScaleNoise: any;
  clipLow: any;
  clipHigh: any;
  rangeClipLow: any;
  rangeLow: any;
  rangeClipHigh: any;
  rangeHigh: any;
  mapRangeRejection: any;
  reportRangeRejection: any;
  largeScaleClipLow: any;
  largeScaleClipLowProtectedLayers: any;
  largeScaleClipLowGrowth: any;
  largeScaleClipHigh: any;
  largeScaleClipHighProtectedLayers: any;
  largeScaleClipHighGrowth: any;
  generate64BitResult: any;
  generateRejectionMaps: any;
  generateIntegratedImage: any;
  generateDrizzleData: any;
  closePreviousImages: any;
  bufferSizeMB: any;
  stackSizeMB: any;
  autoMemorySize: any;
  autoMemoryLimit: any;
  useROI: any;
  roiX0: any;
  roiY0: any;
  roiX1: any;
  roiY1: any;
  useCache: any;
  evaluateNoise: any;
  mrsMinDataFraction: any;
  subtractPedestals: any;
  truncateOnOutOfRange: any;
  noGUIMessages: any;
  showImages: any;
  useFileThreads: any;
  fileThreadOverload: any;
  useBufferThreads: any;
  maxBufferThreads: any;
  integrationImageId: any;
  lowRejectionMapImageId: any;
  highRejectionMapImageId: any;
  slopeMapImageId: any;
  numberOfChannels: any;
  numberOfPixels: any;
  totalPixels: any;
  outputRangeLow: any;
  outputRangeHigh: any;
  totalRejectedLowRK: any;
  totalRejectedLowG: any;
  totalRejectedLowB: any;
  totalRejectedHighRK: any;
  totalRejectedHighG: any;
  totalRejectedHighB: any;
  finalNoiseEstimateRK: any;
  finalNoiseEstimateG: any;
  finalNoiseEstimateB: any;
  finalScaleEstimateRK: any;
  finalScaleEstimateG: any;
  finalScaleEstimateB: any;
  finalLocationEstimateRK: any;
  finalLocationEstimateG: any;
  finalLocationEstimateB: any;
  referenceNoiseReductionRK: any;
  referenceNoiseReductionG: any;
  referenceNoiseReductionB: any;
  medianNoiseReductionRK: any;
  medianNoiseReductionG: any;
  medianNoiseReductionB: any;
  referenceSNRIncrementRK: any;
  referenceSNRIncrementG: any;
  referenceSNRIncrementB: any;
  averageSNRIncrementRK: any;
  averageSNRIncrementG: any;
  averageSNRIncrementB: any;
  imageData: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Average: any;
  Median: any;
  Minimum: any;
  Maximum: any;
  DontCare: any;
  ExposureTime: any;
  NoiseEvaluation: any;
  SignalWeight: any;
  MedianWeight: any;
  AverageWeight: any;
  KeywordWeight: any;
  WeightScale_AvgDev: any;
  WeightScale_MAD: any;
  WeightScale_BWMV: any;
  WeightScale_PBMV: any;
  WeightScale_Sn: any;
  WeightScale_Qn: any;
  WeightScale_IKSS: any;
  NoNormalization: any;
  Additive: any;
  Multiplicative: any;
  AdditiveWithScaling: any;
  MultiplicativeWithScaling: any;
  LocalNormalization: any;
  AdaptiveNormalization: any;
  NoRejection: any;
  MinMax: any;
  PercentileClip: any;
  SigmaClip: any;
  WinsorizedSigmaClip: any;
  AveragedSigmaClip: any;
  LinearFit: any;
  CCDClip: any;
  Rejection_ESD: any;
  NoRejectionNormalization: any;
  Scale: any;
  EqualizeFluxes: any;
  LocalRejectionNormalization: any;
  AdaptiveRejectionNormalization: any;
}
declare class ImageStatistics {
  count: any;
  mean: any;
  median: any;
  sumOfSquares: any;
  variance: any;
  stdDev: any;
  standardDeviation: any;
  avgDev: any;
  averageDeviation: any;
  mad: any;
  medianDeviation: any;
  bwmv: any;
  biweightMidvariance: any;
  pbmv: any;
  bendMidvariance: any;
  sn: any;
  qn: any;
  minimum: any;
  minimumPosition: any;
  maximum: any;
  maximumPosition: any;
  rejectionLow: any;
  rejectionHigh: any;
  lowRejectionEnabled: any;
  highRejectionEnabled: any;
  extremesEnabled: any;
  meanEnabled: any;
  sumOfSquaresEnabled: any;
  varianceEnabled: any;
  medianEnabled: any;
  avgDevEnabled: any;
  madEnabled: any;
  bwmvEnabled: any;
  pbmvEnabled: any;
  snEnabled: any;
  qnEnabled: any;
  generate: any;
  assign: any;
}
declare class ImageWindow {
  isWindow: any;
  isNull: any;
  isClosed: any;
  isNew: any;
  isACopy: any;
  filePath: any;
  fileURL: any;
  isModified: any;
  bitsPerSample: any;
  isFloatSample: any;
  isComplexSample: any;
  rgbWorkingSpace: any;
  mainView: any;
  currentView: any;
  numberOfPreviews: any;
  previews: any;
  selectedPreview: any;
  mask: any;
  maskInverted: any;
  maskVisible: any;
  maskMode: any;
  maskEnabled: any;
  transparencyMode: any;
  transparencyColor: any;
  transparencyVisible: any;
  hasMaskReferences: any;
  resolution: any;
  horizontalResolution: any;
  verticalResolution: any;
  metricResolution: any;
  isoSpeed: any;
  exposure: any;
  aperture: any;
  focalLength: any;
  cfaType: any;
  keywords: any;
  visible: any;
  iconic: any;
  position: any;
  width: any;
  height: any;
  geometry: any;
  zoomFactor: any;
  viewportWidth: any;
  viewportHeight: any;
  viewportPosition: any;
  visibleViewportRect: any;
  hasPendingUpdates: any;
  viewportUpdateRect: any;
  save: any;
  saveAs: any;
  close: any;
  forceClose: any;
  isValidView: any;
  undo: any;
  undoAll: any;
  redo: any;
  redoAll: any;
  go: any;
  purge: any;
  previewById: any;
  previewRect: any;
  createPreview: any;
  modifyPreview: any;
  deletePreview: any;
  deletePreviews: any;
  setSampleFormat: any;
  isMaskCompatible: any;
  setMask: any;
  removeMask: any;
  updateMaskReferences: any;
  removeMaskReferences: any;
  isMaskOf: any;
  setResolution: any;
  show: any;
  hide: any;
  iconize: any;
  deiconize: any;
  bringToFront: any;
  sendToBack: any;
  setViewport: any;
  fitWindow: any;
  zoomToFit: any;
  zoomToOptimalFit: any;
  zoomIn: any;
  zoomOut: any;
  viewportToImage: any;
  viewportScalarToImage: any;
  imageToViewport: any;
  imageScalarToViewport: any;
  regenerate: any;
  updateViewport: any;
  updateViewportRect: any;
  updateImageRect: any;
  commitPendingUpdates: any;
  applyColorTransformation: any;
  regenerateAstrometricSolution: any;
  copyAstrometricSolution: any;
  clearAstrometricSolution: any;
  setAstrometricSolution: any;
  updateAstrometryMetadata: any;
  astrometricSolution: any;
  astrometricSolutionSummary: any;
  imageToCelestial: any;
  celestialToImage: any;
}
declare class IndigoCCDFrame {
  deviceName: any;
  uploadMode: any;
  serverUploadDirectory: any;
  serverFileNameTemplate: any;
  frameType: any;
  binningX: any;
  binningY: any;
  filterSlot: any;
  exposureTime: any;
  exposureDelay: any;
  exposureCount: any;
  openClientImages: any;
  newImageIdTemplate: any;
  reuseImageWindow: any;
  autoStretch: any;
  linkedAutoStretch: any;
  saveClientImages: any;
  overwriteClientImages: any;
  clientDownloadDirectory: any;
  clientFileNameTemplate: any;
  clientOutputFormatHints: any;
  objectName: any;
  telescopeSelection: any;
  requireSelectedTelescope: any;
  telescopeDeviceName: any;
  externalFilterWheelDeviceName: any;
  enableAlignmentCorrection: any;
  alignmentModelFile: any;
  clientFrames: any;
  serverFrames: any;
  telescopeAperture: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  UploadMode_Client: any;
  UploadMode_Server: any;
  UploadMode_ServerAndClient: any;
  FrameType_Light: any;
  FrameType_Bias: any;
  FrameType_Dark: any;
  FrameType_Flat: any;
  TelescopeSelection_NoTelescope: any;
  TelescopeSelection_ActiveTelescope: any;
  TelescopeSelection_MountController: any;
  TelescopeSelection_ActiveOrMountController: any;
  TelescopeSelection_DeviceName: any;
}
declare class IndigoDeviceController {
  serverHostName: any;
  serverPort: any;
  serverConnect: any;
  serverCommand: any;
  abort: any;
  verbosity: any;
  newProperties: any;
  properties: any;
  devices: any;
  getCommandResult: any;
  getCommandParameters: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class IndigoMount {
  deviceName: any;
  Command: any;
  SlewRate: any;
  targetRA: any;
  targetDec: any;
  currentLST: any;
  currentRA: any;
  currentDec: any;
  apparentTargetRA: any;
  apparentTargetDec: any;
  PierSide: any;
  syncLST: any;
  syncCelestialRA: any;
  syncCelestialDec: any;
  syncTelescopeRA: any;
  syncTelescopeDec: any;
  enableAlignmentCorrection: any;
  AlignmentMethod: any;
  alignmentModelFile: any;
  alignmentConfig: any;
  geographicLatitude: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Command_Unpark: any;
  Command_Park: any;
  Command_MoveNorthStart: any;
  Command_MoveNorthStop: any;
  Command_MoveSouthStart: any;
  Command_MoveSouthStop: any;
  Command_MoveWestStart: any;
  Command_MoveWestStop: any;
  Command_MoveEastStart: any;
  Command_MoveEastStop: any;
  Command_GoTo: any;
  Command_Sync: any;
  Command_ParkDefault: any;
  Command_FitPointingModel: any;
  Command_TestSync: any;
  SlewRate_Guide: any;
  SlewRate_Centering: any;
  SlewRate_Find: any;
  SlewRate_Max: any;
  PierSide_West: any;
  PierSide_East: any;
  PierSide_None: any;
  AlignmentMethod_None: any;
  AlignmentMethod_AnalyticalModel: any;
  AlignmentMethod_ServerModel: any;
}
declare class Int16Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class Int32Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class Int8Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class IntegerResample {
  zoomFactor: any;
  downsamplingMode: any;
  subsampleMode: any;
  xResolution: any;
  yResolution: any;
  metric: any;
  forceResolution: any;
  noGUIMessages: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Average: any;
  Median: any;
  Maximum: any;
  Minimum: any;
}
declare class InternalError {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
}
declare class InverseFourierTransform {
  idOfFirstComponent: any;
  idOfSecondComponent: any;
  onOutOfRangeResult: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  DontCare: any;
  Truncate: any;
  Rescale: any;
}
declare class Invert {
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class LRGBCombination {
  channels: any;
  mL: any;
  mc: any;
  clipHighlights: any;
  noiseReduction: any;
  layersRemoved: any;
  layersProtected: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Label extends Control {
  text: any;
  useRichText: any;
  wordWrapping: any;
  margin: any;
  textAlignment: any;
  clear: any;
}
declare class LarsonSekanina {
  interpolation: any;
  radiusIncrement: any;
  angleIncrement: any;
  centerX: any;
  centerY: any;
  amount: any;
  threshold: any;
  deringing: any;
  rangeLow: any;
  rangeHigh: any;
  useLuminance: any;
  highPass: any;
  disableExtension: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Bilinear: any;
  Bicubic: any;
  BicubicSpline: any;
  BicubicBSpline: any;
}
declare class LinearFit {
  referenceViewId: any;
  rejectLow: any;
  rejectHigh: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class LinearFunction {
  intercept: any;
  b: any;
  slope: any;
  m: any;
  adev: any;
  isValid: any;
  fit: any;
  evaluate: any;
}
declare class LinearGradientBrush {
  start: any;
  end: any;
  x1: any;
  y1: any;
  x2: any;
  y2: any;
}
declare class LocalHistogramEqualization {
  radius: any;
  histogramBins: any;
  slopeLimit: any;
  amount: any;
  circularKernel: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Bit8: any;
  Bit10: any;
  Bit12: any;
}
declare class LocalNormalization {
  scale: any;
  noScale: any;
  rejection: any;
  backgroundRejectionLimit: any;
  referenceRejectionThreshold: any;
  targetRejectionThreshold: any;
  hotPixelFilterRadius: any;
  noiseReductionFilterRadius: any;
  referencePathOrViewId: any;
  referenceIsView: any;
  targetItems: any;
  inputHints: any;
  outputHints: any;
  generateNormalizedImages: any;
  generateNormalizationData: any;
  showBackgroundModels: any;
  showRejectionMaps: any;
  plotNormalizationFunctions: any;
  noGUIMessages: any;
  outputDirectory: any;
  outputExtension: any;
  outputPrefix: any;
  outputPostfix: any;
  overwriteExistingFiles: any;
  onError: any;
  useFileThreads: any;
  fileThreadOverload: any;
  maxFileReadThreads: any;
  maxFileWriteThreads: any;
  graphSize: any;
  graphTextSize: any;
  graphTitleSize: any;
  graphTransparent: any;
  graphOutputDirectory: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  GenerateNormalizedImages_Never: any;
  GenerateNormalizedImages_Always: any;
  GenerateNormalizedImages_ViewExecutionOnly: any;
  GenerateNormalizedImages_GlobalExecutionOnly: any;
  PlotNormalizationFunctions_DontPlot: any;
  PlotNormalizationFunctions_Line3D: any;
  PlotNormalizationFunctions_Palette3D: any;
  PlotNormalizationFunctions_Map3D: any;
  OnError_Continue: any;
  OnError_Abort: any;
  OnError_AskUser: any;
}
declare class MaskedStretch {
  targetBackground: any;
  numberOfIterations: any;
  clippingFraction: any;
  backgroundReferenceViewId: any;
  backgroundLow: any;
  backgroundHigh: any;
  useROI: any;
  roiX0: any;
  roiY0: any;
  roiX1: any;
  roiY1: any;
  maskType: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  MaskType_Intensity: any;
  MaskType_Value: any;
}
declare class Matrix {
  rows: any;
  cols: any;
  columns: any;
  isEmpty: any;
  numberOfElements: any;
  assign: any;
  swap: any;
  isEqualTo: any;
  isLessThan: any;
  sameElements: any;
  at: any;
  rowVector: any;
  colVector: any;
  columnVector: any;
  transpose: any;
  inverse: any;
  invert: any;
  flipped: any;
  flip: any;
  truncate: any;
  rescale: any;
  sort: any;
  linearSearch: any;
  binarySearch: any;
  minElement: any;
  maxElement: any;
  sum: any;
  modulus: any;
  sumOfSquares: any;
  mean: any;
  stableSum: any;
  stableModulus: any;
  stableSumOfSquares: any;
  stableMean: any;
  trimmedMean: any;
  trimmedMeanOfSquares: any;
  median: any;
  stdDev: any;
  variance: any;
  avgDev: any;
  stableAvgDev: any;
  twoSidedAvgDev: any;
  MAD: any;
  twoSidedMAD: any;
  biweightMidvariance: any;
  BWMV: any;
  twoSidedBiweightMidvariance: any;
  twoSidedBWMV: any;
  bendMidvariance: any;
  PBMV: any;
  Sn: any;
  Qn: any;
  add: any;
  sub: any;
  mul: any;
  div: any;
  pow: any;
  addElementWise: any;
  subElementWise: any;
  mulElementWise: any;
  divElementWise: any;
  powElementWise: any;
  invertElementWise: any;
  abs: any;
  sqr: any;
  sqrt: any;
  setAbs: any;
  setSqr: any;
  setSqrt: any;
  setRandom: any;
  toImage: any;
  toArray: any;
  toFloat32Array: any;
  toFloat64Array: any;
}
declare class MergeCFA {
  sourceCFAImage0: any;
  sourceCFAImage1: any;
  sourceCFAImage2: any;
  sourceCFAImage3: any;
  outputViewId: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class MessageBox {
  text: any;
  caption: any;
  icon: any;
  firstButton: any;
  secondButton: any;
  thirdButton: any;
  defaultButton: any;
  escapeButton: any;
  result: any;
  execute: any;
}
declare class MessageListener {
  onMessage: any;
}
declare class MorphologicalTransformation {
  operator: any;
  interlacingDistance: any;
  lowThreshold: any;
  highThreshold: any;
  numberOfIterations: any;
  amount: any;
  selectionPoint: any;
  structureName: any;
  structureSize: any;
  structureWayTable: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Erosion: any;
  Dilation: any;
  Opening: any;
  Closing: any;
  Median: any;
  Selection: any;
  Midpoint: any;
}
declare class MultiscaleLinearTransform {
  layers: any;
  transform: any;
  scaleDelta: any;
  scalingFunctionData: any;
  scalingFunctionRowFilter: any;
  scalingFunctionColFilter: any;
  scalingFunctionNoiseSigma: any;
  scalingFunctionName: any;
  linearMask: any;
  linearMaskAmpFactor: any;
  linearMaskSmoothness: any;
  linearMaskInverted: any;
  linearMaskPreview: any;
  largeScaleFunction: any;
  curveBreakPoint: any;
  noiseThresholding: any;
  noiseThresholdingAmount: any;
  noiseThreshold: any;
  softThresholding: any;
  useMultiresolutionSupport: any;
  deringing: any;
  deringingDark: any;
  deringingBright: any;
  outputDeringingMaps: any;
  lowRange: any;
  highRange: any;
  previewMode: any;
  previewLayer: any;
  toLuminance: any;
  toChrominance: any;
  linear: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  StarletTransform: any;
  MultiscaleLinearTransform: any;
  NoFunction: any;
  Hyperbolic: any;
  Log10: any;
  Ln: any;
  Disabled: any;
  AllPixelChanges: any;
  IncreasingPixels: any;
  DecreasingPixels: any;
}
declare class MultiscaleMedianTransform {
  layers: any;
  transform: any;
  medianWaveletThreshold: any;
  scaleDelta: any;
  linearMask: any;
  linearMaskAmpFactor: any;
  linearMaskSmoothness: any;
  linearMaskInverted: any;
  linearMaskPreview: any;
  lowRange: any;
  highRange: any;
  previewMode: any;
  previewLayer: any;
  toLuminance: any;
  toChrominance: any;
  linear: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  MultiscaleMedianTransform: any;
  MedianWaveletTransform: any;
  Disabled: any;
  AllPixelChanges: any;
  IncreasingPixels: any;
  DecreasingPixels: any;
}
declare class NetworkTransfer {
  url: any;
  proxyURL: any;
  customHTTPHeaders: any;
  ok: any;
  aborted: any;
  responseCode: any;
  contentType: any;
  bytesTransferred: any;
  totalSpeed: any;
  totalTime: any;
  errorInformation: any;
  onDownloadDataAvailable: any;
  onUploadDataRequested: any;
  onTransferProgress: any;
  setURL: any;
  setProxyURL: any;
  setSSL: any;
  setCustomHTTPHeaders: any;
  setConnectionTimeout: any;
  download: any;
  upload: any;
  post: any;
  smtp: any;
  closeConnection: any;
}
declare class NewImage {
  id: any;
  width: any;
  height: any;
  numberOfChannels: any;
  colorSpace: any;
  sampleFormat: any;
  v0: any;
  v1: any;
  v2: any;
  va: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RGB: any;
  Grayscale: any;
  i8: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
}
declare class NoOperation {
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class NoiseGenerator {
  amount: any;
  distribution: any;
  impulsionalNoiseProbability: any;
  preserveBrightness: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Uniform: any;
  Normal: any;
  Poisson: any;
  Impulsional: any;
  None: any;
  PreserveMedian: any;
  PreserveMean: any;
}
declare class Number {
  toSource: any;
  toString: any;
  toLocaleString: any;
  valueOf: any;
  toFixed: any;
  toExponential: any;
  toPrecision: any;
}
declare class ObserverPosition {
  lambda: any;
  longitude: any;
  phi: any;
  latitude: any;
  height: any;
  equatorialRadius: any;
  flattening: any;
  regionalCenter: any;
  cioBased: any;
}
declare class OpenFileDialog {
  fileName: any;
  fileNames: any;
  multipleSelections: any;
  loadImageFilters: any;
}
declare class PDF {
  filePath: any;
  outputData: any;
  title: any;
  creator: any;
  pageSize: any;
  resolution: any;
  fullRect: any;
  paintRect: any;
  margins: any;
  leftMargin: any;
  topMargin: any;
  rightMargin: any;
  bottomMargin: any;
  minMargins: any;
  maxMargins: any;
  portrait: any;
  landscape: any;
  isPainting: any;
}
declare class Pen {
  width: any;
  color: any;
  style: any;
  cap: any;
  join: any;
  brush: any;
  isSolid: any;
  isEmpty: any;
  assign: any;
}
declare class PhotometricColorCalibration {
  workingMode: any;
  applyCalibration: any;
  redFilterWavelength: any;
  redFilterBandwidth: any;
  greenFilterWavelength: any;
  greenFilterBandwidth: any;
  blueFilterWavelength: any;
  blueFilterBandwidth: any;
  whiteReferenceId: any;
  whiteReferenceName: any;
  whiteReferenceSr_JV: any;
  whiteReferenceJB_JV: any;
  zeroPointSr_JV: any;
  zeroPointJB_JV: any;
  focalLength: any;
  pixelSize: any;
  centerRA: any;
  centerDec: any;
  epochJD: any;
  forcePlateSolve: any;
  ignoreImagePositionAndScale: any;
  serverURL: any;
  solverCatalogName: any;
  solverAutoCatalog: any;
  solverLimitMagnitude: any;
  solverAutoLimitMagnitude: any;
  solverAutoLimitMagnitudeFactor: any;
  solverStarSensitivity: any;
  solverNoiseLayers: any;
  solverAlignmentDevice: any;
  solverDistortionCorrection: any;
  solverSplineSmoothing: any;
  solverProjection: any;
  photCatalogName: any;
  photLimitMagnitude: any;
  photAutoLimitMagnitude: any;
  photAutoLimitMagnitudeFactor: any;
  photAutoAperture: any;
  photAperture: any;
  photUsePSF: any;
  photSaturationThreshold: any;
  photShowDetectedStars: any;
  photShowBackgroundModels: any;
  photGenerateGraphs: any;
  neutralizeBackground: any;
  backgroundReferenceViewId: any;
  backgroundLow: any;
  backgroundHigh: any;
  backgroundUseROI: any;
  backgroundROIX0: any;
  backgroundROIY0: any;
  backgroundROIX1: any;
  backgroundROIY1: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  WorkingMode_Broadband: any;
  WorkingMode_Narrowband: any;
  AlignmentDevice_TriangleSimilarity: any;
  AlignmentDevice_PolygonMatching: any;
  Projection_Gnomonic: any;
  Projection_Stereographic: any;
  Projection_PlateCarree: any;
  Projection_Mercator: any;
  Projection_HammerAitoff: any;
  Projection_ZenithalEqualArea: any;
  Projection_Orthographic: any;
}
declare class PixelMath {
  expression: any;
  expression0: any;
  expression1: any;
  expression2: any;
  expression3: any;
  useSingleExpression: any;
  symbols: any;
  variables: any;
  generateOutput: any;
  singleThreaded: any;
  optimization: any;
  use64BitWorkingImage: any;
  rescale: any;
  rescaleLower: any;
  rescaleUpper: any;
  truncate: any;
  truncateLower: any;
  truncateUpper: any;
  createNewImage: any;
  showNewImage: any;
  newImageId: any;
  newImageWidth: any;
  newImageHeight: any;
  newImageAlpha: any;
  newImageColorSpace: any;
  newImageSampleFormat: any;
  outputData: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  SameAsTarget: any;
  RGB: any;
  Gray: any;
  i8: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
}
declare class Point {
  x: any;
  y: any;
  assign: any;
  transform: any;
  transformed: any;
  translate: any;
  translateBy: any;
  translated: any;
  translatedBy: any;
  moveTo: any;
  moveBy: any;
  movedTo: any;
  movedBy: any;
  rotate: any;
  rotated: any;
  symmetrize: any;
  symmetric: any;
  round: any;
  rounded: any;
  truncate: any;
  truncated: any;
  add: any;
  sub: any;
  mul: any;
  div: any;
  dot: any;
  distanceTo: any;
  isEqualTo: any;
  isLessThan: any;
  toString: any;
  toArray: any;
  toVector: any;
}
declare class PointGridInterpolation {
  isValid: any;
  referenceRect: any;
  delta: any;
  initialize: any;
  clear: any;
  assign: any;
  evaluate: any;
}
declare class PointSurfaceSpline {
  isValid: any;
  isRecursive: any;
  initialize: any;
  clear: any;
  evaluate: any;
}
declare class Position {
  observer: any;
  isTopocentric: any;
  polarMotionEnabled: any;
  TDB: any;
  Teph: any;
  TT: any;
  UT1: any;
  barycentricPositionOfEarth: any;
  barycentricVelocityOfEarth: any;
  barycentricPositionOfSun: any;
  heliocentricPositionOfEarth: any;
  equinoxBPNMatrix: any;
  cioBPNMatrix: any;
  CIP: any;
  CIP_ITRS: any;
  CIO: any;
  EO: any;
  ERA: any;
  GAST: any;
  epsA: any;
  true: any;
  trueDistance: any;
  geometric: any;
  astrometric: any;
  proper: any;
  apparent: any;
  intermediate: any;
  canComputeApparentVisualMagnitude: any;
  apparentVisualMagnitude: any;
  initEquinoxBasedParameters: any;
  initCIOBasedParameters: any;
  nutationAngles: any;
}
declare class Preferences {
  Application_styleSheetFile: any;
  Application_resourceFile01: any;
  Application_resourceFile02: any;
  Application_resourceFile03: any;
  Application_resourceFile04: any;
  Application_resourceFile05: any;
  Application_resourceFile06: any;
  Application_resourceFile07: any;
  Application_resourceFile08: any;
  Application_resourceFile09: any;
  Application_resourceFile10: any;
  Application_autoUIScaling: any;
  Application_uiScalingFactor: any;
  Application_fontResolution: any;
  Application_lowResFont: any;
  Application_highResFont: any;
  Application_lowResMonoFont: any;
  Application_highResMonoFont: any;
  Application_fundamentalEphemeridesFile: any;
  Application_shortTermFundamentalEphemeridesFile: any;
  Application_asteroidEphemeridesFile: any;
  Application_shortTermAsteroidEphemeridesFile: any;
  Application_nutationModelFile: any;
  Application_shortTermNutationModelFile: any;
  Application_deltaTDataFile: any;
  Application_deltaATDataFile: any;
  Application_cipITRSDataFile: any;
  MainWindow_maximizeAtStartup: any;
  MainWindow_fullScreenAtStartup: any;
  MainWindow_showSplashAtStartup: any;
  MainWindow_checkForUpdatesAtStartup: any;
  MainWindow_confirmProgramTermination: any;
  MainWindow_acceptDroppedFiles: any;
  MainWindow_doubleClickLaunchesOpenDialog: any;
  MainWindow_hoverableAutoHideWindows: any;
  MainWindow_desktopSettingsAware: any;
  MainWindow_nativeMenuBar: any;
  MainWindow_capitalizedMenuBars: any;
  MainWindow_windowButtonsOnTheLeft: any;
  MainWindow_translucentWindows: any;
  MainWindow_translucentChildWindows: any;
  MainWindow_fadeWindows: any;
  MainWindow_fadeAutoHideWindows: any;
  MainWindow_translucentAutoHideWindows: any;
  MainWindow_fadeWorkspaces: any;
  MainWindow_fadeMenu: any;
  MainWindow_fadeToolTip: any;
  MainWindow_explodeIcons: any;
  MainWindow_implodeIcons: any;
  MainWindow_animateWindows: any;
  MainWindow_animateMenu: any;
  MainWindow_animateCombo: any;
  MainWindow_animateToolTip: any;
  MainWindow_animateToolBox: any;
  MainWindow_maxRecentFiles: any;
  MainWindow_showRecentlyUsed: any;
  MainWindow_showMostUsed: any;
  MainWindow_showFavorites: any;
  MainWindow_maxUsageListLength: any;
  MainWindow_expandRecentlyUsedAtStartup: any;
  MainWindow_expandMostUsedAtStartup: any;
  MainWindow_expandFavoritesAtStartup: any;
  MainWindow_openURLsWithInternalBrowser: any;
  MainWindow_openResourcesOnNewWebBrowserWindows: any;
  MainWindow_privateWebBrowsingMode: any;
  MainWindow_iconGridSpacing: any;
  MainWindow_wallpaperFile01: any;
  MainWindow_wallpaperFile02: any;
  MainWindow_wallpaperFile03: any;
  MainWindow_wallpaperFile04: any;
  MainWindow_wallpaperFile05: any;
  MainWindow_wallpaperFile06: any;
  MainWindow_wallpaperFile07: any;
  MainWindow_wallpaperFile08: any;
  MainWindow_wallpaperFile09: any;
  MainWindow_wallpaperFile10: any;
  MainWindow_useWallpapers: any;
  ImageWindow_backupFiles: any;
  ImageWindow_defaultMasksShown: any;
  ImageWindow_defaultMaskMode: any;
  ImageWindow_defaultTransparencyMode: any;
  ImageWindow_defaultHorizontalResolution: any;
  ImageWindow_defaultVerticalResolution: any;
  ImageWindow_defaultMetricResolution: any;
  ImageWindow_defaultEmbedThumbnails: any;
  ImageWindow_defaultEmbedProperties: any;
  ImageWindow_defaultFileExtension: any;
  ImageWindow_nativeFileDialogs: any;
  ImageWindow_rememberFileOpenType: any;
  ImageWindow_rememberFileSaveType: any;
  ImageWindow_strictFileSaveMode: any;
  ImageWindow_fileFormatWarnings: any;
  ImageWindow_useFileNamesAsImageIdentifiers: any;
  ImageWindow_cursorTolerance: any;
  ImageWindow_wheelStepAngle: any;
  ImageWindow_wheelDirection: any;
  ImageWindow_touchEvents: any;
  ImageWindow_pinchSensitivity: any;
  ImageWindow_fastScreenRenditions: any;
  ImageWindow_fastScreenRenditionThreshold: any;
  ImageWindow_highDPIRenditions: any;
  ImageWindow_default24BitScreenLUT: any;
  ImageWindow_createPreviewsFromCoreProperties: any;
  ImageWindow_loadAstrometricSolutions: any;
  ImageWindow_swapDirectories: any;
  ImageWindow_swapCompression: any;
  ImageWindow_downloadsDirectory: any;
  ImageWindow_proxyURL: any;
  ImageWindow_followDownloadLocations: any;
  ImageWindow_verboseNetworkOperations: any;
  ImageWindow_showCaptionCurrentChannels: any;
  ImageWindow_showCaptionZoomRatios: any;
  ImageWindow_showCaptionIdentifiers: any;
  ImageWindow_showCaptionFullPaths: any;
  ImageWindow_showActiveSTFIndicators: any;
  ImageWindow_transparencyBrush: any;
  ImageWindow_transparencyBrushForegroundColor: any;
  ImageWindow_transparencyBrushBackgroundColor: any;
  ImageWindow_defaultTransparencyColor: any;
  Identifiers_imagePrefix: any;
  Identifiers_workspacePrefix: any;
  Identifiers_previewPrefix: any;
  Identifiers_processIconPrefix: any;
  Identifiers_imageContainerIconPrefix: any;
  Identifiers_newImageCaption: any;
  Identifiers_clonePostfix: any;
  Identifiers_noViewsAvailableText: any;
  Identifiers_noViewSelectedText: any;
  Identifiers_noPreviewsAvailableText: any;
  Identifiers_noPreviewSelectedText: any;
  Identifiers_brokenLinkText: any;
  Process_enableParallelProcessing: any;
  Process_enableParallelCoreRendering: any;
  Process_enableParallelCoreColorManagement: any;
  Process_enableParallelModuleProcessing: any;
  Process_enableThreadCPUAffinity: any;
  Process_maxModuleThreadPriority: any;
  Process_maxProcessors: any;
  Process_backupFiles: any;
  Process_generateScriptComments: any;
  Process_maxConsoleLines: any;
  Process_consoleDelay: any;
  Process_autoSavePSMPeriod: any;
  Process_alertOnProcessCompleted: any;
  Process_enableExecutionStatistics: any;
  Process_enableLaunchStatistics: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ProcessContainer {
  length: any;
  isEmpty: any;
  add: any;
  insert: any;
  delete: any;
  clear: any;
  at: any;
  setMask: any;
  invertMask: any;
  maskId: any;
  maskInverted: any;
  enable: any;
  disable: any;
  enabled: any;
  disabled: any;
}
declare class ProcessInstance {
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class PushButton {
  text: any;
  icon: any;
  iconWidth: any;
  iconHeight: any;
  pushed: any;
  state: any;
  onClick: any;
  onPress: any;
  onRelease: any;
  defaultButton: any;
}
declare class RGBColorSystem {
  gamma: any;
  srgbGamma: any;
  Y: any;
  x: any;
  y: any;
  assign: any;
  lightness: any;
  luminance: any;
  rgbToCIEXYZ: any;
  cieXYZToRGB: any;
  cieXYZToCIELab: any;
  rgbToCIELab: any;
  cieLabToRGB: any;
  cieLabToCIEXYZ: any;
  cieLabToCIELch: any;
  rgbToCIELch: any;
  cieLchToRGB: any;
  cieLchToCIELab: any;
}
declare class RGBWorkingSpace {
  channels: any;
  gamma: any;
  sRGBGamma: any;
  applyGlobalRGBWS: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class RadialGradientBrush {
  center: any;
  radius: any;
  focalPoint: any;
}
declare class RadioButton {
  text: any;
  checked: any;
  state: any;
  onCheck: any;
  onClick: any;
  onPress: any;
  onRelease: any;
}
declare class RangeError {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
}
declare class RangeSelection {
  lowRange: any;
  highRange: any;
  fuzziness: any;
  smoothness: any;
  screening: any;
  toLightness: any;
  invert: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ReadoutOptions {
  data: any;
  mode: any;
  probeSize: any;
  previewSize: any;
  previewZoomFactor: any;
  precision: any;
  integerRange: any;
  showAlpha: any;
  showMask: any;
  showPreview: any;
  previewCenter: any;
  showEquatorialCoordinates: any;
  showEclipticCoordinates: any;
  showGalacticCoordinates: any;
  coordinateItems: any;
  coordinatePrecision: any;
  broadcast: any;
  real: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RGBK: any;
  RGBL: any;
  RGBY: any;
  CIEXYZ: any;
  CIELab: any;
  CIELch: any;
  HSV: any;
  HSI: any;
  mean: any;
  median: any;
  minimum: any;
  maximum: any;
}
declare class Rect {
  x0: any;
  left: any;
  y0: any;
  top: any;
  x1: any;
  right: any;
  y1: any;
  bottom: any;
  leftTop: any;
  rightTop: any;
  leftBottom: any;
  rightBottom: any;
  center: any;
  width: any;
  height: any;
  perimeter: any;
  manhattanDistance: any;
  area: any;
  hypot: any;
  diagonal: any;
  isPoint: any;
  isLine: any;
  isHorizontalLine: any;
  isVerticalLine: any;
  isPointOrLine: any;
  isRect: any;
  isNormal: any;
  isOrdered: any;
  assign: any;
  order: any;
  ordered: any;
  transform: any;
  transformed: any;
  translate: any;
  translateBy: any;
  translated: any;
  translatedBy: any;
  moveTo: any;
  moveBy: any;
  movedTo: any;
  movedBy: any;
  rotate: any;
  rotated: any;
  symmetrize: any;
  symmetric: any;
  resizeTo: any;
  resizedTo: any;
  resizeBy: any;
  resizedBy: any;
  inflateBy: any;
  inflatedBy: any;
  deflateBy: any;
  deflatedBy: any;
  round: any;
  rounded: any;
  clipCode: any;
  includes: any;
  intersects: any;
  unite: any;
  union: any;
  intersect: any;
  intersection: any;
  add: any;
  sub: any;
  mul: any;
  div: any;
  isEqualTo: any;
  isLessThan: any;
  toString: any;
  toArray: any;
}
declare class ReferenceError {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
}
declare class RegExp {
  lastIndex: any;
  source: any;
  global: any;
  ignoreCase: any;
  multiline: any;
  sticky: any;
  toSource: any;
  toString: any;
  compile: any;
  exec: any;
  test: any;
}
declare class Resample {
  xSize: any;
  ySize: any;
  mode: any;
  absoluteMode: any;
  xResolution: any;
  yResolution: any;
  metric: any;
  forceResolution: any;
  interpolation: any;
  clampingThreshold: any;
  smoothness: any;
  noGUIMessages: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RelativeDimensions: any;
  AbsolutePixels: any;
  AbsoluteCentimeters: any;
  AbsoluteInches: any;
  ForceArea: any;
  ForceWidthAndHeight: any;
  ForceWidth: any;
  ForceHeight: any;
  NearestNeighbor: any;
  Bilinear: any;
  BicubicSpline: any;
  BicubicBSpline: any;
  Lanczos3: any;
  Lanczos4: any;
  MitchellNetravaliFilter: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Auto: any;
}
declare class Rescale {
  mode: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  RGBK: any;
  RGBK_Individual: any;
  CIEL: any;
  CIEY: any;
}
declare class RestorationFilter {
  K: any;
  gamma: any;
  algorithm: any;
  psfMode: any;
  psfSigma: any;
  psfGaussianSigma: any;
  psfShape: any;
  psfGaussianShape: any;
  psfAspectRatio: any;
  psfGaussianAspectRatio: any;
  psfRotationAngle: any;
  psfGaussianRotationAngle: any;
  psfMotionLength: any;
  psfMotionRotationAngle: any;
  psfViewId: any;
  amount: any;
  deringing: any;
  deringingDark: any;
  deringingBright: any;
  outputDeringingMaps: any;
  toLuminance: any;
  useLuminance: any;
  linear: any;
  rangeLow: any;
  rangeHigh: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Wiener: any;
  ConstrainedLeastSquares: any;
  Parametric: any;
  MotionBlur: any;
  External: any;
  Gaussian: any;
}
declare class Rotation {
  angle: any;
  optimizeFast: any;
  interpolation: any;
  clampingThreshold: any;
  smoothness: any;
  red: any;
  green: any;
  blue: any;
  alpha: any;
  noGUIMessages: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  NearestNeighbor: any;
  Bilinear: any;
  BicubicSpline: any;
  BicubicBSpline: any;
  Lanczos3: any;
  Lanczos4: any;
  MitchellNetravaliFilter: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Auto: any;
}
declare class SCNR {
  amount: any;
  protectionMethod: any;
  colorToRemove: any;
  preserveLightness: any;
  preserveLuminance: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  MaximumMask: any;
  AdditiveMask: any;
  AverageNeutral: any;
  MaximumNeutral: any;
  MinimumNeutral: any;
  Red: any;
  Green: any;
  Blue: any;
}
declare class SVG {
  filePath: any;
  outputData: any;
  size: any;
  width: any;
  height: any;
  resolution: any;
  description: any;
  title: any;
  viewBox: any;
  isPainting: any;
}
declare class SampleFormatConversion {
  format: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  To8Bit: any;
  To16Bit: any;
  To32Bit: any;
  ToFloat: any;
  ToDouble: any;
}
declare class Sandbox {
  sampleOne: any;
  sampleTwo: any;
  sampleThree: any;
  sampleFour: any;
  sampleFive: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  FirstItem: any;
  SecondItem: any;
  ThirdItem: any;
}
declare class SaveFileDialog {
  fileName: any;
  overwritePrompt: any;
  loadImageFilters: any;
}
declare class ScreenTransferFunction {
  STF: any;
  interaction: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  SeparateChannels: any;
  Grayscale: any;
}
declare class Script {
  filePath: any;
  md5sum: any;
  parameters: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class ScrollBox {
  autoScroll: any;
  horizontalAutoScroll: any;
  verticalAutoScroll: any;
  tracking: any;
  horizontalTracking: any;
  verticalTracking: any;
  scrollPosition: any;
  horizontalScrollPosition: any;
  verticalScrollPosition: any;
  minHorizontalScrollPosition: any;
  maxHorizontalScrollPosition: any;
  minVerticalScrollPosition: any;
  maxVerticalScrollPosition: any;
  scrollBarsVisible: any;
  horizontalScrollBarVisible: any;
  verticalScrollBarVisible: any;
  lineHeight: any;
  lineWidth: any;
  pageHeight: any;
  pageWidth: any;
  viewport: any;
  onHorizontalScrollPosUpdated: any;
  onHorizontalScrollRangeUpdated: any;
  onVerticalScrollPosUpdated: any;
  onVerticalScrollRangeUpdated: any;
  showScrollBars: any;
  hideScrollBars: any;
  setHorizontalScrollRange: any;
  setVerticalScrollRange: any;
  setScrollPosition: any;
}
declare class ShepardInterpolation {
  isValid: any;
  power: any;
  radius: any;
  initialize: any;
  clear: any;
  evaluate: any;
}
declare class SimplexNoise {
  amount: any;
  scale: any;
  offsetX: any;
  offsetY: any;
  operator: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Copy: any;
  Add: any;
  Sub: any;
  Mul: any;
  Div: any;
  Pow: any;
  Dif: any;
  Screen: any;
  Or: any;
  And: any;
  Xor: any;
  Nor: any;
  Nand: any;
  Xnor: any;
}
declare class Sizer {
  constructor(isVertical?: boolean);
  isHorizontal: any;
  isVertical: any;
  numberOfItems: any;
  parentControl: any;
  displayPixelRatio: any;
  margin: any;
  scaledMargin: any;
  unscaledMargin: any;
  spacing: any;
  scaledSpacing: any;
  unscaledSpacing: any;
  add: any;
  insert: any;
  remove: any;
  addSpacing: any;
  addScaledSpacing: any;
  addUnscaledSpacing: any;
  addStretch: any;
  insertSpacing: any;
  insertScaledSpacing: any;
  insertUnscaledSpacing: any;
  insertStretch: any;
  has: any;
  indexOf: any;
  setAlignment: any;
  setStretchFactor: any;
  logicalPixelsToPhysical: any;
  physicalPixelsToLogical: any;
}
declare class Slider {
  value: any;
  normalizedValue: any;
  minValue: any;
  maxValue: any;
  stepSize: any;
  pageSize: any;
  tickStyle: any;
  tickInterval: any;
  tracking: any;
  onRangeUpdated: any;
  onValueUpdated: any;
  setRange: any;
}
declare class SpinBox {
  value: any;
  normalizedValue: any;
  minValue: any;
  maxValue: any;
  stepSize: any;
  prefix: any;
  suffix: any;
  minimumValueText: any;
  wrapping: any;
  editable: any;
  alignment: any;
  autoAdjustWidth: any;
  onValueUpdated: any;
  onRangeUpdated: any;
  setRange: any;
}
declare class SplitCFA {
  targetFrames: any;
  outputTree: any;
  outputSubDirCFA: any;
  outputDir: any;
  prefix: any;
  postfix: any;
  overwrite: any;
  outputViewId0: any;
  outputViewId1: any;
  outputViewId2: any;
  outputViewId3: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class StarAlignment {
  structureLayers: any;
  noiseLayers: any;
  hotPixelFilterRadius: any;
  noiseReductionFilterRadius: any;
  sensitivity: any;
  peakResponse: any;
  maxStarDistortion: any;
  upperLimit: any;
  invert: any;
  distortionModel: any;
  undistortedReference: any;
  distortionCorrection: any;
  distortionMaxIterations: any;
  distortionTolerance: any;
  distortionAmplitude: any;
  localDistortion: any;
  localDistortionScale: any;
  localDistortionTolerance: any;
  localDistortionRejection: any;
  localDistortionRejectionWindow: any;
  localDistortionRegularization: any;
  matcherTolerance: any;
  ransacTolerance: any;
  ransacMaxIterations: any;
  ransacMaximizeInliers: any;
  ransacMaximizeOverlapping: any;
  ransacMaximizeRegularity: any;
  ransacMinimizeError: any;
  maxStars: any;
  fitPSF: any;
  psfTolerance: any;
  useTriangles: any;
  polygonSides: any;
  descriptorsPerStar: any;
  trianglesPerStar: any;
  restrictToPreviews: any;
  intersection: any;
  useBrightnessRelations: any;
  useScaleDifferences: any;
  scaleTolerance: any;
  referenceImage: any;
  referenceIsFile: any;
  targets: any;
  inputHints: any;
  outputHints: any;
  mode: any;
  writeKeywords: any;
  generateMasks: any;
  generateDrizzleData: any;
  generateDistortionMaps: any;
  frameAdaptation: any;
  randomizeMosaic: any;
  noGUIMessages: any;
  useSurfaceSplines: any;
  extrapolateLocalDistortion: any;
  splineSmoothness: any;
  pixelInterpolation: any;
  clampingThreshold: any;
  linearClampingThreshold: any;
  outputDirectory: any;
  outputExtension: any;
  outputPrefix: any;
  outputPostfix: any;
  maskPostfix: any;
  distortionMapPostfix: any;
  outputSampleFormat: any;
  overwriteExistingFiles: any;
  onError: any;
  useFileThreads: any;
  fileThreadOverload: any;
  maxFileReadThreads: any;
  maxFileWriteThreads: any;
  outputData: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  FitPSF_Never: any;
  FitPSF_DistortionOnly: any;
  FitPSF_Always: any;
  NoIntersection: any;
  MosaicOnly: any;
  Always: any;
  RegisterMatch: any;
  RegisterUnion: any;
  RegisterUnionSeparate: any;
  Structures: any;
  StructureMap: any;
  DrawStars: any;
  DrawPutativeStarMatches: any;
  DrawMatchedStars: any;
  OutputMatrix: any;
  NearestNeighbor: any;
  Bilinear: any;
  BicubicSpline: any;
  BicubicBSpline: any;
  Lanczos3: any;
  Lanczos4: any;
  Lanczos5: any;
  MitchellNetravaliFilter: any;
  CatmullRomSplineFilter: any;
  CubicBSplineFilter: any;
  Auto: any;
  SameAsTarget: any;
  i8: any;
  i16: any;
  i32: any;
  f32: any;
  f64: any;
  Continue: any;
  Abort: any;
  AskUser: any;
}
declare class StarGenerator {
  starDatabasePath: any;
  centerRA: any;
  centerDec: any;
  epoch: any;
  projectionSystem: any;
  focalLength: any;
  pixelSize: any;
  sensorWidth: any;
  sensorHeight: any;
  limitMagnitude: any;
  starFWHM: any;
  nonlinear: any;
  targetMinimumValue: any;
  outputMode: any;
  outputFilePath: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Conformal: any;
  Gnomonic: any;
  Output_Image: any;
  Output_CSVFile: any;
}
declare class StarMask {
  shadowsClipping: any;
  midtonesBalance: any;
  highlightsClipping: any;
  waveletLayers: any;
  structureContours: any;
  noiseThreshold: any;
  aggregateStructures: any;
  binarizeStructures: any;
  largeScaleGrowth: any;
  smallScaleGrowth: any;
  growthCompensation: any;
  smoothness: any;
  invert: any;
  truncation: any;
  limit: any;
  mode: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  StarMask: any;
  StructureMap: any;
  StarMaskOverlay: any;
  StructureMapOverlay: any;
}
declare class StarNet {
  stride: any;
  mask: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  Stride_128: any;
  Stride_64: any;
  Stride_32: any;
  Stride_16: any;
  Stride_8: any;
}
declare class StarPosition {
  alpha: any;
  rightAscension: any;
  delta: any;
  declination: any;
  muAlpha: any;
  properMotionRA: any;
  muDelta: any;
  properMotionDec: any;
  parallax: any;
  radialVelocity: any;
  epoch: any;
}
declare class Statistics {
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class String {
  length: any;
  quote: any;
  toSource: any;
  toString: any;
  valueOf: any;
  substring: any;
  toLowerCase: any;
  toUpperCase: any;
  charAt: any;
  charCodeAt: any;
  contains: any;
  indexOf: any;
  lastIndexOf: any;
  startsWith: any;
  endsWith: any;
  trim: any;
  trimLeft: any;
  trimRight: any;
  toLocaleLowerCase: any;
  toLocaleUpperCase: any;
  localeCompare: any;
  repeat: any;
  match: any;
  search: any;
  replace: any;
  split: any;
  substr: any;
  concat: any;
  slice: any;
  bold: any;
  italics: any;
  fixed: any;
  fontsize: any;
  fontcolor: any;
  link: any;
  anchor: any;
  strike: any;
  small: any;
  big: any;
  blink: any;
  sup: any;
  sub: any;
  iterator: any;
  toBoolean: any;
  tryToBoolean: any;
  toFloat: any;
  tryToFloat: any;
  toDouble: any;
  tryToDouble: any;
  toNumber: any;
  tryToNumber: any;
  toInt: any;
  tryToInt: any;
  toUInt: any;
  tryToUInt: any;
  toInt64: any;
  tryToInt64: any;
  toUInt64: any;
  tryToUInt64: any;
  unquote: any;
}
declare class SubframeSelector {
  routine: any;
  subframes: any;
  fileCache: any;
  subframeScale: any;
  cameraGain: any;
  cameraResolution: any;
  siteLocalMidnight: any;
  scaleUnit: any;
  dataUnit: any;
  trimmingFactor: any;
  structureLayers: any;
  noiseLayers: any;
  hotPixelFilterRadius: any;
  applyHotPixelFilter: any;
  noiseReductionFilterRadius: any;
  sensitivity: any;
  peakResponse: any;
  maxDistortion: any;
  upperLimit: any;
  backgroundExpansion: any;
  xyStretch: any;
  psfFit: any;
  psfFitCircular: any;
  pedestal: any;
  roiX0: any;
  roiY0: any;
  roiX1: any;
  roiY1: any;
  inputHints: any;
  outputHints: any;
  outputDirectory: any;
  outputExtension: any;
  outputPrefix: any;
  outputPostfix: any;
  outputKeyword: any;
  overwriteExistingFiles: any;
  onError: any;
  approvalExpression: any;
  weightingExpression: any;
  sortProperty: any;
  graphProperty: any;
  measurements: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
  MeasureSubframes: any;
  OutputSubframes: any;
  StarDetectionPreview: any;
  Bits8: any;
  Bits10: any;
  Bits12: any;
  Bits14: any;
  Bits16: any;
  ArcSeconds: any;
  Pixel: any;
  Electron: any;
  DataNumber: any;
  Gaussian: any;
  Moffat10: any;
  Moffat8: any;
  Moffat6: any;
  Moffat4: any;
  Moffat25: any;
  Moffat15: any;
  Lorentzian: any;
  Continue: any;
  Abort: any;
  AskUser: any;
  Index: any;
  Weight: any;
  FWHM: any;
  Eccentricity: any;
  SNRWeight: any;
  Median: any;
  MedianMeanDev: any;
  Noise: any;
  NoiseRatio: any;
  Stars: any;
  StarResidual: any;
  FWHMMeanDev: any;
  EccentricityMeanDev: any;
  StarResidualMeanDev: any;
}
declare class Superbias {
  columns: any;
  rows: any;
  medianTransform: any;
  excludeLargeScale: any;
  multiscaleLayers: any;
  trimmingFactor: any;
  superbiasViewId: any;
  superbiasViewId1: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class SurfaceSimplifier {
  tolerance: any;
  rejectFraction: any;
  rejectionEnabled: any;
  centroidInclusionEnabled: any;
  simplify: any;
}
declare class SurfaceSpline {
  isValid: any;
  length: any;
  order: any;
  smoothing: any;
  initialize: any;
  clear: any;
  assign: any;
  evaluate: any;
}
declare class SyntaxError {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
}
declare class TGVDenoise {
  rgbkMode: any;
  filterEnabledL: any;
  filterEnabledC: any;
  strengthL: any;
  strengthC: any;
  edgeProtectionL: any;
  edgeProtectionC: any;
  smoothnessL: any;
  smoothnessC: any;
  maxIterationsL: any;
  maxIterationsC: any;
  convergenceEnabledL: any;
  convergenceEnabledC: any;
  convergenceLimitL: any;
  convergenceLimitC: any;
  supportEnabled: any;
  supportViewId: any;
  supportPreview: any;
  supportRemovedWaveletLayers: any;
  supportShadowsClip: any;
  supportHighlightsClip: any;
  supportMidtonesBalance: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class TabBox {
  currentPageIndex: any;
  currentPageControl: any;
  numberOfPages: any;
  tabPosition: any;
  leftControl: any;
  rightControl: any;
  onPageSelected: any;
  addPage: any;
  insertPage: any;
  removePage: any;
  enablePage: any;
  disablePage: any;
  isPageEnabled: any;
  pageIcon: any;
  setPageIcon: any;
  clearPageIcon: any;
  pageLabel: any;
  setPageLabel: any;
  pageToolTip: any;
  setPageToolTip: any;
  clearControls: any;
  pageControlByIndex: any;
}
declare class TextBox {
  text: any;
  caretPosition: any;
  selectionStart: any;
  selectionEnd: any;
  selectedText: any;
  hasSelection: any;
  readOnly: any;
  onCaretPositionUpdated: any;
  onSelectionUpdated: any;
  onTextUpdated: any;
  insert: any;
  clear: any;
  end: any;
  home: any;
  selectAll: any;
  unselect: any;
}
declare class Timer {
  interval: any;
  singleShot: any;
  periodic: any;
  isRunning: any;
  count: any;
  onTimeout: any;
  start: any;
  stop: any;
}
declare class ToolButton {
  text: any;
  icon: any;
  iconWidth: any;
  iconHeight: any;
  checkable: any;
  checked: any;
  pushed: any;
  state: any;
  onCheck: any;
  onClick: any;
  onPress: any;
  onRelease: any;
}
declare class TreeBox {
  numberOfChildren: any;
  currentNode: any;
  multipleSelection: any;
  selectedNodes: any;
  numberOfColumns: any;
  indentSize: any;
  nodeExpansion: any;
  rootDecoration: any;
  alternateRowColor: any;
  uniformRowHeight: any;
  iconWidth: any;
  iconHeight: any;
  headerVisible: any;
  headerSorting: any;
  nodeDragging: any;
  onCurrentNodeUpdated: any;
  onNodeActivated: any;
  onNodeUpdated: any;
  onNodeEntered: any;
  onNodeClicked: any;
  onNodeDoubleClicked: any;
  onNodeExpanded: any;
  onNodeCollapsed: any;
  onNodeSelectionUpdated: any;
  child: any;
  childIndex: any;
  insert: any;
  add: any;
  remove: any;
  clear: any;
  selectAllNodes: any;
  nodeByPosition: any;
  setNodeIntoView: any;
  nodeRect: any;
  setIconSize: any;
  isColumnVisible: any;
  showColumn: any;
  hideColumn: any;
  columnWidth: any;
  setColumnWidth: any;
  adjustColumnWidthToContents: any;
  headerText: any;
  setHeaderText: any;
  headerIcon: any;
  setHeaderIcon: any;
  headerAlignment: any;
  setHeaderAlignment: any;
  sort: any;
}
declare class TreeBoxNode {
  parentTree: any;
  parent: any;
  numberOfChildren: any;
  enabled: any;
  expanded: any;
  selectable: any;
  selected: any;
  checkable: any;
  checked: any;
  child: any;
  add: any;
  insert: any;
  remove: any;
  text: any;
  setText: any;
  icon: any;
  setIcon: any;
  clearIcon: any;
  alignment: any;
  setAlignment: any;
  toolTip: any;
  setToolTip: any;
  font: any;
  setFont: any;
  backgroundColor: any;
  setBackgroundColor: any;
  textColor: any;
  setTextColor: any;
}
declare class TypeDescription {
  isNull: any;
  id: any;
  hasProperties: any;
  properties: any;
  hasStaticProperties: any;
  staticProperties: any;
  hasEventHandlers: any;
  eventHandlers: any;
  hasConstructors: any;
  constructors: any;
  hasMethods: any;
  methods: any;
  hasStaticMethods: any;
  staticMethods: any;
  hasConstants: any;
  constants: any;
  inherits: any;
  objectsInherited: any;
  objectsInheriting: any;
  inheritsFrom: any;
  inheritedBy: any;
}
declare class TypeError {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
}
declare class URIError {
  name: any;
  message: any;
  fileName: any;
  lineNumber: any;
  columnNumber: any;
}
declare class Uint16Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class Uint32Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class Uint8Array {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class Uint8ClampedArray {
  BYTES_PER_ELEMENT: any;
  length: any;
  buffer: any;
  byteLength: any;
  byteOffset: any;
  iterator: any;
  subarray: any;
  set: any;
}
declare class UnsharpMask {
  sigma: any;
  amount: any;
  useLuminance: any;
  linear: any;
  deringing: any;
  deringingDark: any;
  deringingBright: any;
  outputDeringingMaps: any;
  rangeLow: any;
  rangeHigh: any;
  processId: any;
  processCategory: any;
  isAssignable: any;
  canProcessViews: any;
  canProcessGlobal: any;
  canProcessImages: any;
  assign: any;
  validate: any;
  isMaskable: any;
  canExecuteOn: any;
  isHistoryUpdater: any;
  executeOn: any;
  canExecuteGlobal: any;
  executeGlobal: any;
  launch: any;
  canLaunchInterface: any;
  launchInterface: any;
  startJD: any;
  executionTime: any;
  description: any;
  setDescription: any;
  toSource: any;
  writeInstanceAddr: any;
  readIcon: any;
  writeIcon: any;
}
declare class Vector {
  length: any;
  isEmpty: any;
  lowerBound: any;
  upperBound: any;
  assign: any;
  swap: any;
  isEqualTo: any;
  isLessThan: any;
  at: any;
  add: any;
  sub: any;
  mul: any;
  dot: any;
  dotProduct: any;
  cross: any;
  crossProduct: any;
  div: any;
  pow: any;
  abs: any;
  sqr: any;
  sqrt: any;
  setAbs: any;
  setSqr: any;
  setSqrt: any;
  norm: any;
  l1norm: any;
  l2norm: any;
  unit: any;
  setUnit: any;
  reverse: any;
  sort: any;
  linearSearch: any;
  binarySearch: any;
  minComponent: any;
  maxComponent: any;
  orderStatistic: any;
  sum: any;
  modulus: any;
  sumOfSquares: any;
  mean: any;
  stableSum: any;
  stableModulus: any;
  stableSumOfSquares: any;
  stableMean: any;
  trimmedMean: any;
  trimmedMeanOfSquares: any;
  median: any;
  stdDev: any;
  variance: any;
  avgDev: any;
  stableAvgDev: any;
  twoSidedAvgDev: any;
  MAD: any;
  twoSidedMAD: any;
  biweightMidvariance: any;
  BWMV: any;
  twoSidedBiweightMidvariance: any;
  twoSidedBWMV: any;
  bendMidvariance: any;
  PBMV: any;
  Sn: any;
  Qn: any;
  setRandom: any;
  toSpherical: any;
  toSpherical2Pi: any;
  toArray: any;
  toFloat32Array: any;
  toFloat64Array: any;
}
declare class VectorGraphics {
  pen: any;
  brush: any;
  brushOrigin: any;
  font: any;
  backgroundBrush: any;
  transparentBackground: any;
  compositionOperator: any;
  opacity: any;
  antialiasing: any;
  textAntialiasing: any;
  smoothInterpolation: any;
  clipping: any;
  clipRect: any;
  transformationEnabled: any;
  transformationMatrix: any;
  isPainting: any;
  multiplyTransformation: any;
  rotateTransformation: any;
  scaleTransformation: any;
  translateTransformation: any;
  shearTransformation: any;
  resetTransformation: any;
  transformed: any;
  begin: any;
  end: any;
  pushState: any;
  popState: any;
  drawPoint: any;
  drawLine: any;
  drawRect: any;
  strokeRect: any;
  fillRect: any;
  eraseRect: any;
  drawRoundedRect: any;
  strokeRoundedRect: any;
  fillRoundedRect: any;
  eraseRoundedRect: any;
  drawEllipse: any;
  strokeEllipse: any;
  fillEllipse: any;
  eraseEllipse: any;
  drawCircle: any;
  strokeCircle: any;
  fillCircle: any;
  eraseCircle: any;
  drawPolygon: any;
  strokePolygon: any;
  fillPolygon: any;
  erasePolygon: any;
  drawPolyline: any;
  drawEllipticArc: any;
  drawArc: any;
  drawEllipticChord: any;
  strokeEllipticChord: any;
  fillEllipticChord: any;
  eraseEllipticChord: any;
  drawChord: any;
  strokeChord: any;
  fillChord: any;
  eraseChord: any;
  drawEllipticPie: any;
  strokeEllipticPie: any;
  fillEllipticPie: any;
  eraseEllipticPie: any;
  drawPie: any;
  strokePie: any;
  fillPie: any;
  erasePie: any;
  drawBitmap: any;
  drawBitmapRect: any;
  drawScaledBitmap: any;
  drawScaledBitmapRect: any;
  drawTiledBitmap: any;
  drawText: any;
  drawTextRect: any;
  textRect: any;
}
declare class View {
  id: any;
  fullId: any;
  uniqueId: any;
  window: any;
  image: any;
  isView: any;
  isNull: any;
  isMainView: any;
  isPreview: any;
  isVirtual: any;
  stf: any;
  properties: any;
  processing: any;
  initialProcessing: any;
  historyIndex: any;
  canGoForward: any;
  canGoBackward: any;
  beginProcess: any;
  endProcess: any;
  cancelProcess: any;
  propertyValue: any;
  setPropertyValue: any;
  computeProperty: any;
  computeOrFetchProperty: any;
  propertyType: any;
  propertyAttributes: any;
  setPropertyAttributes: any;
  hasProperty: any;
  deleteProperty: any;
  importProperties: any;
  exportProperties: any;
}
declare class ViewList {
  currentView: any;
  excludedView: any;
  includesMainViews: any;
  includesPreviews: any;
  excludeIdentifiersPattern: any;
  onCurrentViewUpdated: any;
  onViewSelected: any;
  getAll: any;
  getMainViews: any;
  getPreviews: any;
  reload: any;
  remove: any;
}
declare class WeakMap {
  has: any;
  get: any;
  delete: any;
  set: any;
  clear: any;
}
declare class WebView {
  hasSelection: any;
  selectedText: any;
  zoomFactor: any;
  backgroundColor: any;
  onLoadStarted: any;
  onLoadProgress: any;
  onLoadFinished: any;
  onSelectionUpdated: any;
  onPlainTextAvailable: any;
  onHTMLAvailable: any;
  onScriptResultAvailable: any;
  setContent: any;
  setHTML: any;
  setPlainText: any;
  loadContent: any;
  requestPlainText: any;
  requestHTML: any;
  saveAsPDF: any;
  reload: any;
  stop: any;
  evaluateScript: any;
}

declare const console: any;
declare let jsStrictMode: boolean;
